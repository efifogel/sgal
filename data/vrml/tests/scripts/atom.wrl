#VRML V2.0 utf8

DEF AtomTRANSFORM Transform {
  translation 0 0 0
  children [
    Transform {
      scale .5 .5 .5
      children [
	DEF SENSOR PlaneSensor {
	  minPosition -8 0
	  maxPosition 8 8
	  offset 0 0 0
	}
	Shape {
	  appearance Appearance { material Material { diffuseColor 1 1 0 } }
	  geometry IndexedFaceSet {
	    coord Coordinate {
	      point [-1 1 1, 1 1 1, 1 1 -1, -1 1 -1,
		     -1 0 1, 1 0 1, 1 0 -1, -1 0 -1]
	    }
	    coordIndex [
			0,1,2,3,-1,
			7,6,5,4,-1,
			4,5,1,0,-1,
			6,7,3,2,-1,
			0,3,7,4,-1,
			2,1,5,6
		       ]
	  }
	}
       ]
    }
   ]
}

###

DEF GravityCLOCK TimeSensor {
  cycleInterval 12.0
  loop TRUE
  enabled FALSE
}

DEF GravityBounceCLOCK TimeSensor {
  cycleInterval 12.0
  loop TRUE
  enabled FALSE
}

DEF GravityBounceEndCLOCK TimeSensor {
  cycleInterval 12.0
  loop TRUE
  enabled FALSE
}

DEF GravityChangeSCRIPT Script {
  eventIn SFBool startMe
  eventIn SFBool stopMe
  eventIn SFFloat fall
  eventIn SFFloat bounce
  eventIn SFFloat bounceEnd
  eventIn SFVec3f set_translation
  eventOut SFVec3f next
  eventOut SFVec3f bounceVec
  eventOut SFVec3f newSensor
  eventOut SFBool setClock
  eventOut SFBool bounceClock
  eventOut SFBool bounceEndClock
  field SFFloat currentX 0
  field SFFloat currentY 0
  field SFFloat currentZ 0
  field SFFloat lastY 0
  url "javascript:
function bounceEnd(fract) {
  bounceVec[0] = currentX;
  bounceVec[1] = bounceVec[1]-.1;
  bounceVec[2] = currentZ;
  if (bounceVec[1] <= 0){
    bounceClock = 'FALSE';
    bounceEndClock = 'FALSE';
  }
}
function bounce(fract) {
  bounceVec[0] = currentX;
  bounceVec[1] = bounceVec[1]+.1;
  bounceVec[2] = currentZ;
  if (bounceVec[1] > .3){
    bounceClock = 'FALSE';
    bounceEndClock = 'TRUE';
  }
}
function fall(frac) {
  if (currentY > 0){
    currentY = (currentY-.05);
    next[0] = currentX;
    next[1] = currentY;
    next[2] = currentZ;
  } else {
    currentY = 0;
    stopMe();
  }
}
function startMe(a) {
  setClock = 1;
  bounceClock = 0;
  bounceEndClock = 'FALSE';
}
function stopMe(a) {
  setClock = 0;
  newSensor[0] = currentX;
  newSensor[1] = currentY;
  newSensor[2] = currentZ;
  bounceClock = 1;
}
function set_translation(into) {
  currentX = into[0];
  currentZ = into[2];
  currentY = into[1];
}
"
}

ROUTE SENSOR.isActive TO GravityChangeSCRIPT.startMe
ROUTE GravityChangeSCRIPT.setClock TO GravityCLOCK.set_enabled
ROUTE GravityCLOCK.fraction TO GravityChangeSCRIPT.fall
ROUTE GravityChangeSCRIPT.next TO AtomTRANSFORM.set_translation

ROUTE SENSOR.translation TO GravityChangeSCRIPT.set_translation
ROUTE SENSOR.translation TO AtomTRANSFORM.set_translation
ROUTE GravityChangeSCRIPT.newSensor TO SENSOR.set_offset
############################################################
ROUTE GravityChangeSCRIPT.bounceClock TO GravityBounceCLOCK.set_enabled
ROUTE GravityBounceCLOCK.fraction TO GravityChangeSCRIPT.bounce
#ROUTE GravityCLOCK.stopTime TO GravityBounceCLOCK.set_startTime
ROUTE GravityChangeSCRIPT.bounceVec TO AtomTRANSFORM.set_translation

ROUTE GravityChangeSCRIPT.bounceEndClock TO GravityBounceEndCLOCK.set_enabled
ROUTE GravityBounceEndCLOCK.fraction TO GravityChangeSCRIPT.bounceEnd
############################################################
############################################################
