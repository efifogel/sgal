#VRML V2.0 utf8
DEF CONFIG Configuration {
  stencilBits 1
}
DEF SIM Simulation {}

ColorBackground {
  color 0.5 0.5 0.5 1
  clearStencil TRUE
}

DEF SWITCH_KEY SingleKeySensor {
  boolean FALSE
  key "H"
  numberOfStates 2
}

DEF EXAMINE_NAV NavigationInfo { type [ "EXAMINE" "ANY" ] }
DEF DRAW_DUAL_MINK_KEY SingleKeySensor { key "c" }
DEF DRAW_DUAL_MINK_OPAQUE_KEY SingleKeySensor { key "o" }
DEF DRAW_DUAL_MINK_HALOED_KEY SingleKeySensor { key "l" }
DEF DRAW_DUAL_MINK_SPHERE_KEY SingleKeySensor { key "b" state TRUE }

DEF ROBOT_NAVIGATION NavigationInfo {
  type [ "TRANSFORM" ]
#  translation 3 0 0
}

DEF DRAW_DUAL_ROBOT_KEY SingleKeySensor { key "d" }
DEF FLATTEN_ROBOT_KEY SingleKeySensor { key "f" }

DEF ROBOT_TRANSFORMER TransformerWithExactCoordinates {
#  translation 3 0 0
  coord DEF ROBOT_COORD ExactCoordinate {
    ratPoint [3000/1000     0/1000  1175/1000,
	      4050/1000     0/1000   525/1000,
	      3325/1000  1000/1000   525/1000,
	      2150/1000   618/1000   525/1000,
	      2150/1000  -618/1000   525/1000,
	      3325/1000 -1000/1000   525/1000,
	      3850/1000   618/1000  -525/1000,
	      3850/1000  -618/1000  -525/1000,
	      2675/1000  1000/1000  -525/1000,
	      1950/1000     0/1000  -525/1000,
	      2675/1000 -1000/1000  -525/1000,
	      3000/1000     0/1000 -1175/1000
	     ]
  }
}

DEF OBSTACLE_NAVIGATION NavigationInfo {
  type [ "TRANSFORM" ]
#  translation -3 0 0
}

DEF DRAW_DUAL_OBSTACLE_KEY SingleKeySensor { key "e" }
DEF FLATTEN_OBSTACLE_KEY SingleKeySensor { key "g" }

DEF OBSTACLE_TRANSFORMER TransformerWithExactCoordinates {
#  translation -3 0 0
  coord DEF OBSTACLE_COORD ExactCoordinate {
    ratPoint [-3000/1000     0/1000  1175/1000,
	      -1950/1000     0/1000   525/1000,
	      -2675/1000  1000/1000   525/1000,
	      -3850/1000   618/1000   525/1000,
	      -3850/1000  -618/1000   525/1000,
	      -2675/1000 -1000/1000   525/1000,
	      -2150/1000   618/1000  -525/1000,
	      -2150/1000  -618/1000  -525/1000,
	      -3325/1000  1000/1000  -525/1000,
	      -4050/1000     0/1000  -525/1000,
	      -3325/1000 -1000/1000  -525/1000,
	      -3000/1000     0/1000 -1175/1000
	     ]
  }
}

# No point using ExactCoordinateMinkowski, because we route the output
# coordinates of the transformers as input to this node. The output
# coordinates of the transformers are inexact; an exact transformer is
# not implemented yet (requires exact rotation).
DEF COORD_ADDER CoordinateMinkowski {
  coord1 USE ROBOT_COORD
  coord2 USE OBSTACLE_COORD
}

Transform {
  children [
    DEF TRANSFORM_ROBOT Transform {
      children [
	DEF SELECT_ROBOT TouchSensor { enabled TRUE }
	Shape {
	  appearance Appearance {
	    material Material { diffuseColor 0.5 0.2 0.1 }
	  }
	  geometry DEF ROBOT SphericalGaussianMapColored {
	    drawAos FALSE
	    coord USE ROBOT_COORD
	    coordIndex [0,1,2,-1,
			0,2,3,-1,
			0,3,4,-1,
			0,4,5,-1,
			0,5,1,-1,
			1,5,7,-1,
			1,7,6,-1,
			1,6,2,-1,
			2,6,8,-1,
			2,8,3,-1,
			3,8,9,-1,
			3,9,4,-1,
			4,9,10,-1,
			4,10,5,-1,
			5,10,7,-1,
			6,7,11,-1,
			6,11,8,-1,
			7,10,11,-1,
			8,11,9,-1,
			9,11,10,-1
		       ]
	  }
	}
       ]
    }

    DEF TRANSFORM_OBSTACLE Transform {
      children [
	DEF SELECT_OBSTACLE TouchSensor { enabled TRUE }
	Shape {
	  appearance Appearance {
	    material Material { diffuseColor 0.1 0.2 0.5 }
	  }
	  geometry DEF OBSTACLE SphericalGaussianMapColored {
	    drawAos FALSE
	    coord USE OBSTACLE_COORD
	    coordIndex [0,1,2,-1,
			0,2,3,-1,
			0,3,4,-1,
			0,4,5,-1,
			0,5,1,-1,
			1,5,7,-1,
			1,7,6,-1,
			1,6,2,-1,
			2,6,8,-1,
			2,8,3,-1,
			3,8,9,-1,
			3,9,4,-1,
			4,9,10,-1,
			4,10,5,-1,
			5,10,7,-1,
			6,7,11,-1,
			6,11,8,-1,
			7,10,11,-1,
			8,11,9,-1,
			9,11,10,-1
		       ]
	  }
	}
       ]
    }

    DEF MINK_SWITCH Switch {
      whichChoice 0
      children [
	Shape {
	  appearance Appearance {
	    material Material { diffuseColor 0.4 0.4 0.4 }
	  }
	  geometry DEF MINK SphericalGaussianMapColored {
	    drawAos FALSE
    	    aosEdgeColor1 0.5 0.2 0.1
    	    aosEdgeColor2 0.1 0.2 0.5
	    aosVertexColor 0.2 0.5 0.2
	    geometries [
              USE ROBOT
              USE OBSTACLE
	     ]
	  }
	}
       ]
    }
    DEF MINK_CH_SWITCH Switch {
      whichChoice -1
      children [
	Shape {
	  appearance Appearance {
	    material Material { diffuseColor 0.4 0.4 0.4 }
	  }
	  geometry DEF MINK_CH ExactPolyhedron {
	    convexHull TRUE
	  }
	}
       ]
    }
   ]
}

ROUTE DRAW_DUAL_ROBOT_KEY.state TO ROBOT.drawAos
ROUTE ROBOT_NAVIGATION.rotation TO ROBOT_TRANSFORMER.rotation
ROUTE ROBOT_NAVIGATION.translation TO ROBOT_TRANSFORMER.translation
ROUTE ROBOT_TRANSFORMER.coord_changed TO ROBOT.coord
ROUTE SELECT_ROBOT.isOver TO ROBOT_NAVIGATION.set_bind
ROUTE FLATTEN_ROBOT_KEY.press TO ROBOT_NAVIGATION.set_bind

ROUTE DRAW_DUAL_OBSTACLE_KEY.state TO OBSTACLE.drawAos
ROUTE OBSTACLE_NAVIGATION.rotation TO OBSTACLE_TRANSFORMER.rotation
ROUTE OBSTACLE_NAVIGATION.translation TO OBSTACLE_TRANSFORMER.translation
ROUTE OBSTACLE_TRANSFORMER.coord_changed TO OBSTACLE.coord
ROUTE SELECT_OBSTACLE.isOver TO OBSTACLE_NAVIGATION.set_bind
ROUTE FLATTEN_OBSTACLE_KEY.press TO OBSTACLE_NAVIGATION.set_bind

ROUTE DRAW_DUAL_MINK_KEY.state TO MINK.drawAos
ROUTE DRAW_DUAL_MINK_OPAQUE_KEY.state TO MINK.drawAosOpaque
ROUTE DRAW_DUAL_MINK_SPHERE_KEY.state TO MINK.drawAosSphere
ROUTE DRAW_DUAL_MINK_HALOED_KEY.state TO MINK.drawAosHaloed

ROUTE SIM.start TO ROBOT_TRANSFORMER.execute
ROUTE SIM.start TO OBSTACLE_TRANSFORMER.execute

ROUTE ROBOT_TRANSFORMER.coord_changed TO COORD_ADDER.coord1
ROUTE OBSTACLE_TRANSFORMER.coord_changed TO COORD_ADDER.coord2
ROUTE COORD_ADDER.coord_changed TO MINK_CH.coord

ROUTE SIM.start TO COORD_ADDER.execute

ROUTE SWITCH_KEY.intState TO MINK_SWITCH.whichChoice
