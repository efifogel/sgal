{"version":3,"file":"material-progress-bar.umd.min.js","sources":["../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value() { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n"],"names":["max","Math","min","v","this","color","_value","_bufferValue","mode","Object","defineProperty","MatProgressBar","prototype","clamp","_primaryTransform","transform","value","_bufferTransform","bufferValue","type","Component","args","selector","exportAs","host","role","aria-valuemin","aria-valuemax","[attr.aria-valuenow]","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","class","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","Input","MatProgressBarModule","NgModule","imports","CommonModule","MatCommonModule","exports","declarations"],"mappings":";;;;;;;ueAoF0B,6BAAF,KAAxBA,IAA4CA,EAA5C,KAAAC,KAAAD,IAAAE,EAAAD,KAAAC,IAAAF,EAAAG,kCA5CAC,KAAAC,MAAkD,UAElDD,KAAAE,OAA2B,EAO3BF,KAAAG,aAAiC,EAcjCH,KAAAI,KAAwE,cAAxE,MAjBAC,QAAAC,eAAMC,EAANC,UAAA,aAAA,WAAgB,MAAOR,MAAKE,YAC1B,SAAUH,GAAaC,KAAKE,OAASO,EAAMV,GAAK,oCAMlDM,OAAAC,eAAMC,EAANC,UAAA,mBAAA,WAAsB,MAAOR,MAAKG,kBAChC,SAAgBJ,GAAaC,KAAKG,aAAeM,EAAMV,GAAK,oCAY5DQ,EAAFC,UAAAE,kBAAE,WAEE,OAAQC,UAAW,UADPX,KAAKY,MAAQ,IAC7B,MAOEL,EAAFC,UAAAK,iBAAE,WACE,GAAiB,UAAbb,KAAKI,KAAkB,CAEzB,OAAQO,UAAW,UADPX,KAAKc,YAAc,IACrC,sBA7DAC,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iBACVC,MACFC,KAAA,cACMC,gBAAN,IACIC,gBAAJ,MACIC,uBAAJ,QACIC,cAAe,OACfC,sBAAJ,qBACIC,qBAAJ,oBACIC,mBAAJ,kBACIC,MAAJ,oBAEAC,SAAA,sYACAC,QAAA,m4HACEC,gBAAFC,EAAAA,wBAAAC,OACEC,cAAFC,EAAAA,kBAAAC,KACEC,qBAAF,4GAMAxB,cAAGC,KAAHwB,EAAAA,QAKAnC,OAAAW,KAAAwB,EAAAA,SAkBAhC,KCvDAiC,EAAA,yBARA,sBAcAzB,KAAC0B,EAAAA,SAADxB,OACEyB,SAAUC,EAAAA,aAAcC,EAAAA,iBACxBC,SAAUtC,EAAgBqC,EAAAA,iBAC1BE,cAAevC,6CAjBjBiC"}