{"version":3,"file":"material-autocomplete.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","getMatAutocompleteMissingPanelError","Error","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","mixinDisableRipple","MatAutocomplete","_changeDetectorRef","_elementRef","_this","_super","call","showPanel","_isOpen","displayWith","optionSelected","EventEmitter","_classList","id","tslib_1.__extends","defineProperty","classList","length","split","forEach","className","trim","nativeElement","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","options","withWrap","_setVisibility","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","emit","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","inputs","host","class","providers","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","propDecorators","ContentChildren","MatOption","descendants","optionGroups","MatOptgroup","Input","Output","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","InjectionToken","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","deps","Overlay","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","_element","_overlay","_viewContainerRef","_zone","_scrollStrategy","_dir","_formField","_document","_panelOpen","_manuallyFloatingLabel","_escapeEventStream","Subject","_onChange","_onTouched","ngOnDestroy","_destroyPanel","complete","autocomplete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_overlayRef","hasAttached","detach","_closingActionsSubscription","unsubscribe","detectChanges","merge","optionSelections","tabOut","pipe","filter","_outsideClickStream","detachments","observableOf","apply","map","onSelectionChange","activeItem","fromEvent","clickTarget","formField","contains","overlayElement","writeValue","value","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","ESCAPE","panelOpen","_resetActiveItem","next","stopPropagation","activeOption","ENTER","_selectViaInteraction","preventDefault","prevActiveItem","isArrowKey","UP_ARROW","DOWN_ARROW","TAB","onKeydown","_scrollToOption","_handleInput","document","activeElement","target","_handleFocus","readOnly","shouldAnimate","floatLabel","_animateAndLockLabel","activeOptionIndex","activeItemIndex","labelCount","countGroupLabelsBeforeOption","optionOffset","panelTop","newScrollTop","Math","max","_subscribeToClosingActions","firstStable","onStable","asObservable","take","optionChanges","changes","tap","_positionStrategy","recalculateLastPosition","delay","switchMap","panelClosingActions","subscribe","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","selected","deselect","updateSize","width","_getHostWidth","_portal","TemplatePortal","_getOverlayConfig","attach","OverlayConfig","positionStrategy","_getOverlayPosition","scrollStrategy","direction","position","connectedTo","_getConnectedElement","originX","originY","overlayX","overlayY","withFallbackPosition","_connectionContainerRef","getBoundingClientRect","setActiveItem","Directive","role","aria-autocomplete","[attr.aria-activedescendant]","[attr.aria-expanded]","[attr.aria-owns]","(focusin)","(blur)","(input)","(keydown)","ElementRef","ViewContainerRef","NgZone","ChangeDetectorRef","undefined","decorators","Inject","Directionality","Optional","MatFormField","Host","DOCUMENT","MatAutocompleteModule","NgModule","imports","MatOptionModule","OverlayModule","MatCommonModule","CommonModule","exports","declarations"],"mappings":"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"}