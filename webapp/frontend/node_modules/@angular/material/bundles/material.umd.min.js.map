{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      this.focus();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const previouslyFocusedIndex = this._keyManager.activeItemIndex;\n\n      this._keyManager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && this._keyManager.activeItem &&\n          this._keyManager.activeItemIndex !== previouslyFocusedIndex) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple) {\n        this.close();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element, false).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  set data(data: T[]) { this._data.next(data); }\n  get data() { return this._data.value; }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  set filter(filter: string) { this._filter.next(filter); }\n  get filter(): string { return this._filter.value; }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  get sort(): MatSort|null { return this._sort; }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  get paginator(): MatPaginator|null { return this._paginator; }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal<any> | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal<any> | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal<any>;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  _position: MatTabBodyPositionState;\n  @Input('position') set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  _origin: MatTabBodyOriginState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input('origin') set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n  get scrollDistance(): number { return this._scrollDistance; }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  get direction(): SortDirection { return this._direction; }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear() { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input('start') start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index() { return this._index; }\n  set index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active() { return this._active; }\n  set active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional() { return this._optional; }\n  set optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext { }\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  source: MatSlideToggle;\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    let event = new MatSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.onChange(this.checked);\n    this.change.emit(event);\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert() { return this._invert; }\n  set invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max() { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min() { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step() { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical() { return this._vertical; }\n  set vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: any = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. **/\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A radio-button. May be inside of\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value) { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value) {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage() {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value() { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition() { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition() { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  set classList(classes: string) { this.panelClass = classes; }\n  get classList(): string { return this.panelClass; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu. This method is used by the menu trigger\n   * to focus the first item when the menu is opened by the ENTER key.\n   */\n  focusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened by mouse,\n   * allowing the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // If the menu was opened by mouse, we focus the root node, which allows for the keyboard\n    // interactions to work. Otherwise, if the menu was opened by keyboard, we focus the first item.\n    if (this._openedByMouse) {\n      let rootNode = this._overlayRef!.overlayElement.firstElementChild as HTMLElement;\n\n      if (rootNode) {\n        this.menu.resetActiveItem();\n        rootNode.focus();\n      }\n    } else {\n      this.menu.focusFirstItem();\n    }\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse || !this.triggersSubmenu()) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList.onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': 'onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(private _elementRef: ElementRef) {\n    super();\n  }\n\n  /** Focuses the menu item. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  ngOnDestroy() {\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input() get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input() get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input() get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private  _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal<any>;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal<any>(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, false);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keyup event calling to toggle() if appropriate. */\n  _keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /** Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols() { return this._cols; }\n  set cols(value: any) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize() { return this._gutter; }\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) private _document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      // Note: 1 corresponds to `Node.ELEMENT_NODE` which we can't use in Universal.\n      if (element.childNodes[i].nodeType === 1) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  get minRows() { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows() { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input() get checked() {\n    return this._checked;\n  }\n\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input() get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input() get selectable(): boolean {\n    return this._selectable;\n  }\n\n\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input() get removable(): boolean {\n    return this._removable;\n  }\n\n\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  get id() { return this._id || this._uid; }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  get required() {\n    return this._required;\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur() { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus() { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog.  */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker() { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder() { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel() { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_toolbarRows","length","slice","call","_elementRef","nativeElement","childNodes","filter","node","classList","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","MatToolbar","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","PlatformModule","exports","MatToolbarRow","declarations","VERSION","Version","SELECT_PANEL_PADDING_X","_super","apply","arguments","role","MatRow","ctorParameters","MatTableModule","CdkTableModule","CommonModule","MatTable","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRow","MatHeaderRowDef","MatRowDef","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","value","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","Object","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","defineProperty","prototype","next","_sort","sort","_paginator","paginator","_this","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","pipe","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","subscribe","filteredData","obj","_updatePaginator","active","direction","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","connect","disconnect","MatInkBar","_ngZone","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","Directive","ElementRef","NgZone","MatTabLabel","templateRef","viewContainerRef","tslib_1.__extends","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","changes","hasOwnProperty","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Input","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","MatTabBodyPortal","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","_activeLinkChanged","_activeLinkElement","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","_platform","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","HIDE_ANIMATION","SHOW_ANIMATION","SimpleSnackBar","snackBarRef","action","closeWithAction","matSnackBarAnimations","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_onEnter","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","horizontalPosition","verticalPosition","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","exit","onMicrotaskEmpty","asObservable","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","afterDismissed","containerInstance","dismiss","duration","afterOpened","_dismissAfter","announcementMessage","announce","politeness","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","MatSnackBarRef","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","ENTERING","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","(click)","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","selected","optional","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","MatStepperNext","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","CDK_TABLE_TEMPLATE","CdkTable","CdkCellDef","CdkHeaderCellDef","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkCell","CdkHeaderRowDef","CdkRowDef","CDK_ROW_TEMPLATE","MatSidenavContainer","_drawers","ContentChildren","MatSidenav","ContentChild","MatSidenavContent","MatDrawerContainer","MatSidenavModule","MatDrawer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_rippleConfig","centered","radius","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","checked","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","source","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","percentage","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","_finishDismiss","clearTimeout","_durationTimeoutId","_open","dispose","InjectionToken","MatSnackBarConfig","DECELERATION_CURVE","EXITING","ACCELERATION_CURVE","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","blur","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","_manualListeners","listener","addEventListener","MatTooltip","_tooltipInstance","_disposeTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","IOS","removeEventListener","clear","delay","showDelay","_createTooltip","hideDelay","isVisible","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","platform","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","rootNode","resetActiveItem","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","nodeName","webkitUserSelect","userSelect","MatListSubheaderCssMatStyler","_navList","_isNavList","MatListItem","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","MatNavList","_MatListItemMixinBase","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOptionChange","MatSelectionListChange","MatListOption","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","getLabel","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_getValidDateOrNull","oldDate","_dateAdapter","format","_dateFormats","display","dateInput","sameDate","_valueChange","MatDatepickerInput","deserialize","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","_lastValueValid","isValid","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keyup","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_init","_selectedDate","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","getMonth","activeDate","toLocaleUpperCase","firstOfMonth","createDate","getYear","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","selectedChange","_userSelection","createMissingDateImplError","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","isAttached","completeClose","closedStream","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","selectedYear","selectedMonth","selectedDate","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_escapeEventStream","_destroyPanel","autocomplete","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","optionSelections","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","button","anchor","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]"],"mappings":"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"}