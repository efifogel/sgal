{"version":3,"file":"notification-count.component.js","sourceRoot":"","sources":["../../../../src/platform/core/notifications/notification-count.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, HostBinding, ChangeDetectionStrategy,\n         ViewChild, ElementRef, AfterContentInit } from '@angular/core';\n\nexport enum TdNotificationCountPositionY {\n  Top = <any>'top',\n  Bottom = <any>'bottom',\n  Center = <any>'center',\n}\n\nexport enum TdNotificationCountPositionX {\n  Before = <any>'before',\n  After = <any>'after',\n  Center = <any>'center',\n}\n\n@Component({\n  selector: 'td-notification-count',\n  styleUrls: ['./notification-count.component.scss' ],\n  templateUrl: './notification-count.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdNotificationCountComponent implements AfterContentInit {\n\n  private _notifications: number | boolean = 0;\n  private _positionY: TdNotificationCountPositionY;\n  private _positionX: TdNotificationCountPositionX;\n\n  /**\n   * Div content wrapper of `ng-content`.\n   */\n  @ViewChild('content') content: ElementRef;\n\n  /**\n   * color?: \"primary\" | \"accent\" | \"warn\"\n   * Sets the theme color of the notification tip. Defaults to \"warn\"\n   */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'warn';\n\n  /**\n   * positionX?: TdNotificationCountPositionX or \"before\" | \"after\" | \"center\"\n   * Sets the X position of the notification tip.\n   * Defaults to \"after\" if it has content, else 'center'.\n   */\n  @Input()\n  set positionX(positionX: TdNotificationCountPositionX) {\n    this._positionX = positionX;\n  }\n  get positionX(): TdNotificationCountPositionX {\n    return this._positionX;\n  }\n\n  /**\n   * positionY?: TdNotificationCountPositionY or \"top\" | \"bottom\" | \"center\"\n   * Sets the Y position of the notification tip.\n   * Defaults to \"top\" if it has content, else 'center'.\n   */\n  @Input()\n  set positionY(positionY: TdNotificationCountPositionY) {\n    this._positionY = positionY;\n  }\n  get positionY(): TdNotificationCountPositionY {\n    return this._positionY;\n  }\n\n  /**\n   * notifications?: number | boolean\n   * Number for the notification count. Shows component only if the input is a positive number or 'true'\n   */\n  @Input()\n  set notifications(notifications: number | boolean) {\n    this._notifications = notifications;\n  }\n\n  @HostBinding('class.td-notification-hidden')\n  get hideHost(): boolean {\n    return !this.show && !this._hasContent();\n  }\n\n  /**\n   * Sets the component in its 'noCount' state if [notifications] is a boolean 'true'.\n   * Makes the notification tip show without a count.\n   */\n  get noCount(): string | boolean {\n    return this._notifications === true;\n  }\n\n  /**\n   * Notification display string when a count is available.\n   * Anything over 99 gets set as 99+\n   */\n  get notificationsDisplay(): string {\n    if (this._notifications > 99) {\n      return '99+';\n    }\n    return this._notifications.toString();\n  }\n\n  /**\n   * Shows notification tip only when [notifications] is true or a positive integer.\n   */\n  get show(): boolean {\n    return this._notifications === true || (!isNaN(<any>this._notifications) && this._notifications > 0);\n  }\n\n  /**\n   * Check if [positionX] and [positionY] have been set as inputs, else use defaults depending on component content.\n   */\n  ngAfterContentInit(): void {\n    if (!this._positionX) {\n      this.positionX = this._hasContent() ? TdNotificationCountPositionX.After : TdNotificationCountPositionX.Center;\n    }\n    if (!this._positionY) {\n      this.positionY = this._hasContent() ? TdNotificationCountPositionY.Top : TdNotificationCountPositionY.Center;\n    }\n  }\n\n  /**\n   * Method to check if element has any kind of content (elements or text)\n   */\n  private _hasContent(): boolean {\n    if (this.content) {\n      let contentElement: HTMLElement = this.content.nativeElement;\n      return contentElement && (contentElement.children.length > 0 || !!contentElement.textContent.trim());\n    }\n    return false;\n  }\n\n}\n"]}