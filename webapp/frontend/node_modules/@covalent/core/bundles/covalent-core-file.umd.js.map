{
  "version": 3,
  "file": "covalent-core-file.umd.js",
  "sources": [
    "ng://@covalent/core/file/file/file.module.ts",
    "ng://@covalent/core/file/file/services/file.service.ts",
    "ng://@covalent/core/file/file/file-upload/file-upload.component.ts",
    "ng://@covalent/core/file/file/file-input/file-input.component.ts",
    "ng://@covalent/core/file/file/directives/file-drop.directive.ts",
    "ng://@covalent/core/file/file/directives/file-select.directive.ts"
  ],
  "sourcesContent": [
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TdFileSelectDirective } from './directives/file-select.directive';\nimport { TdFileDropDirective } from './directives/file-drop.directive';\nimport { TdFileUploadComponent } from './file-upload/file-upload.component';\nimport { TdFileInputComponent, TdFileInputLabelDirective } from './file-input/file-input.component';\nimport { TdFileService } from './services/file.service';\n\nconst TD_FILE: Type<any>[] = [\n  TdFileSelectDirective,\n  TdFileDropDirective,\n  TdFileUploadComponent,\n  TdFileInputComponent,\n  TdFileInputLabelDirective,\n];\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    PortalModule,\n  ],\n  declarations: [\n    TD_FILE,\n  ],\n  exports: [\n    TD_FILE,\n  ],\n  providers: [\n    TdFileService,\n  ],\n})\nexport class CovalentFileModule {\n\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscriber } from 'rxjs/Subscriber';\n\nexport interface IUploadOptions {\n  url: string;\n  method: 'post' | 'put';\n  file?: File;\n  headers?: {[key: string]: string};\n  formData?: FormData;\n}\n\n@Injectable()\nexport class TdFileService {\n\n  private _progressSubject: Subject<number> = new Subject<number>();\n  private _progressObservable: Observable<number>;\n\n  /**\n   * Gets progress observable to keep track of the files being uploaded.\n   * Needs to be supported by backend.\n   */\n  get progress(): Observable<number> {\n    return this._progressObservable;\n  }\n\n  constructor() {\n    this._progressObservable = this._progressSubject.asObservable();\n  }\n\n  /**\n   * params:\n   * - options: IUploadOptions {\n   *     url: string,\n   *     method: 'post' | 'put',\n   *     file?: File,\n   *     headers?: {[key: string]: string},\n   *     formData?: FormData\n   * }\n   *\n   * Uses underlying [XMLHttpRequest] to upload a file to a url.\n   * Will be depricated when angular fixes [Http] to allow [FormData] as body.\n   */\n  upload(options: IUploadOptions): Observable<any> {\n    return new Observable<any>((subscriber: Subscriber<any>) => {\n      let xhr: XMLHttpRequest = new XMLHttpRequest();\n      let formData: FormData = new FormData();\n\n      if (options.file !== undefined) {\n        formData.append('file', options.file);\n      } else if (options.formData !== undefined) {\n        formData = options.formData;\n      } else {\n        return subscriber.error('For [IUploadOptions] you have to set either the [file] or the [formData] property.');\n      }\n\n      xhr.upload.onprogress = (event: ProgressEvent) => {\n        let progress: number = 0;\n        if (event.lengthComputable) {\n          progress = Math.round(event.loaded / event.total * 100);\n        }\n        this._progressSubject.next(progress);\n      };\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            subscriber.next(xhr.response);\n            subscriber.complete();\n          } else {\n            subscriber.error(xhr.response);\n          }\n        }\n      };\n\n      xhr.open(options.method, options.url, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      if (options.headers) {\n        for (let key in options.headers) {\n          xhr.setRequestHeader(key, options.headers[key]);\n        }\n      }\n\n      xhr.send(formData);\n    });\n  }\n}\n",
    "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewChild, ContentChild, ChangeDetectorRef,\n  forwardRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\nimport { TdFileInputComponent, TdFileInputLabelDirective } from '../file-input/file-input.component';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nexport class TdFileUploadBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdFileUploadMixinBase = mixinControlValueAccessor(mixinDisabled(TdFileUploadBase));\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdFileUploadComponent),\n    multi: true,\n  }],\n  selector: 'td-file-upload',\n  inputs: ['disabled', 'value'],\n  styles: [`.td-file-upload {\n  padding-left: 8px;\n  padding-right: 8px; }\n\n.td-file-upload-cancel {\n  height: 24px;\n  width: 24px;\n  position: relative;\n  top: 24px;\n  left: -12px; }\n  ::ng-deep [dir='rtl'] .td-file-upload-cancel {\n    right: -12px;\n    left: 0; }\n  .td-file-upload-cancel mat-icon {\n    border-radius: 12px;\n    vertical-align: baseline; }\n\n/**\n* Class that is added ondragenter by the [TdFileDrop] directive.\n*/\n.drop-zone {\n  border-radius: 3px; }\n  .drop-zone * {\n    pointer-events: none; }\n`],\n  template: `<td-file-input *ngIf=\"!value\"\n               [(ngModel)]=\"value\"\n               [multiple]=\"multiple\"\n               [disabled]=\"disabled\"\n               [accept]=\"accept\"\n               [color]=\"defaultColor\"\n               (select)=\"handleSelect($event)\">\n  <ng-template [cdkPortalHost]=\"inputLabel\" [ngIf]=\"true\"></ng-template>\n</td-file-input>\n<div *ngIf=\"value\">\n  <button #fileUpload\n          class=\"td-file-upload\"\n          mat-raised-button\n          type=\"button\"\n          [color]=\"activeColor\"\n          (keyup.delete)=\"cancel()\"\n          (keyup.backspace)=\"cancel()\"\n          (keyup.escape)=\"cancel()\"\n          (click)=\"uploadPressed()\"> \n    <ng-content></ng-content>\n  </button>\n  <button mat-icon-button\n          type=\"button\"\n          class=\"td-file-upload-cancel\"\n          [color]=\"cancelColor\"            \n          (click)=\"cancel()\">\n    <mat-icon>cancel</mat-icon>\n  </button>\n</div>`,\n})\nexport class TdFileUploadComponent extends _TdFileUploadMixinBase implements IControlValueAccessor, ICanDisable {\n\n  private _multiple: boolean = false;\n  private _required: boolean = false;\n\n  @ViewChild(TdFileInputComponent) fileInput: TdFileInputComponent;\n\n  @ContentChild(TdFileInputLabelDirective) inputLabel: TdFileInputLabelDirective;\n\n  /**\n   * defaultColor?: string\n   * Sets browse button color. Uses same color palette accepted as [MatButton] and defaults to 'primary'.\n   */\n  @Input('defaultColor') defaultColor: string = 'primary';\n\n  /**\n   * activeColor?: string\n   * Sets upload button color. Uses same color palette accepted as [MatButton] and defaults to 'accent'.\n   */\n  @Input('activeColor') activeColor: string = 'accent';\n\n  /**\n   * cancelColor?: string\n   * Sets cancel button color. Uses same color palette accepted as [MatButton] and defaults to 'warn'.\n   */\n  @Input('cancelColor') cancelColor: string = 'warn';\n\n  /**\n   * multiple?: boolean\n   * Sets if multiple files can be dropped/selected at once in [TdFileUploadComponent].\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * required?: boolean\n   * Forces at least one file upload.\n   * Defaults to 'false'\n   */\n  @Input('required')\n  set required(required: boolean) {\n    this._required = coerceBooleanProperty(required);\n  }\n  get required(): boolean {\n    return this._required;\n  }\n\n  /**\n   * accept?: string\n   * Sets files accepted when opening the file browser dialog.\n   * Same as 'accept' attribute in <input/> element.\n   */\n  @Input('accept') accept: string;\n\n  /**\n   * select?: function\n   * Event emitted when a file is selected.\n   * Emits a [File | FileList] object.\n   */\n  @Output('select') onSelect: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  /**\n   * upload?: function\n   * Event emitted when upload button is clicked.\n   * Emits a [File | FileList] object.\n   */\n  @Output('upload') onUpload: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  /**\n   * cancel?: function\n   * Event emitted when cancel button is clicked.\n   */\n  @Output('cancel') onCancel: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(_changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * Method executed when upload button is clicked.\n   */\n  uploadPressed(): void {\n    if (this.value) {\n      this.onUpload.emit(this.value);\n    }\n  }\n\n  /**\n   * Method executed when a file is selected.\n   */\n  handleSelect(value: File | FileList): void {\n    this.value = value;\n    this.onSelect.emit(value);\n  }\n\n  /**\n   * Methods executed when cancel button is clicked.\n   * Clears files.\n   */\n  cancel(): void {\n    this.value = undefined;\n    this.onCancel.emit(undefined);\n    // check if the file input is rendered before clearing it\n    if (this.fileInput) {\n      this.fileInput.clear();\n    }\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    if (v) {\n      this.cancel();\n    }\n  }\n}\n",
    "import { Component, Directive, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewChild,\n         ElementRef, Renderer2, TemplateRef, ViewContainerRef, ChangeDetectorRef, forwardRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-file-input-label]ng-template',\n})\nexport class TdFileInputLabelDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\nexport class TdFileInputBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdFileInputMixinBase = mixinControlValueAccessor(mixinDisabled(TdFileInputBase));\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdFileInputComponent),\n    multi: true,\n  }],\n  selector: 'td-file-input',\n  inputs: ['disabled', 'value'],\n  styles: [`:host {\n  /**\n  * Class that is added ondragenter by the [TdFileDrop] directive.\n  */ }\n  :host .td-file-input {\n    padding-left: 8px;\n    padding-right: 8px; }\n  :host input.td-file-input-hidden {\n    display: none; }\n  :host .drop-zone {\n    border-radius: 3px; }\n    :host .drop-zone * {\n      pointer-events: none; }\n`],\n  template: `<div>\n  <button mat-raised-button\n          class=\"td-file-input\"\n          type=\"button\"\n          [color]=\"color\" \n          [multiple]=\"multiple\" \n          [disabled]=\"disabled\"\n          (keyup.enter)=\"fileInput.click()\"\n          (click)=\"fileInput.click()\"\n          (fileDrop)=\"handleSelect($event)\"\n          tdFileDrop>\n    <ng-content></ng-content>\n  </button>\n  <input #fileInput \n          class=\"td-file-input-hidden\" \n          type=\"file\"\n          [attr.accept]=\"accept\"                \n          (fileSelect)=\"handleSelect($event)\"\n          [multiple]=\"multiple\" \n          [disabled]=\"disabled\"\n          tdFileSelect>\n</div>`,\n})\nexport class TdFileInputComponent extends _TdFileInputMixinBase implements IControlValueAccessor, ICanDisable {\n\n  private _multiple: boolean = false;\n\n  /** The native `<input type=\"file\"> element */\n  @ViewChild('fileInput') _inputElement: ElementRef;\n  get inputElement(): HTMLInputElement {\n    return this._inputElement.nativeElement;\n  }\n\n  /**\n   * color?: string\n   * Sets button color. Uses same color palette accepted as [MatButton].\n   */\n  @Input('color') color: string;\n\n  /**\n   * multiple?: boolean\n   * Sets if multiple files can be dropped/selected at once in [TdFileInputComponent].\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * accept?: string\n   * Sets files accepted when opening the file browser dialog.\n   * Same as 'accept' attribute in <input/> element.\n   */\n  @Input('accept') accept: string;\n\n  /**\n   * select?: function\n   * Event emitted a file is selected\n   * Emits a [File | FileList] object.\n   */\n  @Output('select') onSelect: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  constructor(private _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * Method executed when a file is selected.\n   */\n  handleSelect(files: File | FileList): void {\n    this.writeValue(files);\n    this.onSelect.emit(files);\n  }\n\n  /**\n   * Used to clear the selected files from the [TdFileInputComponent].\n   */\n  clear(): void {\n    this.writeValue(undefined);\n    this._renderer.setProperty(this.inputElement, 'value', '');\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    if (v) {\n      this.clear();\n    }\n  }\n\n}\n",
    "import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding, ElementRef, Renderer2 } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport { ICanDisable, mixinDisabled } from '@covalent/core/common';\n\nexport class TdFileDropBase {}\n\n/* tslint:disable-next-line */\nexport const _TdFileDropMixinBase = mixinDisabled(TdFileDropBase);\n\n@Directive({\n  selector: '[tdFileDrop]',\n  inputs: ['disabled'],\n})\nexport class TdFileDropDirective extends _TdFileDropMixinBase implements ICanDisable {\n\n  private _multiple: boolean = false;\n\n  /**\n   * multiple?: boolean\n   * Sets whether multiple files can be dropped at once in host element, or just a single file.\n   * Can also be 'multiple' native attribute.\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n\n  /**\n   * fileDrop?: function\n   * Event emitted when a file or files are dropped in host element after being validated.\n   * Emits a [FileList | File] object.\n   */\n  @Output('fileDrop') onFileDrop: EventEmitter<FileList | File> = new EventEmitter<FileList | File>();\n\n  /**\n   * Binds native 'multiple' attribute if [multiple] property is 'true'.\n   */\n  @HostBinding('attr.multiple')\n  get multipleBinding(): string {\n    return this._multiple ? '' : undefined;\n  }\n\n  /**\n   * Binds native 'disabled' attribute if [disabled] property is 'true'.\n   */\n  @HostBinding('attr.disabled')\n  get disabledBinding(): string {\n    return this.disabled ? '' : undefined;\n  }\n\n  constructor(private _renderer: Renderer2, private _element: ElementRef) {\n    super();\n  }\n\n  /**\n   * Listens to 'drop' host event to get validated transfer items.\n   * Emits the 'onFileDrop' event with a [FileList] or [File] depending if 'multiple' attr exists in host.\n   * Stops event propagation and default action from browser for 'drop' event.\n   */\n  @HostListener('drop', ['$event'])\n  onDrop(event: Event): void {\n    if (!this.disabled) {\n      let transfer: DataTransfer = (<DragEvent>event).dataTransfer;\n      let files: FileList = transfer.files;\n      if (files.length) {\n        let value: FileList | File = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];\n        this.onFileDrop.emit(value);\n      }\n    }\n    this._renderer.removeClass(this._element.nativeElement, 'drop-zone');\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragover' host event to validate transfer items.\n   * Checks if 'multiple' attr exists in host to allow multiple file drops.\n   * Stops event propagation and default action from browser for 'dragover' event.\n   */\n  @HostListener('dragover', ['$event'])\n  onDragOver(event: Event): void {\n    let transfer: DataTransfer = (<DragEvent>event).dataTransfer;\n    transfer.dropEffect = this._typeCheck(transfer.types);\n    if (this.disabled || (!this._multiple &&\n      ((transfer.items && transfer.items.length > 1) || (<any>transfer).mozItemCount > 1))) {\n      transfer.dropEffect = 'none';\n    } else {\n      transfer.dropEffect = 'copy';\n    }\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragenter' host event to add animation class 'drop-zone' which can be overriden in host.\n   * Stops event propagation and default action from browser for 'dragenter' event.\n   */\n  @HostListener('dragenter', ['$event'])\n  onDragEnter(event: Event): void {\n    if (!this.disabled) {\n      this._renderer.addClass(this._element.nativeElement, 'drop-zone');\n    }\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragleave' host event to remove animation class 'drop-zone'.\n   * Stops event propagation and default action from browser for 'dragleave' event.\n   */\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event: Event): void {\n    this._renderer.removeClass(this._element.nativeElement, 'drop-zone');\n    this._stopEvent(event);\n  }\n\n  /**\n   * Validates if the transfer item types are 'Files'.\n   */\n  private _typeCheck(types: string[] | DOMStringList): string {\n    let dropEffect: string = 'none';\n    if (types) {\n      if (((<any>types).contains && (<any>types).contains('Files'))\n      || ((<any>types).indexOf && (<any>types).indexOf('Files') !== -1)) {\n        dropEffect = 'copy';\n      }\n    }\n    return dropEffect;\n  }\n\n  private _stopEvent(event: Event): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n",
    "import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding, Host, Optional } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NgModel } from '@angular/forms';\n\n@Directive({\n  selector: '[tdFileSelect]',\n})\nexport class TdFileSelectDirective {\n\n  private _multiple: boolean = false;\n\n  /**\n   * multiple?: boolean\n   * Sets whether multiple files can be selected at once in host element, or just a single file.\n   * Can also be 'multiple' native attribute.\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n\n  /**\n   * fileSelect?: function\n   * Event emitted when a file or files are selected in host [HTMLInputElement].\n   * Emits a [FileList | File] object.\n   * Alternative to not use [(ngModel)].\n   */\n  @Output('fileSelect') onFileSelect: EventEmitter<FileList | File> = new EventEmitter<FileList | File>();\n\n  /**\n   * Binds native 'multiple' attribute if [multiple] property is 'true'.\n   */\n  @HostBinding('attr.multiple')\n  get multipleBinding(): string {\n    return this._multiple ? '' : undefined;\n  }\n\n  constructor(@Optional() @Host() private model: NgModel) {\n  }\n\n  /**\n   * Listens to 'change' host event to get [HTMLInputElement] files.\n   * Emits the 'onFileSelect' event with a [FileList] or [File] depending if 'multiple' attr exists in host.\n   * Uses [(ngModel)] if declared, instead of emitting 'onFileSelect' event.\n   */\n  @HostListener('change', ['$event'])\n  onChange(event: Event): void {\n    if (event.target instanceof HTMLInputElement) {\n      let fileInputEl: HTMLInputElement = (<HTMLInputElement>event.target);\n      let files: FileList = fileInputEl.files;\n      if (files.length) {\n        let value: FileList | File = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];\n        this.model ? this.model.update.emit(value) : this.onFileSelect.emit(value);\n      }\n    }\n  }\n}\n"
  ],
  "names": [
    "FormsModule",
    "Injectable",
    "coerceBooleanProperty",
    "EventEmitter",
    "Output",
    "Input",
    "ChangeDetectorRef",
    "ChangeDetectionStrategy",
    "mixinControlValueAccessor",
    "mixinDisabled",
    "TemplatePortalDirective",
    "HostListener",
    "HostBinding",
    "Renderer2",
    "Directive"
  ],
  "mappings": "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"
}
