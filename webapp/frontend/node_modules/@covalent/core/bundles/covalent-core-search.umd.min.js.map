{
  "version": 3,
  "file": "covalent-core-search.umd.min.js",
  "sources": [
    "ng://@covalent/core/search/search/search-input/search-input.component.ts",
    "ng://@covalent/core/search/search/search-box/search-box.component.ts"
  ],
  "sourcesContent": [
    "import { Component, ViewChild, OnInit, Input, Output, EventEmitter, Optional,\n         ChangeDetectionStrategy, ChangeDetectorRef, forwardRef } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Dir } from '@angular/cdk/bidi';\nimport { MatInput } from '@angular/material/input';\n\nimport { debounceTime } from 'rxjs/operators/debounceTime';\nimport { skip } from 'rxjs/operators/skip';\n\nimport { IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\nexport class TdSearchInputBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) { }\n}\n\n/* tslint:disable-next-line */\nexport const _TdSearchInputMixinBase = mixinControlValueAccessor(TdSearchInputBase);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdSearchInputComponent),\n    multi: true,\n  }],\n  selector: 'td-search-input',\n  template: `<div class=\"td-search-input\">\n  <mat-form-field class=\"td-search-input-field\"\n                  [class.mat-hide-underline]=\"!showUnderline\"\n                  floatPlaceholder=\"never\">\n    <input matInput\n            #searchElement\n            type=\"search\"\n            [(ngModel)]=\"value\"\n            [placeholder]=\"placeholder\"\n            (blur)=\"handleBlur()\"\n            (search)=\"stopPropagation($event)\"\n            (keyup.enter)=\"handleSearch($event)\"/>\n  </mat-form-field>\n  <button mat-icon-button\n          class=\"td-search-input-clear\"\n          type=\"button\"\n          [@searchState]=\"(searchElement.value ?  'show' : (isRTL ? 'hide-left' : 'hide-right'))\"\n          (click)=\"clearSearch()\">\n    <mat-icon>{{clearIcon}}</mat-icon>\n  </button>\n</div>`,\n  styles: [`.td-search-input {\n  overflow-x: hidden;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -ms-flex-line-pack: center;\n      align-content: center;\n  max-width: 100%;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end; }\n  .td-search-input .td-search-input-field {\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1; }\n  .td-search-input ::ng-deep mat-form-field.mat-hide-underline .mat-form-field-underline {\n    display: none; }\n  .td-search-input .td-search-input-clear {\n    -webkit-box-flex: 0;\n        -ms-flex: 0 0 auto;\n            flex: 0 0 auto; }\n`],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['value'],\n  animations: [\n    trigger('searchState', [\n      state('hide-left', style({\n        transform: 'translateX(-150%)',\n        display: 'none',\n      })),\n      state('hide-right', style({\n        transform: 'translateX(150%)',\n        display: 'none',\n      })),\n      state('show',  style({\n        transform: 'translateX(0%)',\n        display: 'block',\n      })),\n      transition('* => show', animate('200ms ease-in')),\n      transition('show => *', animate('200ms ease-out')),\n    ]),\n  ],\n})\nexport class TdSearchInputComponent extends _TdSearchInputMixinBase implements IControlValueAccessor, OnInit {\n\n  @ViewChild(MatInput) _input: MatInput;\n\n  /**\n   * showUnderline?: boolean\n   * Sets if the input underline should be visible. Defaults to 'false'.\n   */\n  @Input('showUnderline') showUnderline: boolean = false;\n\n  /**\n   * debounce?: number\n   * Debounce timeout between keypresses. Defaults to 400.\n   */\n  @Input('debounce') debounce: number = 400;\n\n  /**\n   * placeholder?: string\n   * Placeholder for the underlying input component.\n   */\n  @Input('placeholder') placeholder: string;\n\n  /**\n   * clearIcon?: string\n   * The icon used to clear the search input.\n   * Defaults to 'cancel' icon.\n   */\n  @Input('clearIcon') clearIcon: string = 'cancel';\n\n  /**\n   * searchDebounce: function($event)\n   * Event emitted after the [debounce] timeout.\n   */\n  @Output('searchDebounce') onSearchDebounce: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * search: function($event)\n   * Event emitted after the key enter has been pressed.\n   */\n  @Output('search') onSearch: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * clear: function()\n   * Event emitted after the clear icon has been clicked.\n   */\n  @Output('clear') onClear: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * blur: function()\n   * Event emitted after the blur event has been called in underlying input.\n   */\n  @Output('blur') onBlur: EventEmitter<void> = new EventEmitter<void>();\n\n  get isRTL(): boolean {\n    if (this._dir) {\n      return this._dir.dir === 'rtl';\n    }\n    return false;\n  }\n\n  constructor(@Optional() private _dir: Dir,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  ngOnInit(): void {\n    this._input.ngControl.valueChanges.pipe(\n      skip(1), // skip first change when value is set to undefined\n      debounceTime(this.debounce),\n    ).subscribe((value: string) => {\n      this._searchTermChanged(value);\n    });\n  }\n\n  /**\n   * Method to focus to underlying input.\n   */\n  focus(): void {\n    this._input.focus();\n  }\n\n  handleBlur(): void {\n    this.onBlur.emit(undefined);\n  }\n\n  stopPropagation(event: Event): void {\n    event.stopPropagation();\n  }\n\n  handleSearch(event: Event): void {\n    this.stopPropagation(event);\n    this.onSearch.emit(this.value);\n  }\n\n  /**\n   * Method to clear the underlying input.\n   */\n  clearSearch(): void {\n    this.value = '';\n    this._changeDetectorRef.markForCheck();\n    this.onClear.emit(undefined);\n  }\n\n  private _searchTermChanged(value: string): void {\n    this.onSearchDebounce.emit(value);\n  }\n\n}\n",
    "import { Component, ViewChild, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, state, style, transition, animate, AUTO_STYLE } from '@angular/animations';\n\nimport { TdSearchInputComponent } from '../search-input/search-input.component';\nimport { IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\nexport class TdSearchBoxBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) { }\n}\n\n/* tslint:disable-next-line */\nexport const _TdSearchBoxMixinBase = mixinControlValueAccessor(TdSearchBoxBase);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdSearchBoxComponent),\n    multi: true,\n  }],\n  selector: 'td-search-box',\n  template: `<div class=\"td-search-box\">\n  <button mat-icon-button type=\"button\" class=\"td-search-icon\" (click)=\"searchClicked()\">\n    <mat-icon *ngIf=\"searchVisible && !alwaysVisible\">{{backIcon}}</mat-icon>\n    <mat-icon *ngIf=\"!searchVisible || alwaysVisible\">{{searchIcon}}</mat-icon>\n  </button>\n  <td-search-input #searchInput\n                   [@inputState]=\"alwaysVisible || searchVisible\"\n                   [debounce]=\"debounce\"\n                   [(ngModel)]=\"value\"\n                   [showUnderline]=\"showUnderline\"\n                   [placeholder]=\"placeholder\"\n                   [clearIcon]=\"clearIcon\"\n                   (searchDebounce)=\"handleSearchDebounce($event)\"\n                   (search)=\"handleSearch($event)\"\n                   (clear)=\"handleClear(); toggleVisibility()\">\n  </td-search-input>\n</div>`,\n  styles: [`:host {\n  display: block; }\n\n.td-search-box {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -ms-flex-line-pack: center;\n      align-content: center;\n  max-width: 100%;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end; }\n  .td-search-box .td-search-icon {\n    -webkit-box-flex: 0;\n        -ms-flex: 0 0 auto;\n            flex: 0 0 auto; }\n  .td-search-box td-search-input {\n    margin-left: 12px; }\n    ::ng-deep [dir='rtl'] .td-search-box td-search-input {\n      margin-right: 12px;\n      margin-left: 0 !important; }\n`],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['value'],\n  animations: [\n    trigger('inputState', [\n      state('0', style({\n        width: '0%',\n        margin: '0px',\n      })),\n      state('1',  style({\n        width: '100%',\n        margin: AUTO_STYLE,\n      })),\n      transition('0 => 1', animate('200ms ease-in')),\n      transition('1 => 0', animate('200ms ease-out')),\n    ]),\n  ],\n})\nexport class TdSearchBoxComponent extends _TdSearchBoxMixinBase implements IControlValueAccessor {\n\n  private _searchVisible: boolean = false;\n  @ViewChild(TdSearchInputComponent) _searchInput: TdSearchInputComponent;\n\n  get searchVisible(): boolean {\n    return this._searchVisible;\n  }\n\n  /**\n   * backIcon?: string\n   * The icon used to close the search toggle, only shown when [alwaysVisible] is false.\n   * Defaults to 'search' icon.\n   */\n  @Input('backIcon') backIcon: string = 'search';\n\n  /**\n   * searchIcon?: string\n   * The icon used to open/focus the search toggle.\n   * Defaults to 'search' icon.\n   */\n  @Input('searchIcon') searchIcon: string = 'search';\n\n  /**\n   * clearIcon?: string\n   * The icon used to clear the search input.\n   * Defaults to 'cancel' icon.\n   */\n  @Input('clearIcon') clearIcon: string = 'cancel';\n\n  /**\n   * showUnderline?: boolean\n   * Sets if the input underline should be visible. Defaults to 'false'.\n   */\n  @Input('showUnderline') showUnderline: boolean = false;\n\n  /**\n   * debounce?: number\n   * Debounce timeout between keypresses. Defaults to 400.\n   */\n  @Input('debounce') debounce: number = 400;\n\n  /**\n   * alwaysVisible?: boolean\n   * Sets if the input should always be visible. Defaults to 'false'.\n   */\n  @Input('alwaysVisible') alwaysVisible: boolean = false;\n\n  /**\n   * placeholder?: string\n   * Placeholder for the underlying input component.\n   */\n  @Input('placeholder') placeholder: string;\n\n  /**\n   * searchDebounce: function($event)\n   * Event emitted after the [debounce] timeout.\n   */\n  @Output('searchDebounce') onSearchDebounce: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * search: function($event)\n   * Event emitted after the key enter has been pressed.\n   */\n  @Output('search') onSearch: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * clear: function()\n   * Event emitted after the clear icon has been clicked.\n   */\n  @Output('clear') onClear: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(_changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * Method executed when the search icon is clicked.\n   */\n  searchClicked(): void {\n    if (this.alwaysVisible || !this._searchVisible) {\n      this._searchInput.focus();\n    }\n    this.toggleVisibility();\n  }\n\n  toggleVisibility(): void {\n    this._searchVisible = !this._searchVisible;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  handleSearchDebounce(value: string): void {\n    this.onSearchDebounce.emit(value);\n  }\n\n  handleSearch(value: string): void {\n    this.onSearch.emit(value);\n  }\n\n  handleClear(): void {\n    this.onClear.emit(undefined);\n  }\n\n}\n"
  ],
  "names": [
    "TdSearchInputBase",
    "_this",
    "_super",
    "call",
    "this",
    "_changeDetectorRef",
    "showUnderline",
    "debounce",
    "onSearch",
    "EventEmitter",
    "onClear",
    "Object",
    "defineProperty",
    "TdSearchInputComponent",
    "prototype",
    "get",
    "_dir",
    "dir",
    "configurable",
    "_input",
    "ngControl",
    "valueChanges",
    "pipe",
    "skip$1",
    "handleBlur",
    "stopPropagation",
    "event",
    "handleSearch",
    "clearSearch",
    "value",
    "markForCheck",
    "emit",
    "undefined",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "inputs",
    "placeholder",
    "type",
    "Input",
    "args",
    "clearIcon",
    "onSearchDebounce",
    "Output",
    "onBlur",
    "TdSearchBoxBase",
    "_TdSearchBoxMixinBase",
    "mixinControlValueAccessor",
    "_searchVisible",
    "backIcon",
    "toggleVisibility",
    "TdSearchBoxComponent",
    "handleClear",
    "decorators",
    "Component",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "template",
    "styles",
    "width",
    "margin",
    "transition",
    "animate",
    "ctorParameters",
    "ChangeDetectorRef",
    "propDecorators",
    "_searchInput",
    "ViewChild",
    "CovalentSearchModule"
  ],
  "mappings": "s2CAiBAA,EAAA,WAgJA,8CAhJA,kEAgGA,IAAAC,EAAAC,EAA2CC,KAA3CC,KAAAC,IAAAD,qBAaAH,EAAAK,eAAA,EAMAL,EAAAM,SAAA,+DA8BAN,EAAAO,SAAA,IAAAC,EAAAA,aATIR,EAAJS,QAAA,IAAAD,EAAAA,yDAWEE,OAAFC,eAAAC,EAAAC,UAAA,SAKAC,IAAA,WACA,QAAAX,KAAAY,MACA,QAAAZ,KAAAY,KAAAC,mBAKAC,cAAA,oCAIA,IAAAjB,EAAAG,KACIA,KAAKe,OAAOC,UAAhBC,aAAAC,KAAAC,EAAAA,KAAA,qIAUAV,EAAAC,UAAAU,WAAA,wCAOAX,EAAAC,UAAAW,gBAAA,SAAAC,GACIA,EAAJD,mBAGUZ,EAAVC,UAAAa,aAAA,SAAAD,GACItB,KAAKqB,gBAAgBC,mCArLzBb,EAAAC,UAAiBc,YAAjB,WACAxB,KAAAyB,MAAA,GACAzB,KAAAC,mBAAAyB,eACA1B,KAAAM,QAAAqB,KAAYC,09DAqBZC,gBAAAC,EAAAA,wBAAAC,OACEC,QAAS,8oBA8BXC,cAAAC,KAAAC,EAAAA,MAAAC,MAAA,iBACAC,YAAAH,KAAAC,EAAAA,MAAmBC,MAAnB,eACAE,mBAAAJ,KAAmBK,EAAAA,OAAnBH,MAAA,oBACAhC,WAAA8B,KAAAK,EAAAA,OAAAH,MAAA,YACA9B,UAAA4B,KAAAK,EAAAA,OAAAH,MAAA,WACAI,SAAAN,KAAAK,EAAAA,OAAAH,MAAA,WAMA,IAAAK,EAAiB,WAOjB,OAHA,SAAAxC,GACAD,KAAAC,mBAAAA,GALA,GAUAyC,EAAAC,EAAAA,0BAAAF,0DCiBA,ODdA5C,EAAA+C,gBAAA,EAqCA/C,EAAAgD,SAAG,+IC9BHhD,EAAAO,SAAA,IAAAC,EAAAA,0CAOAR,4HAYAiB,cAAA,6GAkBAd,KAAA8C,oBAMAC,EAAArC,UAAAoC,iBAAA,oOAmBAC,EAAArC,UAAAsC,YAAA,WACAhD,KAAAM,QAAAqB,KAAAC,kBAEAmB,EAAAE,aACAf,KAAQgB,EAAAA,UAARd,OACAe,YACAC,QAAAC,EAAAA,qGAEAC,SAAA,m0BACAC,QAAA,m4BACA1B,gBAAAC,EAAAA,wBAAAC,iFAEAyB,MAAA,KACAC,OAAA,kEAIAC,EAAAA,WAA+B,SAA/BC,EAAAA,QAAA,kBACAD,EAAAA,WAAA,SAAAC,EAAAA,QAAA,0BA3KAZ,EAAAa,eAAA,WAAA,QACA1B,KAAA2B,EAAAA,qBAEAd,EAAAe,gBACAC,eAAA7B,KAAA8B,EAAAA,UAAA5B,MAAA3B,yeAgBA,IAAAwD,EAAA,kBACA,aADA"
}
