{
  "version": 3,
  "file": "covalent-core-loading.umd.js",
  "sources": [
    "ng://@covalent/core/loading/loading/loading.module.ts",
    "ng://@covalent/core/loading/loading/directives/loading.directive.ts",
    "ng://@covalent/core/loading/loading/services/loading.service.ts",
    "ng://@covalent/core/loading/loading/services/loading.factory.ts",
    "ng://@covalent/core/loading/loading/loading.component.ts"
  ],
  "sourcesContent": [
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { TdLoadingService, LOADING_PROVIDER } from './services/loading.service';\nimport { TdLoadingFactory, LOADING_FACTORY_PROVIDER } from './services/loading.factory';\nimport { TdLoadingDirective } from './directives/loading.directive';\nimport { TdLoadingComponent } from './loading.component';\n\nconst TD_LOADING: Type<any>[] = [\n  TdLoadingComponent,\n  TdLoadingDirective,\n];\n\nconst TD_LOADING_ENTRY_COMPONENTS: Type<any>[] = [\n  TdLoadingComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  declarations: [\n    TD_LOADING,\n  ],\n  exports: [\n    TD_LOADING,\n  ],\n  providers: [\n    LOADING_FACTORY_PROVIDER,\n    LOADING_PROVIDER,\n  ],\n  entryComponents: [\n    TD_LOADING_ENTRY_COMPONENTS,\n  ],\n})\nexport class CovalentLoadingModule {\n\n}\n",
    "import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\n\nimport { LoadingType, LoadingMode, LoadingStrategy, TdLoadingComponent } from '../loading.component';\nimport { TdLoadingService } from '../services/loading.service';\nimport { ILoadingRef } from '../services/loading.factory';\n\n/**\n * Context class for variable reference\n */\nexport class TdLoadingContext {\n  public $implicit: any = undefined;\n  public tdLoading: any = undefined;\n}\n\n// Constant for generation of the id for the next component\nlet TD_LOADING_NEXT_ID: number = 0;\n\n@Directive({\n  selector: '[tdLoading]',\n})\nexport class TdLoadingDirective implements OnInit, OnDestroy {\n\n  private _context: TdLoadingContext = new TdLoadingContext();\n  private _type: LoadingType;\n  private _mode: LoadingMode;\n  private _strategy: LoadingStrategy;\n  private _name: string;\n  private _loadingRef: ILoadingRef;\n\n  /**\n   * tdLoading: string\n   * Name reference of the loading mask, used to register/resolve requests to the mask.\n   */\n  @Input('tdLoading')\n  set name(name: string) {\n    if (!this._name) {\n      if (name) {\n        this._name = name;\n      }\n    }\n  }\n\n  /**\n   * tdLoadingUntil?: any\n   * If its null, undefined or false it will be used to register requests to the mask.\n   * Else if its any value that can be resolved as true, it will resolve the mask.\n   * [name] is optional when using [until], but can still be used to register/resolve it manually.\n   */\n  @Input('tdLoadingUntil')\n  set until(until: any) {\n    if (!this._name) {\n      this._name = 'td-loading-until-' + TD_LOADING_NEXT_ID++;\n    }\n    this._context.$implicit = this._context.tdLoading = until;\n    if (!until) {\n      this._loadingService.register(this._name);\n    } else {\n      this._loadingService.resolveAll(this._name);\n    }\n  }\n\n  /**\n   * tdLoadingType?: LoadingType or ['linear' | 'circular']\n   * Sets the type of loading mask depending on value.\n   * Defaults to [LoadingType.Circular | 'circular'].\n   */\n  @Input('tdLoadingType')\n  set type(type: LoadingType) {\n    switch (type) {\n      case LoadingType.Linear:\n        this._type = LoadingType.Linear;\n        break;\n      default:\n        this._type = LoadingType.Circular;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingMode?: LoadingMode or ['determinate' | 'indeterminate']\n   * Sets the mode of loading mask depending on value.\n   * Defaults to [LoadingMode.Indeterminate | 'indeterminate'].\n   */\n  @Input('tdLoadingMode')\n  set mode(mode: LoadingMode) {\n    switch (mode) {\n      case LoadingMode.Determinate:\n        this._mode = LoadingMode.Determinate;\n        break;\n      default:\n        this._mode = LoadingMode.Indeterminate;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingStrategy?: LoadingStrategy or ['replace' | 'overlay']\n   * Sets the strategy of loading mask depending on value.\n   * Defaults to [LoadingMode.Replace | 'replace'].\n   */\n  @Input('tdLoadingStrategy')\n  set strategy(stategy: LoadingStrategy) {\n    switch (stategy) {\n      case LoadingStrategy.Overlay:\n        this._strategy = LoadingStrategy.Overlay;\n        break;\n      default:\n        this._strategy = LoadingStrategy.Replace;\n        break;\n    }\n  }\n\n  /**\n   * tdLoadingColor?: \"primary\" | \"accent\" | \"warn\"\n   * Sets the theme color of the loading component. Defaults to \"primary\"\n   */\n  @Input('tdLoadingColor') color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(private _viewContainerRef: ViewContainerRef,\n              private _templateRef: TemplateRef<TdLoadingContext>,\n              private _loadingService: TdLoadingService) {}\n\n  /**\n   * Registers component in the DOM, so it will be available when calling resolve/register.\n   */\n  ngOnInit(): void {\n    this._registerComponent();\n  }\n\n  /**\n   * Remove component when directive is destroyed.\n   */\n  ngOnDestroy(): void {\n    this._loadingService.removeComponent(this._name);\n    this._loadingRef = undefined;\n  }\n\n  /**\n   * Creates [TdLoadingComponent] and attaches it to this directive's [ViewContainerRef].\n   * Passes this directive's [TemplateRef] to modify DOM depending on loading `strategy`.\n   */\n  private _registerComponent(): void {\n    if (!this._name) {\n      throw new Error('Name is needed to register loading directive');\n    }\n    // Check if `TdLoadingComponent` has been created before trying to add one again.\n    // There is a weird edge case when using `[routerLinkActive]` that calls the `ngOnInit` twice in a row\n    if (!this._loadingRef) {\n      this._loadingRef = this._loadingService.createComponent({\n        name: this._name,\n        type: this._type,\n        mode: this._mode,\n        color: this.color,\n        strategy: this._strategy,\n      }, this._viewContainerRef, this._templateRef, this._context);\n    }\n  }\n}\n",
    "import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\nimport { ViewContainerRef, TemplateRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdLoadingContext } from '../directives/loading.directive';\nimport { TdLoadingComponent, LoadingMode, LoadingStrategy, LoadingType } from '../loading.component';\nimport { TdLoadingFactory, ILoadingRef } from './loading.factory';\n\nexport interface ITdLoadingConfig {\n  name: string;\n  type?: LoadingType;\n  mode?: LoadingMode;\n  color?: 'primary' | 'accent' | 'warn';\n}\n\nexport class TdLoadingConfig implements ITdLoadingConfig {\n  name: string;\n  type?: LoadingType;\n  mode?: LoadingMode;\n  color?: 'primary' | 'accent' | 'warn';\n\n  constructor(config: ITdLoadingConfig) {\n    this.name = config.name;\n    if (!this.name) {\n      throw Error('Name is required for [TdLoading] configuration.');\n    }\n    this.mode = config.mode ? config.mode : LoadingMode.Indeterminate;\n    this.type = config.type ? config.type : LoadingType.Circular;\n    this.color = config.color ? config.color : 'primary';\n  }\n}\n\nexport interface ITdLoadingDirectiveConfig extends ITdLoadingConfig {\n  strategy?: LoadingStrategy;\n}\n\nexport class TdLoadingDirectiveConfig extends TdLoadingConfig implements ITdLoadingDirectiveConfig {\n  name: string;\n  type: LoadingType;\n  mode: LoadingMode;\n  strategy: LoadingStrategy;\n\n  constructor(config: ITdLoadingDirectiveConfig) {\n    super(config);\n    this.strategy = config.strategy ? config.strategy : LoadingStrategy.Replace;\n  }\n}\n\n@Injectable()\nexport class TdLoadingService {\n\n  private _context: {[key: string]: ILoadingRef} = {};\n  private _timeouts: {[key: string]: any} = {};\n\n  constructor(private _loadingFactory: TdLoadingFactory) {\n    this.create({\n      name: 'td-loading-main',\n    });\n  }\n\n  /**\n   * params:\n   * - config: ILoadingDirectiveConfig\n   * - viewContainerRef: ViewContainerRef\n   * - templateRef: TemplateRef<Object>\n   *\n   * Creates an replace loading mask and attaches it to the viewContainerRef.\n   * Replaces the templateRef with the mask when a request is registered on it.\n   *\n   * NOTE: @internal usage only.\n   */\n  createComponent(config: ITdLoadingDirectiveConfig, viewContainerRef: ViewContainerRef,\n                  templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\n    let directiveConfig: TdLoadingDirectiveConfig = new TdLoadingDirectiveConfig(config);\n    if (this._context[directiveConfig.name]) {\n      throw Error(`Name duplication: [TdLoading] directive has a name conflict with ${directiveConfig.name}.`);\n    }\n    if (directiveConfig.strategy === LoadingStrategy.Overlay) {\n      this._context[directiveConfig.name] = this._loadingFactory.createOverlayComponent(directiveConfig, viewContainerRef, templateRef);\n    } else {\n      this._context[directiveConfig.name] = this._loadingFactory.createReplaceComponent(directiveConfig, viewContainerRef, templateRef, context);\n    }\n    return this._context[directiveConfig.name];\n  }\n\n  /**\n   * params:\n   * - config: ITdLoadingConfig\n   *\n   * Creates a fullscreen loading mask and attaches it to the DOM with the given configuration.\n   * Only displayed when the mask has a request registered on it.\n   */\n  public create(config: ITdLoadingConfig): void {\n    let fullscreenConfig: TdLoadingConfig = new TdLoadingConfig(config);\n    this.removeComponent(fullscreenConfig.name);\n    this._context[fullscreenConfig.name] = this._loadingFactory.createFullScreenComponent(fullscreenConfig);\n  }\n\n  /**\n   * params:\n   * - name: string\n   *\n   * Removes `loading` component from service context.\n   */\n  public removeComponent(name: string): void {\n    if (this._context[name]) {\n      this._context[name].subject.unsubscribe();\n      if (this._context[name].componentRef) {\n        this._context[name].componentRef.destroy();\n      }\n      this._context[name] = undefined;\n      delete this._context[name];\n    }\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - registers?: number\n   * returns: true if successful\n   *\n   * Resolves a request for the loading mask referenced by the name parameter.\n   * Can optionally pass registers argument to set a number of register calls.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.register()\n   */\n  public register(name: string = 'td-loading-main', registers: number = 1): boolean {\n    // try registering into the service if the loading component has been instanciated or if it exists.\n    if (this._context[name]) {\n      registers = registers < 1 ? 1 : registers;\n      this._context[name].times += registers;\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    } else {\n      // if it doesnt exist, set a timeout so its registered after change detection happens\n      // this in case \"register\" occured on the `ngOnInit` lifehook cycle.\n      if (!this._timeouts[name]) {\n        this._timeouts[name] = setTimeout(() => {\n          this.register(name, registers);\n        });\n      } else {\n        // if it timeout occured and still doesnt exist, it means the tiemout wasnt needed so we clear it.\n        this._clearTimeout(name);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - resolves?: number\n   * returns: true if successful\n   *\n   * Resolves a request for the loading mask referenced by the name parameter.\n   * Can optionally pass resolves argument to set a number of resolve calls.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.resolve()\n   */\n  public resolve(name: string = 'td-loading-main', resolves: number = 1): boolean {\n    // clear timeout if the loading component is \"resolved\" before its \"registered\"\n    this._clearTimeout(name);\n    if (this._context[name]) {\n      resolves = resolves < 1 ? 1 : resolves;\n      if (this._context[name].times > 0) {\n        let times: number = this._context[name].times;\n        times -= resolves;\n        this._context[name].times = times < 0 ? 0 : times;\n      }\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * returns: true if successful\n   *\n   * Resolves all request for the loading mask referenced by the name parameter.\n   *\n   * If no paramemeters are used, then default main mask will be used.\n   *\n   * e.g. loadingService.resolveAll()\n   */\n  public resolveAll(name: string = 'td-loading-main'): boolean {\n    // clear timeout if the loading component is \"resolved\" before its \"registered\"\n    this._clearTimeout(name);\n    if (this._context[name]) {\n      this._context[name].times = 0;\n      this._context[name].subject.next(this._context[name].times);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * params:\n   * - name: string\n   * - value: number\n   * returns: true if successful\n   *\n   * Set value on a loading mask referenced by the name parameter.\n   * Usage only available if its mode is 'determinate' and if loading is showing.\n   */\n  public setValue(name: string, value: number): boolean {\n    if (this._context[name]) {\n      let instance: TdLoadingComponent = this._context[name].componentRef.instance;\n      if (instance.mode === LoadingMode.Determinate && instance.animation) {\n        instance.value = value;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears timeout linked to the name.\n   * @param name Name of the loading component to be cleared\n   */\n  private _clearTimeout(name: string): void {\n    clearTimeout(this._timeouts[name]);\n    delete this._timeouts[name];\n  }\n}\n\nexport function LOADING_PROVIDER_FACTORY(\n    parent: TdLoadingService, loadingFactory: TdLoadingFactory): TdLoadingService {\n  return parent || new TdLoadingService(loadingFactory);\n}\n\nexport const LOADING_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdLoadingService,\n  deps: [[new Optional(), new SkipSelf(), TdLoadingService], TdLoadingFactory],\n  useFactory: LOADING_PROVIDER_FACTORY,\n};\n",
    "import { Injectable, ComponentFactoryResolver, ChangeDetectorRef, Provider, SkipSelf, Optional } from '@angular/core';\nimport { Injector, ComponentRef, ViewContainerRef, TemplateRef } from '@angular/core';\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdLoadingContext } from '../directives/loading.directive';\nimport { TdLoadingComponent, LoadingType, LoadingMode, LoadingStrategy, LoadingStyle } from '../loading.component';\nimport { ITdLoadingConfig } from './loading.service';\n\nexport interface IInternalLoadingOptions extends ITdLoadingConfig {\n  height?: number;\n  style?: LoadingStyle;\n}\n\nexport interface ILoadingRef {\n  observable: Observable<any>;\n  componentRef: ComponentRef<any>;\n  subject?: Subject<any>;\n  times?: number;\n}\n\n/**\n * NOTE: @internal usage only.\n */\n@Injectable()\nexport class TdLoadingFactory {\n\n  constructor(private _componentFactoryResolver: ComponentFactoryResolver,\n              private _overlay: Overlay,\n              private _injector: Injector) {\n  }\n\n  /**\n   * Uses material `Overlay` services to create a DOM element and attach the loading component\n   * into it. Leveraging the state and configuration from it.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createFullScreenComponent(options: ITdLoadingConfig): ILoadingRef {\n    (<IInternalLoadingOptions>options).height = undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.FullScreen;\n    let loadingRef: ILoadingRef = this._initializeContext();\n    let loading: boolean = false;\n    let overlayRef: OverlayRef;\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        overlayRef = this._createOverlay();\n        loadingRef.componentRef = overlayRef.attach(new ComponentPortal(TdLoadingComponent));\n        this._mapOptions(options, loadingRef.componentRef.instance);\n        loadingRef.componentRef.instance.startInAnimation();\n        loadingRef.componentRef.changeDetectorRef.detectChanges();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\n          subs.unsubscribe();\n          loadingRef.componentRef.destroy();\n          overlayRef.detach();\n          overlayRef.dispose();\n        });\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\n   * Leverages TemplatePortals from material to inject the template inside of it so it fits\n   * perfectly when overlaying it.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createOverlayComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\n                                templateRef: TemplateRef<Object>): ILoadingRef {\n    (<IInternalLoadingOptions>options).height = undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.Overlay;\n    let loadingRef: ILoadingRef = this._createComponent(options);\n    let loading: boolean = false;\n    loadingRef.componentRef.instance.content = new TemplatePortal(templateRef, viewContainerRef);\n    viewContainerRef.clear();\n    viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        loadingRef.componentRef.instance.startInAnimation();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        loadingRef.componentRef.instance.startOutAnimation();\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\n   * Replaces the template with the loading component depending if it was registered or resolved.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createReplaceComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\n                                templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\n    let nativeElement: HTMLElement = <HTMLElement>templateRef.elementRef.nativeElement;\n    (<IInternalLoadingOptions>options).height = nativeElement.nextElementSibling ?\n      nativeElement.nextElementSibling.scrollHeight : undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.None;\n    let loadingRef: ILoadingRef = this._createComponent(options);\n    let loading: boolean = false;\n    viewContainerRef.createEmbeddedView(templateRef, context);\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        let index: number = viewContainerRef.indexOf(loadingRef.componentRef.hostView);\n        if (index < 0) {\n          viewContainerRef.clear();\n          viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\n        }\n        loadingRef.componentRef.instance.startInAnimation();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\n          subs.unsubscribe();\n          // passing context so when the template is re-attached, we can keep the reference of the variables\n          let cdr: ChangeDetectorRef = viewContainerRef.createEmbeddedView(templateRef, context);\n          viewContainerRef.detach(viewContainerRef.indexOf(loadingRef.componentRef.hostView));\n          /**\n           * Need to call \"markForCheck\" and \"detectChanges\" on attached template, so its detected by parent component when attached\n           * with \"OnPush\" change detection\n           */\n          cdr.detectChanges();\n          cdr.markForCheck();\n        });\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a fullscreen overlay for the loading usage.\n   */\n  private _createOverlay(): OverlayRef {\n    let state: OverlayConfig = new OverlayConfig();\n    state.hasBackdrop = false;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().centerVertically();\n    return this._overlay.create(state);\n  }\n\n  /**\n   * Creates a generic component dynamically waiting to be attached to a viewContainerRef.\n   */\n  private _createComponent(options: IInternalLoadingOptions): ILoadingRef {\n    let compRef: ILoadingRef = this._initializeContext();\n    compRef.componentRef = this._componentFactoryResolver\n    .resolveComponentFactory(TdLoadingComponent).create(this._injector);\n    this._mapOptions(options, compRef.componentRef.instance);\n    return compRef;\n  }\n\n  /**\n   * Initialize context for loading component.\n   */\n  private _initializeContext(): ILoadingRef {\n    let subject: Subject<any> = new Subject<any>();\n    return {\n      observable: subject.asObservable(),\n      subject: subject,\n      componentRef: undefined,\n      times: 0,\n    };\n  }\n\n  /**\n   * Maps configuration to the loading component instance.\n   */\n  private _mapOptions(options: IInternalLoadingOptions, instance: TdLoadingComponent): void {\n    instance.style = options.style;\n    if (options.type !== undefined) {\n      instance.type = options.type;\n    }\n    if (options.height !== undefined) {\n      instance.height = options.height;\n    }\n    if (options.mode !== undefined) {\n      instance.mode = options.mode;\n    }\n    if (options.color !== undefined) {\n      instance.color = options.color;\n    }\n  }\n}\n\nexport function LOADING_FACTORY_PROVIDER_FACTORY(\n    parent: TdLoadingFactory, componentFactoryResolver: ComponentFactoryResolver, overlay: Overlay, injector: Injector): TdLoadingFactory {\n  return parent || new TdLoadingFactory(componentFactoryResolver, overlay, injector);\n}\n\nexport const LOADING_FACTORY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdLoadingFactory,\n  deps: [[new Optional(), new SkipSelf(), TdLoadingFactory], ComponentFactoryResolver, Overlay, Injector],\n  useFactory: LOADING_FACTORY_PROVIDER_FACTORY,\n};\n",
    "import { Component, ViewChild, TemplateRef, ChangeDetectorRef, ChangeDetectionStrategy, ElementRef, DoCheck } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nexport enum LoadingType {\n  Circular = 'circular',\n  Linear = 'linear',\n}\n\nexport enum LoadingMode {\n  Determinate = 'determinate',\n  Indeterminate = 'indeterminate',\n}\n\nexport enum LoadingStrategy {\n  Overlay = 'overlay',\n  Replace = 'replace',\n}\n\nexport enum LoadingStyle {\n  FullScreen = 'fullscreen',\n  Overlay = 'overlay',\n  None = 'none',\n}\n\nimport { TdFadeInOutAnimation } from '@covalent/core/common';\n\nexport const TD_CIRCLE_DIAMETER: number = 100;\n\n@Component({\n  selector: 'td-loading',\n  styles: [`.td-loading-wrapper {\n  position: relative;\n  display: block; }\n  .td-loading-wrapper.td-fullscreen {\n    position: inherit; }\n  .td-loading-wrapper .td-loading {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    max-width: 100%;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1; }\n  .td-loading-wrapper.td-overlay .td-loading {\n    position: absolute;\n    margin: 0;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 1000; }\n    .td-loading-wrapper.td-overlay .td-loading mat-progress-bar {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0; }\n  .td-loading-wrapper.td-overlay-circular .td-loading {\n    bottom: 0; }\n`],\n  template: `<div class=\"td-loading-wrapper\"\n    [style.min-height]=\"getHeight()\"\n    [class.td-overlay-circular]=\"(isOverlay() || isFullScreen()) && !isLinear()\"\n    [class.td-overlay]=\"isOverlay() || isFullScreen()\" \n    [class.td-fullscreen]=\"isFullScreen()\">\n  <div [@tdFadeInOut]=\"animation\"\n     (@tdFadeInOut.done)=\"animationComplete($event)\"\n     [style.min-height]=\"getHeight()\"\n     class=\"td-loading\">\n    <mat-progress-spinner *ngIf=\"isCircular()\" \n                        [mode]=\"mode\"\n                        [value]=\"value\" \n                        [color]=\"color\" \n                        [diameter]=\"getCircleDiameter()\"\n                        [strokeWidth]=\"getCircleStrokeWidth()\">\n    </mat-progress-spinner>\n    <mat-progress-bar *ngIf=\"isLinear()\" \n                     [mode]=\"mode\"\n                     [value]=\"value\"\n                     [color]=\"color\">\n    </mat-progress-bar>\n  </div>\n  <ng-template [cdkPortalHost]=\"content\"></ng-template>\n</div>`,\n  animations: [\n    TdFadeInOutAnimation(),\n  ],\n})\nexport class TdLoadingComponent implements DoCheck {\n\n  private _animationIn: Subject<any> = new Subject<any>();\n  private _animationOut: Subject<any> = new Subject<any>();\n  private _mode: LoadingMode = LoadingMode.Indeterminate;\n  private _defaultMode: LoadingMode = LoadingMode.Indeterminate;\n  private _value: number = 0;\n  private _circleDiameter: number = TD_CIRCLE_DIAMETER;\n\n  /**\n   * Flag for animation\n   */\n  animation: boolean = false;\n\n  /**\n   * Content injected into loading component.\n   */\n  content: TemplatePortal<any>;\n\n  /**\n   * Sets mode of [TdLoadingComponent] to LoadingMode.Determinate or LoadingMode.Indeterminate\n   */\n  set mode(mode: LoadingMode) {\n    this._defaultMode = mode;\n  }\n  get mode(): LoadingMode {\n    return this._mode;\n  }\n\n  /**\n   * Sets value of [TdLoadingComponent] if mode is 'LoadingMode.Determinate'\n   */\n  set value(value: number) {\n    this._value = value;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n  }\n  get value(): number {\n    return this._value;\n  }\n\n  style: LoadingStyle = LoadingStyle.None;\n\n  /**\n   * height: number\n   * Sets height of [TdLoadingComponent].\n   */\n  height: number;\n\n  /**\n   * type: LoadingType\n   * Sets type of [TdLoadingComponent] rendered.\n   */\n  type: LoadingType = LoadingType.Circular;\n\n  /**\n   * color: primary' | 'accent' | 'warn'\n   * Sets theme color of [TdLoadingComponent] rendered.\n   */\n  color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngDoCheck(): void {\n    // When overlay is used and the host width has a value greater than 1px\n    // set the circle diameter when possible incase the loading component was rendered in a hidden state\n    if (this.isOverlay() && this._hostHeight() > 1) {\n      if (this.animation) {\n        this._setCircleDiameter();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  getHeight(): string {\n    // Ignore height if style is `overlay` or `fullscreen`.\n    // Add height if child elements have a height and style is `none`, else return default height.\n    if (this.isOverlay() || this.isFullScreen()) {\n      return undefined;\n    } else {\n      return this.height ? `${this.height}px` : '150px';\n    }\n  }\n\n  getCircleDiameter(): number {\n    return this._circleDiameter;\n  }\n\n  getCircleStrokeWidth(): number {\n    // we calculate the stroke width by setting it as 10% of its diameter\n    let strokeWidth: number = this.getCircleDiameter() / 10;\n    return Math.abs(strokeWidth);\n  }\n\n  isCircular(): boolean {\n    return this.type === LoadingType.Circular;\n  }\n\n  isLinear(): boolean {\n    return this.type === LoadingType.Linear;\n  }\n\n  isFullScreen(): boolean {\n    return this.style === LoadingStyle.FullScreen;\n  }\n\n  isOverlay(): boolean {\n    return this.style === LoadingStyle.Overlay;\n  }\n\n  animationComplete(event: AnimationEvent): void {\n    // Check to see if its \"in\" or \"out\" animation to execute the proper callback\n    if (!event.fromState) {\n      this.inAnimationCompleted();\n    } else {\n      this.outAnimationCompleted();\n    }\n  }\n\n  inAnimationCompleted(): void {\n    this._animationIn.next(undefined);\n  }\n\n  outAnimationCompleted(): void {\n   /* little hack to reset the loader value and animation before removing it from DOM\n    * else, the loader will appear with prev value when its registered again\n    * and will do an animation going prev value to 0.\n    */\n    this.value = 0;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n    this._animationOut.next(undefined);\n  }\n\n  /**\n   * Starts in animation and returns an observable for completition event.\n   */\n  startInAnimation(): Observable<any> {\n    /* need to switch back to the selected mode, so we have saved it in another variable\n    *  and then recover it. (issue with protractor)\n    */\n    this._mode = this._defaultMode;\n    // Set values before the animations starts\n    this._setCircleDiameter();\n    // Check for changes for `OnPush` change detection\n    this.animation = true;\n    this._changeDetectorRef.markForCheck();\n    return this._animationIn.asObservable();\n  }\n\n  /**\n   * Starts out animation and returns an observable for completition event.\n   */\n  startOutAnimation(): Observable<any> {\n    this.animation = false;\n    /* need to switch back and forth from determinate/indeterminate so the setInterval()\n    * inside mat-progress-spinner stops and protractor doesnt timeout waiting to sync.\n    */\n    this._mode = LoadingMode.Determinate;\n    // Check for changes for `OnPush` change detection\n    this._changeDetectorRef.markForCheck();\n    return this._animationOut.asObservable();\n  }\n\n  /**\n   * Calculate the proper diameter for the circle and set it\n   */\n  private _setCircleDiameter(): void {\n    // we set a default diameter of 100 since this is the default in material\n    let diameter: number = TD_CIRCLE_DIAMETER;\n    // if height is provided, then we take that as diameter\n    if (this.height) {\n      diameter = this.height;\n      // else if its not provided, then we take the host height\n    } else if (this.height === undefined) {\n      diameter = this._hostHeight();\n    }\n    // if the diameter is over TD_CIRCLE_DIAMETER, we set TD_CIRCLE_DIAMETER\n    if (!!diameter && diameter <= TD_CIRCLE_DIAMETER) {\n      this._circleDiameter = Math.floor(diameter);\n    } else {\n      this._circleDiameter = TD_CIRCLE_DIAMETER;\n    }\n  }\n\n  /**\n   * Returns the host height of the loading component\n   */\n  private _hostHeight(): number {\n    if (<HTMLElement>this._elementRef.nativeElement) {\n      return (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return 0;\n  }\n}\n"
  ],
  "names": [
    "PortalModule",
    "Input",
    "TemplateRef",
    "ViewContainerRef",
    "Directive",
    "Injectable",
    "Optional",
    "SkipSelf",
    "ComponentFactoryResolver",
    "Overlay",
    "Injector",
    "Subject$1",
    "ComponentPortal"
  ],
  "mappings": "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"
}
