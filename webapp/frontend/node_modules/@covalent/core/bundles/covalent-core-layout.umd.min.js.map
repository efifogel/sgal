{
  "version": 3,
  "file": "covalent-core-layout.umd.min.js",
  "sources": [
    "ng://@covalent/core/layout/layout/layout.component.ts",
    "ng://@covalent/core/layout/layout/layout-toggle.class.ts",
    "ng://@covalent/core/layout/layout/layout.directives.ts",
    "ng://@covalent/core/layout/layout/layout-nav/layout-nav.component.ts",
    "ng://@covalent/core/layout/layout/layout-nav-list/layout-nav-list.component.ts",
    "ng://@covalent/core/layout/layout/layout-nav-list/layout-nav-list.directives.ts",
    "ng://@covalent/core/layout/layout/layout-card-over/layout-card-over.component.ts",
    "ng://@covalent/core/layout/layout/layout-manage-list/layout-manage-list.component.ts",
    "ng://@covalent/core/layout/layout/layout-manage-list/layout-manage-list.directives.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from './layout-toggle.class';\n\n@Component({\n  selector: 'td-layout',\n  styles: [`:host {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n  overflow: hidden; }\n  :host ::ng-deep > mat-sidenav-container > mat-sidenav {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column; }\n`],\n  template: `<mat-sidenav-container fullscreen>\n  <mat-sidenav #sidenav\n              class=\"td-layout-sidenav\"\n              [mode]=\"mode\"\n              [opened]=\"opened\"\n              [style.max-width]=\"sidenavWidth\"\n              [style.min-width]=\"sidenavWidth\"\n              [disableClose]=\"disableClose\">\n    <ng-content select=\"td-navigation-drawer\"></ng-content>\n    <ng-content select=\"[td-sidenav-content]\"></ng-content>\n  </mat-sidenav>\n  <ng-content></ng-content>\n</mat-sidenav-container>\n`,\n})\nexport class TdLayoutComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"over\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'over';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"false\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = false;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"320px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '320px';\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Input, HostBinding, HostListener, Renderer2, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ICanDisable, mixinDisabled } from '@covalent/core/common';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nexport interface ILayoutTogglable {\n  opened: boolean;\n  sidenav: MatSidenav;\n  toggle(): Promise<void>;\n  open(): Promise<void>;\n  close(): Promise<void>;\n}\n\nexport class LayoutToggleBase { }\n\n/* tslint:disable-next-line */\nexport const _TdLayoutToggleMixinBase = mixinDisabled(LayoutToggleBase);\n\nexport abstract class LayoutToggle extends _TdLayoutToggleMixinBase implements AfterViewInit, OnDestroy, ICanDisable {\n\n  private _toggleSubs: Subscription;\n\n  private _initialized: boolean = false;\n  private _hideWhenOpened: boolean = false;\n\n  /**\n   * hideWhenOpened?: boolean\n   * When this is set to true, the host will be hidden when\n   * the sidenav is opened.\n   */\n  @Input('hideWhenOpened')\n  set hideWhenOpened(hideWhenOpened: boolean) {\n    this._hideWhenOpened = hideWhenOpened;\n    if (this._initialized) {\n      this._toggleVisibility();\n    }\n  }\n\n  constructor(protected _layout: ILayoutTogglable,\n              private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    super();\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-menu-button');\n  }\n\n  ngAfterViewInit(): void {\n    this._initialized = true;\n    this._toggleSubs = this._layout.sidenav._animationStarted.subscribe(() => {\n      this._toggleVisibility();\n    });\n    // execute toggleVisibility since the onOpenStart and onCloseStart\n    // methods might not be executed always when the element is rendered\n    this._toggleVisibility();\n  }\n\n  ngOnDestroy(): void {\n    if (this._toggleSubs) {\n      this._toggleSubs.unsubscribe();\n      this._toggleSubs = undefined;\n    }\n  }\n\n  /**\n   * Listens to host click event to trigger the layout toggle\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    event.preventDefault();\n    if (!this.disabled) {\n      this.onClick();\n    }\n  }\n\n  abstract onClick(): void;\n\n  private _toggleVisibility(): void {\n    if (this._layout.sidenav.opened && this._hideWhenOpened) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', '');\n    }\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutComponent } from './layout.component';\nimport { LayoutToggle } from './layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutToggle]',\n})\nexport class TdLayoutToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutToggle') \n  set tdLayoutToggle(tdLayoutToggle: boolean) {\n    this.disabled = !(<any>tdLayoutToggle === '' || tdLayoutToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutClose]',\n})\nexport class TdLayoutCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutClose') \n  set tdLayoutClose(tdLayoutClose: boolean) {\n    this.disabled = !(<any>tdLayoutClose === '' || tdLayoutClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutOpen]',\n})\nexport class TdLayoutOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutOpen') \n  set tdLayoutClose(tdLayoutOpen: boolean) {\n    this.disabled = !(<any>tdLayoutOpen === '' || tdLayoutOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n",
    "import { Component, Input, forwardRef, Optional, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TdLayoutComponent } from '../layout.component';\n\n@Component({\n  selector: 'td-layout-nav',\n  styles: [`.td-menu-button {\n  margin-left: 0; }\n  ::ng-deep [dir='rtl'] .td-menu-button {\n    margin-right: 0;\n    margin-left: 6px; }\n\n:host {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n  overflow: hidden; }\n  :host .td-layout-nav-wrapper {\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    margin: 0;\n    width: 100%;\n    min-height: 100%;\n    height: 100%; }\n    :host .td-layout-nav-wrapper .td-layout-nav-toolbar-content {\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -ms-flex-line-pack: center;\n          align-content: center;\n      max-width: 100%;\n      -webkit-box-pack: start;\n          -ms-flex-pack: start;\n              justify-content: start; }\n    :host .td-layout-nav-wrapper .td-layout-nav-content {\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: column;\n              flex-direction: column;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      position: relative;\n      overflow: auto;\n      -webkit-overflow-scrolling: touch; }\n`],\n  template: `<div class=\"td-layout-nav-wrapper\">\n  <mat-toolbar [color]=\"color\">\n    <ng-content select=\"[td-menu-button]\"></ng-content>\n    <span *ngIf=\"icon || logo || toolbarTitle\"\n          [class.cursor-pointer]=\"routerEnabled\"\n          (click)=\"handleNavigationClick()\"\n          class=\"td-layout-nav-toolbar-content\">\n      <mat-icon *ngIf=\"icon\">{{icon}}</mat-icon>\n      <mat-icon *ngIf=\"logo && !icon\" class=\"mat-icon-logo\" [svgIcon]=\"logo\"></mat-icon>\n      <span *ngIf=\"toolbarTitle\">{{toolbarTitle}}</span>\n    </span>\n    <ng-content select=\"[td-toolbar-content]\"></ng-content>\n  </mat-toolbar>\n  <div class=\"td-layout-nav-content\" cdkScrollable>\n    <ng-content></ng-content>\n  </div>\n  <ng-content select=\"td-layout-footer\"></ng-content>\n</div>\n`,\n})\nexport class TdLayoutNavComponent {\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n}\n",
    "import { Component, Input, ViewChild, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-nav-list',\n  styles: [`:host {\n  margin: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n  overflow: hidden;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1; }\n  :host .td-layout-nav-list-wrapper {\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    position: relative;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-toolbar-content {\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center;\n      -ms-flex-line-pack: center;\n          align-content: center;\n      max-width: 100%;\n      -webkit-box-pack: start;\n          -ms-flex-pack: start;\n              justify-content: start; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-content {\n      text-align: start;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      display: block;\n      position: relative;\n      overflow: auto;\n      -webkit-overflow-scrolling: touch; }\n    :host .td-layout-nav-list-wrapper .td-layout-nav-list-main {\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: column;\n              flex-direction: column;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      margin: 0;\n      width: 100%;\n      min-height: 100%;\n      height: 100%;\n      position: relative;\n      overflow: auto; }\n      :host .td-layout-nav-list-wrapper .td-layout-nav-list-main .td-layout-nav-list-content {\n        display: block;\n        position: relative;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1; }\n    :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list {\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1; }\n      :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-opened, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-opening, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-closed, :host .td-layout-nav-list-wrapper mat-sidenav-container.td-layout-nav-list > mat-sidenav.mat-drawer-closing {\n        -webkit-box-shadow: none;\n                box-shadow: none; }\n\n:host ::ng-deep mat-sidenav-container.td-layout-nav-list {\n  /* Ensure the left sidenav is a flex column & 100% height */ }\n  :host ::ng-deep mat-sidenav-container.td-layout-nav-list > .mat-drawer-content {\n    -webkit-box-flex: 1;\n        -ms-flex-positive: 1;\n            flex-grow: 1; }\n  :host ::ng-deep mat-sidenav-container.td-layout-nav-list > mat-sidenav {\n    -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column; }\n`],\n  template: `<div class=\"td-layout-nav-list-wrapper\">\n  <mat-sidenav-container fullscreen class=\"td-layout-nav-list\">\n    <mat-sidenav #sidenav\n                position=\"start\"\n                [mode]=\"mode\"\n                [opened]=\"opened\"\n                [disableClose]=\"disableClose\"\n                [style.max-width]=\"sidenavWidth\"\n                [style.min-width]=\"sidenavWidth\">\n      <mat-toolbar [color]=\"color\">\n        <ng-content select=\"[td-menu-button]\"></ng-content>\n        <span *ngIf=\"icon || logo || toolbarTitle\"\n              class=\"td-layout-nav-list-toolbar-content\"\n              [class.cursor-pointer]=\"routerEnabled\"\n              (click)=\"handleNavigationClick()\">\n          <mat-icon *ngIf=\"icon\">{{icon}}</mat-icon>\n          <mat-icon *ngIf=\"logo && !icon\" class=\"mat-icon-logo\" [svgIcon]=\"logo\"></mat-icon>\n          <span *ngIf=\"toolbarTitle\">{{toolbarTitle}}</span>\n        </span>\n        <ng-content select=\"[td-sidenav-toolbar-content]\"></ng-content>\n      </mat-toolbar>\n      <div class=\"td-layout-nav-list-content\" cdkScrollable>\n        <ng-content select=\"[td-sidenav-content]\"></ng-content>\n      </div>\n    </mat-sidenav>\n    <div class=\"td-layout-nav-list-main\">\n      <mat-toolbar [color]=\"color\">\n        <ng-content select=\"[td-toolbar-content]\"></ng-content>\n      </mat-toolbar>\n      <div class=\"td-layout-nav-list-content\" cdkScrollable>\n        <ng-content></ng-content>\n      </div>\n      <ng-content select=\"td-layout-footer-inner\"></ng-content>\n    </div>\n  </mat-sidenav-container>\n</div>\n<ng-content select=\"td-layout-footer\"></ng-content>`,\n})\nexport class TdLayoutNavListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"350px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '350px';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutNavListComponent } from './layout-nav-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutNavListToggle]',\n})\nexport class TdLayoutNavListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListToggle') \n  set tdLayoutNavListToggle(tdLayoutNavListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutNavListToggle === '' || tdLayoutNavListToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListClose]',\n})\nexport class TdLayoutNavListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutNavListClose') \n  set tdLayoutNavListClose(tdLayoutNavListClose: boolean) {\n    this.disabled = !(<any>tdLayoutNavListClose === '' || tdLayoutNavListClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListOpen]',\n})\nexport class TdLayoutNavListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListOpen') \n  set tdLayoutNavListOpen(tdLayoutNavListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutNavListOpen === '' || tdLayoutNavListOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n",
    "import { Component } from '@angular/core';\nimport { Input } from '@angular/core';\n\n@Component({\n  selector: 'td-layout-card-over',\n  styles: [`:host {\n  position: relative;\n  display: block;\n  z-index: 2;\n  width: 100%;\n  min-height: 100%;\n  height: 100%; }\n  :host [td-after-card] {\n    display: block; }\n\n.td-layout-card-over-wrapper {\n  margin: -64px;\n  margin-left: 0;\n  margin-right: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%; }\n  @media (min-width: 600px) {\n    .td-layout-card-over-wrapper {\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n          -ms-flex-direction: row;\n              flex-direction: row;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: start;\n          -ms-flex-align: start;\n              align-items: flex-start;\n      -ms-flex-line-pack: start;\n          align-content: flex-start;\n      -webkit-box-pack: center;\n          -ms-flex-pack: center;\n              justify-content: center; }\n      .td-layout-card-over-wrapper .td-layout-card-over {\n        max-height: 100%;\n        -webkit-box-sizing: border-box;\n                box-sizing: border-box; } }\n  @media (max-width: 599px) {\n    .td-layout-card-over-wrapper .td-layout-card-over {\n      max-width: 100% !important; } }\n`],\n  template: `<mat-toolbar [color]=\"color\">\n</mat-toolbar>\n<div class=\"td-layout-card-over-wrapper\">\n  <div class=\"td-layout-card-over\"\n        [style.max-width.%]=\"cardWidth\"\n        [style.flex]=\"'1 1 ' + cardWidth + '%'\"\n        [style.-ms-flex]=\"'1 1 ' + cardWidth + '%'\"\n        [style.-webkit-box-flex]=\"1\">\n    <mat-card>\n      <mat-card-title *ngIf=\"cardTitle\">{{cardTitle}}</mat-card-title>\n      <mat-card-subtitle *ngIf=\"cardSubtitle\">{{cardSubtitle}}</mat-card-subtitle>\n      <mat-divider *ngIf=\"cardTitle || cardSubtitle\"></mat-divider>\n      <ng-content></ng-content>\n    </mat-card>\n    <ng-content select=\"[td-after-card]\"></ng-content>\n  </div>\n</div>\n`,\n})\nexport class TdLayoutCardOverComponent {\n\n  /**\n   * cardTitle?: string\n   *\n   * Title set in card.\n   */\n  @Input('cardTitle') cardTitle: string;\n\n  /**\n   * cardSubtitle?: string\n   *\n   * Subtitle set in card.\n   */\n  @Input('cardSubtitle') cardSubtitle: string;\n\n  /**\n   * cardWidth?: string\n   *\n   * Card flex width in %.\n   * Defaults to 70%.\n   */\n  @Input('cardWidth') cardWidth: number = 70;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n}\n",
    "import { Component, Directive, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-manage-list',\n  styles: [`:host {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin: 0;\n  width: 100%;\n  min-height: 100%;\n  height: 100%;\n  overflow: hidden; }\n  :host mat-sidenav-container.td-layout-manage-list {\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1; }\n    :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-opened, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-opening, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-closed, :host mat-sidenav-container.td-layout-manage-list > mat-sidenav.mat-drawer-closing {\n      -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2);\n              box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2); }\n  :host .td-layout-manage-list-sidenav {\n    text-align: start;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    display: block;\n    position: relative;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch; }\n  :host .td-layout-manage-list-main {\n    margin: 0;\n    width: 100%;\n    min-height: 100%;\n    height: 100%;\n    position: relative;\n    overflow: auto;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex; }\n    :host .td-layout-manage-list-main .td-layout-manage-list-content {\n      display: block;\n      position: relative;\n      overflow: auto;\n      -webkit-overflow-scrolling: touch;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1; }\n\n:host ::ng-deep mat-sidenav-container.td-layout-manage-list {\n  /* Ensure the left sidenav is a flex column & 100% height */ }\n  :host ::ng-deep mat-sidenav-container.td-layout-manage-list > .mat-drawer-content {\n    -webkit-box-flex: 1;\n        -ms-flex-positive: 1;\n            flex-grow: 1; }\n  :host ::ng-deep mat-sidenav-container.td-layout-manage-list > mat-sidenav {\n    -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column; }\n\n:host ::ng-deep mat-nav-list a[mat-list-item] .mat-list-item-content {\n  font-size: 14px; }\n\n:host ::ng-deep .mat-toolbar {\n  font-weight: 400; }\n`],\n  template: `<mat-sidenav-container fullscreen class=\"td-layout-manage-list\">\n  <mat-sidenav #sidenav\n              position=\"start\"\n              [mode]=\"mode\"\n              [opened]=\"opened\"\n              [disableClose]=\"disableClose\"\n              [style.max-width]=\"sidenavWidth\"\n              [style.min-width]=\"sidenavWidth\">\n    <ng-content select=\"mat-toolbar[td-sidenav-content]\"></ng-content>\n    <div class=\"td-layout-manage-list-sidenav\" cdkScrollable>\n      <ng-content select=\"[td-sidenav-content]\"></ng-content>\n    </div>\n  </mat-sidenav>\n  <div class=\"td-layout-manage-list-main\">\n    <ng-content select=\"mat-toolbar\"></ng-content>\n    <div class=\"td-layout-manage-list-content\" cdkScrollable>\n      <ng-content></ng-content>\n    </div>\n    <ng-content select=\"td-layout-footer-inner\"></ng-content>\n  </div>\n</mat-sidenav-container>\n`,\n})\nexport class TdLayoutManageListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"257px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '257px';\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<void> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<void> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<void> {\n    return this.sidenav.close();\n  }\n\n}\n",
    "import { Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutManageListComponent } from './layout-manage-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutManageListToggle]',\n})\nexport class TdLayoutManageListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListToggle') \n  set tdLayoutManageListToggle(tdLayoutManageListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutManageListToggle === '' || tdLayoutManageListToggle);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListClose]',\n})\nexport class TdLayoutManageListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutManageListClose') \n  set tdLayoutManageListClose(tdLayoutManageListClose: boolean) {\n    this.disabled = !(<any>tdLayoutManageListClose === '' || tdLayoutManageListClose);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListOpen]',\n})\nexport class TdLayoutManageListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListOpen') \n  set tdLayoutManageListOpen(tdLayoutManageListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutManageListOpen === '' || tdLayoutManageListOpen);\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n"
  ],
  "names": [
    "this",
    "opened",
    "sidenavWidth",
    "configurable",
    "sidenav",
    "toggle",
    "TdLayoutComponent",
    "prototype",
    "open",
    "_TdLayoutToggleMixinBase",
    "mixinDisabled",
    "LayoutToggleBase",
    "_this",
    "_super",
    "call",
    "_layout",
    "_elementRef",
    "set",
    "hideWhenOpened",
    "_hideWhenOpened",
    "_initialized",
    "_toggleVisibility",
    "LayoutToggle",
    "ngAfterViewInit",
    "_toggleSubs",
    "_animationStarted",
    "subscribe",
    "ngOnDestroy",
    "undefined",
    "clickListener",
    "event",
    "preventDefault",
    "disabled",
    "_renderer",
    "setStyle",
    "nativeElement",
    "propDecorators",
    "type",
    "Input",
    "args",
    "HostListener",
    "TdLayoutToggleDirective",
    "layout",
    "renderer",
    "elementRef",
    "__extends",
    "tdLayoutToggle",
    "decorators",
    "ElementRef",
    "TdLayoutCloseDirective",
    "Object",
    "defineProperty",
    "tdLayoutClose",
    "Renderer2",
    "TdLayoutOpenDirective",
    "tdLayoutOpen",
    "selector",
    "TdLayoutNavComponent",
    "_router",
    "get",
    "enumerable",
    "mode",
    "TdLayoutNavListComponent",
    "navigationRoute",
    "handleNavigationClick",
    "template",
    "toolbarTitle",
    "icon",
    "TdLayoutNavListToggleDirective",
    "tdLayoutNavListToggle",
    "onClick",
    "Directive",
    "ctorParameters",
    "Inject",
    "forwardRef",
    "TdLayoutManageListComponent",
    "close",
    "Component",
    "TdLayoutManageListToggleDirective",
    "TdLayoutManageListCloseDirective",
    "TdLayoutManageListOpenDirective",
    "color",
    "TdNavigationDrawerComponent",
    "_menuToggled",
    "isMenuAvailable",
    "animations",
    "TdCollapseAnimation",
    "Router",
    "Optional",
    "sidenavTitle",
    "logo",
    "email",
    "TD_LAYOUTS",
    "TdNavigationDrawerToolbarDirective",
    "CovalentLayoutModule",
    "NgModule",
    "MatToolbarModule",
    "MatButtonModule",
    "declarations"
  ],
  "mappings": "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"
}
