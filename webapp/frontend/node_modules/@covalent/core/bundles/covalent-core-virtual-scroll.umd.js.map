{
  "version": 3,
  "file": "covalent-core-virtual-scroll.umd.js",
  "sources": [
    "ng://@covalent/core/virtual-scroll/virtual-scroll/virtual-scroll.module.ts",
    "ng://@covalent/core/virtual-scroll/virtual-scroll/virtual-scroll-container.component.ts",
    "ng://@covalent/core/virtual-scroll/virtual-scroll/virtual-scroll-row.directive.ts"
  ],
  "sourcesContent": [
    "import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdVirtualScrollRowDirective } from './virtual-scroll-row.directive';\nimport { TdVirtualScrollContainerComponent } from './virtual-scroll-container.component';\n\nconst TD_VIRTUAL_SCROLL: Type<any>[] = [\n  TdVirtualScrollRowDirective,\n  TdVirtualScrollContainerComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TD_VIRTUAL_SCROLL,\n  ],\n  exports: [\n    TD_VIRTUAL_SCROLL,\n  ],\n})\nexport class CovalentVirtualScrollModule {\n\n}\n",
    "import { Component, Directive, Input, EventEmitter, ContentChild, AfterViewInit, ViewChild,\n         ChangeDetectionStrategy, ChangeDetectorRef, QueryList, ViewChildren, ElementRef, HostListener,\n         Renderer2, AfterViewChecked, OnDestroy, TrackByFunction } from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdVirtualScrollRowDirective } from './virtual-scroll-row.directive';\n\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n@Component({\n  selector: 'td-virtual-scroll-container',\n  styles: [`:host {\n  display: block;\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  position: relative; }\n`],\n  template: `<div [style.height.px]=\"totalHeight\"></div>\n<div [style.transform]=\"offsetTransform\"\n      [style.position]=\"'absolute'\"\n      [style.width.%]=\"100\">\n  <ng-template let-row\n                let-index=\"index\"\n                ngFor\n                [ngForOf]=\"virtualData\"\n                [ngForTrackBy]=\"trackBy\">\n    <div #rowElement\n         [style.width.%]=\"100\">\n      <ng-template *ngIf=\"_rowTemplate\"\n                  [ngTemplateOutlet]=\"_rowTemplate.templateRef\"\n                  [ngTemplateOutletContext]=\"{row: row,\n                                      index: (fromRow + index),\n                                      first: (fromRow + index) === 0,\n                                      last: (fromRow + index) === (data.length - 1),\n                                      odd: ((fromRow + index + 1) % 2) === 1,\n                                      even: ((fromRow + index + 1) % 2) === 0}\">\n      </ng-template>\n    </div>\n  </ng-template>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdVirtualScrollContainerComponent implements AfterViewInit, AfterViewChecked, OnDestroy {\n\n  private _rowChangeSubs: Subscription;\n  private _initialized: boolean = false;\n\n  private _totalHeight: number = 0;\n  private _hostHeight: number = 0;\n  private _scrollVerticalOffset: number = 0;\n  private _offsetTransform: SafeStyle;\n\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  private _data: any[];\n  private _virtualData: any[];\n\n  /**\n   * data: any[]\n   * List of items to virtually iterate on.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    if (this._initialized) {\n      this._calculateVirtualRows();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  @ViewChildren('rowElement') _rows: QueryList<ElementRef>;\n\n  @ContentChild(TdVirtualScrollRowDirective) _rowTemplate: TdVirtualScrollRowDirective;\n\n  get rowHeight(): number {\n    if (this._rows && this._rows.toArray()[0]) {\n      return this._rows.toArray()[0].nativeElement.getBoundingClientRect().height;\n    }\n    return 0;\n  }\n\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer,\n              private _renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this._rowChangeSubs = this._rows.changes.subscribe(() => {\n      this._calculateVirtualRows();\n    });\n    this._initialized = true;\n    this._calculateVirtualRows();\n  }\n\n  ngAfterViewChecked(): void {\n    let newHostHeight: number = this._elementRef.nativeElement.getBoundingClientRect().height;\n    if (this._hostHeight !== newHostHeight) {\n      this._hostHeight = newHostHeight;\n      if (this._initialized) {\n        this._calculateVirtualRows();\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._rowChangeSubs) {\n      this._rowChangeSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * trackBy?: TrackByFunction\n   * This accepts the same trackBy function [ngFor] does.\n   * https://angular.io/api/core/TrackByFunction\n   */\n  @Input('trackBy') trackBy: TrackByFunction<any> =  (index: number, item: any) => {\n    return item;\n  }\n\n  @HostListener('scroll', ['$event'])\n  handleScroll(event: Event): void {\n    let element: HTMLElement = (<HTMLElement>event.target);\n    if (element) {\n      let verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._scrollVerticalOffset = verticalScroll;\n        if (this._initialized) {\n          this._calculateVirtualRows();\n        }\n      }\n    }\n  }\n\n  /**\n   * Method to refresh and recalculate the virtual rows\n   * e.g. after changing the [data] content\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Method to scroll to a specific row of the list.\n   */\n  scrollTo(row: number): void {\n    this._elementRef.nativeElement.scrollTop = row * this.rowHeight;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Method to scroll to the start of the list.\n   */\n  scrollToStart(): void {\n    this.scrollTo(0);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Method to scroll to the end of the list.\n   */\n  scrollToEnd(): void {\n    this.scrollTo(this.totalHeight / this.rowHeight);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _calculateVirtualRows(): void {\n    if (this._data) {\n      this._totalHeight = this._data.length * this.rowHeight;\n      let fromRow: number = Math.floor((this._scrollVerticalOffset / this.rowHeight)) - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n      let range: number = Math.floor((this._hostHeight / this.rowHeight)) + (TD_VIRTUAL_OFFSET * 2);\n      let toRow: number = range + this.fromRow;\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    if (this._scrollVerticalOffset > (TD_VIRTUAL_OFFSET * this.rowHeight)) {\n      offset = this.fromRow * this.rowHeight;\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle('translateY(' + (offset - this.totalHeight) + 'px)');\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n",
    "import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({selector: '[tdVirtualScrollRow]'})\nexport class TdVirtualScrollRowDirective extends TemplatePortalDirective {\n\n  constructor(templateRef: TemplateRef<any>,\n              viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n  \n}\n"
  ],
  "names": [
    "ContentChild",
    "ViewChildren",
    "Input",
    "ChangeDetectionStrategy"
  ],
  "mappings": "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"
}
