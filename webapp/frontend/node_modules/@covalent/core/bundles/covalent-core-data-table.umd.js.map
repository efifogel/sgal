{
  "version": 3,
  "file": "covalent-core-data-table.umd.js",
  "sources": [
    "ng://@covalent/core/data-table/data-table/data-table-cell/data-table-cell.component.ts",
    "ng://@covalent/core/data-table/data-table/data-table-column/data-table-column.component.ts",
    "ng://@covalent/core/data-table/data-table/data-table.component.ts",
    "ng://@covalent/core/data-table/data-table/directives/data-table-template.directive.ts",
    "ng://@covalent/core/data-table/data-table/data-table-row/data-table-row.component.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, Renderer2, ElementRef, HostBinding } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'td[td-data-table-cell]',\n  styles: [`:host {\n  vertical-align: middle;\n  text-align: left;\n  padding: 0; }\n  html[dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  body[dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  [dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  :host bdo[dir=rtl] {\n    direction: rtl;\n    unicode-bidi: bidi-override; }\n  :host bdo[dir=ltr] {\n    direction: ltr;\n    unicode-bidi: bidi-override; }\n  :host > .td-data-table-cell-content-wrapper {\n    padding: 0 28px;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    max-width: 100%;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: start; }\n    :host > .td-data-table-cell-content-wrapper.td-data-table-cell-numeric {\n      -webkit-box-pack: end;\n          -ms-flex-pack: end;\n              justify-content: flex-end; }\n  :host:first-child > .td-data-table-cell-content-wrapper {\n    padding-left: 24px;\n    padding-right: initial; }\n    html[dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    :host:first-child > .td-data-table-cell-content-wrapper bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:first-child > .td-data-table-cell-content-wrapper bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:first-child > .td-data-table-cell-content-wrapper {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    :host:first-child > .td-data-table-cell-content-wrapper bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:first-child > .td-data-table-cell-content-wrapper bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n  :host:last-child > .td-data-table-cell-content-wrapper {\n    padding-left: 28px;\n    padding-right: 24px; }\n    html[dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    :host:last-child > .td-data-table-cell-content-wrapper bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:last-child > .td-data-table-cell-content-wrapper bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:last-child > .td-data-table-cell-content-wrapper {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    :host:last-child > .td-data-table-cell-content-wrapper bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:last-child > .td-data-table-cell-content-wrapper bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n  :host > * {\n    vertical-align: middle; }\n  :host.mat-clickable {\n    cursor: pointer; }\n    :host.mat-clickable:focus {\n      outline: none; }\n  :host.mat-numeric {\n    text-align: right; }\n    html[dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    [dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    :host.mat-numeric bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host.mat-numeric bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n`],\n  template: `<div class=\"td-data-table-cell-content-wrapper\"\n     [class.td-data-table-cell-numeric]=\"numeric\">\n  <ng-content></ng-content>\n</div>`,\n})\nexport class TdDataTableCellComponent {\n\n  /**\n   * numeric?: boolean\n   * Makes cell follow the numeric data-table specs.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-cell');\n  }\n\n}\n",
    "import { Component, Input, Output, EventEmitter, Renderer2, ElementRef, HostBinding, HostListener, ViewChild } from '@angular/core';\n\nimport { TdDataTableSortingOrder } from '../data-table.component';\n\nexport interface ITdDataTableSortChangeEvent {\n  order: TdDataTableSortingOrder;\n  name: string;\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'th[td-data-table-column]',\n  styles: [`:host {\n  white-space: nowrap;\n  position: relative;\n  padding: 0;\n  vertical-align: middle;\n  text-align: left; }\n  :host > .td-data-table-heading {\n    padding: 0 28px; }\n  :host:first-child > .td-data-table-heading {\n    padding-left: 24px;\n    padding-right: initial; }\n    html[dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-left: initial;\n      unicode-bidi: embed; }\n    :host:first-child > .td-data-table-heading bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:first-child > .td-data-table-heading bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:first-child > .td-data-table-heading {\n      padding-right: 24px;\n      unicode-bidi: embed; }\n    :host:first-child > .td-data-table-heading bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:first-child > .td-data-table-heading bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n  :host:last-child > .td-data-table-heading {\n    padding-left: 28px;\n    padding-right: 24px; }\n    html[dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-left: 24px;\n      unicode-bidi: embed; }\n    :host:last-child > .td-data-table-heading bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:last-child > .td-data-table-heading bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:last-child > .td-data-table-heading {\n      padding-right: 28px;\n      unicode-bidi: embed; }\n    :host:last-child > .td-data-table-heading bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:last-child > .td-data-table-heading bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n  :host mat-icon {\n    height: 16px;\n    width: 16px;\n    font-size: 16px !important;\n    line-height: 16px !important; }\n    :host mat-icon.td-data-table-sort-icon {\n      opacity: 0;\n      -webkit-transition: -webkit-transform 0.25s;\n      transition: -webkit-transform 0.25s;\n      transition: transform 0.25s;\n      transition: transform 0.25s, -webkit-transform 0.25s;\n      position: absolute;\n      top: 0; }\n      :host mat-icon.td-data-table-sort-icon.mat-asc {\n        -webkit-transform: rotate(0deg);\n                transform: rotate(0deg); }\n      :host mat-icon.td-data-table-sort-icon.mat-desc {\n        -webkit-transform: rotate(180deg);\n                transform: rotate(180deg); }\n  :host:hover.mat-sortable mat-icon.td-data-table-sort-icon,\n  :host.mat-active.mat-sortable mat-icon.td-data-table-sort-icon {\n    opacity: 1; }\n  html[dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  body[dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  [dir=rtl] :host {\n    text-align: right;\n    unicode-bidi: embed; }\n  :host bdo[dir=rtl] {\n    direction: rtl;\n    unicode-bidi: bidi-override; }\n  :host bdo[dir=ltr] {\n    direction: ltr;\n    unicode-bidi: bidi-override; }\n  :host > * {\n    vertical-align: middle; }\n  :host.mat-clickable {\n    cursor: pointer; }\n    :host.mat-clickable:focus {\n      outline: none; }\n  :host .td-data-table-heading {\n    display: inline-block;\n    position: relative; }\n  :host.mat-numeric {\n    text-align: right; }\n    html[dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    [dir=rtl] :host.mat-numeric {\n      text-align: left;\n      unicode-bidi: embed; }\n    :host.mat-numeric bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host.mat-numeric bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    :host.mat-numeric mat-icon.td-data-table-sort-icon {\n      margin-left: -22px;\n      margin-right: initial; }\n      html[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-left: initial;\n        unicode-bidi: embed; }\n      body[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-left: initial;\n        unicode-bidi: embed; }\n      [dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-left: initial;\n        unicode-bidi: embed; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=rtl] {\n        direction: rtl;\n        unicode-bidi: bidi-override; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=ltr] {\n        direction: ltr;\n        unicode-bidi: bidi-override; }\n      html[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-right: -22px;\n        unicode-bidi: embed; }\n      body[dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-right: -22px;\n        unicode-bidi: embed; }\n      [dir=rtl] :host.mat-numeric mat-icon.td-data-table-sort-icon {\n        margin-right: -22px;\n        unicode-bidi: embed; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=rtl] {\n        direction: rtl;\n        unicode-bidi: bidi-override; }\n      :host.mat-numeric mat-icon.td-data-table-sort-icon bdo[dir=ltr] {\n        direction: ltr;\n        unicode-bidi: bidi-override; }\n  :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n    margin-left: 6px;\n    margin-right: initial; }\n    html[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-left: initial;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-left: initial;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-left: initial;\n      unicode-bidi: embed; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n    html[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-right: 6px;\n      unicode-bidi: embed; }\n    body[dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-right: 6px;\n      unicode-bidi: embed; }\n    [dir=rtl] :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon {\n      margin-right: 6px;\n      unicode-bidi: embed; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=rtl] {\n      direction: rtl;\n      unicode-bidi: bidi-override; }\n    :host:not(.mat-numeric) mat-icon.td-data-table-sort-icon bdo[dir=ltr] {\n      direction: ltr;\n      unicode-bidi: bidi-override; }\n`],\n  template: `<span #columnContent class=\"td-data-table-heading\">\n  <mat-icon \n    class=\"td-data-table-sort-icon\" \n    *ngIf=\"sortable && numeric\"\n    [class.mat-asc]=\"(!(active) || isAscending())\"\n    [class.mat-desc]=\"(active && isDescending())\">\n    arrow_upward\n  </mat-icon>\n  <span>\n    <ng-content></ng-content>\n  </span>\n  <mat-icon \n    class=\"td-data-table-sort-icon\" \n    *ngIf=\"sortable && !numeric\"\n    [class.mat-asc]=\"(!(active) || isAscending())\"\n    [class.mat-desc]=\"(active && isDescending())\">\n    arrow_upward\n  </mat-icon>\n</span>\n`,\n})\nexport class TdDataTableColumnComponent {\n\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  @ViewChild('columnContent', {read: ElementRef}) _columnContent: ElementRef;\n\n  get projectedWidth(): number {\n    if (this._columnContent && this._columnContent.nativeElement) {\n      return (<HTMLElement>this._columnContent.nativeElement).getBoundingClientRect().width;\n    }\n    return 100;\n  }\n\n  /**\n   * name?: string\n   * Sets unique column [name] for [sortable] events.\n   */\n  @Input('name') name: string = '';\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable') sortable: boolean = false;\n\n  /**\n   * active?: boolean\n   * Sets column to active state when 'true'.\n   * Defaults to 'false'\n   */\n  @Input('active') active: boolean = false;\n\n  /**\n   * numeric?: boolean\n   * Makes column follow the numeric data-table specs and sort icon.\n   * Defaults to 'false'\n   */\n  @Input('numeric') numeric: boolean = false;\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of column.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                        new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  @HostBinding('class.mat-clickable')\n  get bindClickable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-sortable')\n  get bingSortable(): boolean {\n    return this.sortable;\n  }\n\n  @HostBinding('class.mat-active')\n  get bindActive(): boolean {\n    return this.active;\n  }\n\n  @HostBinding('class.mat-numeric')\n  get bindNumeric(): boolean {\n    return this.numeric;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column');\n  }\n\n  /**\n   * Listening to click event on host to throw a sort event\n   */\n  @HostListener('click', ['event'])\n  handleClick(): void {\n    if (this.sortable) {\n      this.onSortChange.emit({name: this.name, order: this._sortOrder});\n    }\n  }\n\n  isAscending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Ascending;\n  }\n\n  isDescending(): boolean {\n    return this._sortOrder === TdDataTableSortingOrder.Descending;\n  }\n\n}\n",
    "import { Component, Input, Output, EventEmitter, forwardRef, ChangeDetectionStrategy,\n         ChangeDetectorRef, ViewChild, OnDestroy, AfterViewInit,\n         ContentChildren, TemplateRef, AfterContentInit, QueryList, Inject,\n         Optional, ViewChildren, ElementRef, OnInit, AfterContentChecked } from '@angular/core';\nimport { DOCUMENT, DomSanitizer, SafeStyle } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { coerceBooleanProperty} from '@angular/cdk/coercion';\nimport { ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\n\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n\nimport { TdDataTableRowComponent } from './data-table-row/data-table-row.component';\nimport { ITdDataTableSortChangeEvent, TdDataTableColumnComponent } from './data-table-column/data-table-column.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nimport { IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\nexport enum TdDataTableSortingOrder {\n  Ascending = 'ASC',\n  Descending = 'DESC',\n}\n\nexport interface ITdDataTableColumnWidth {\n  min?: number;\n  max?: number;\n}\n\nexport interface ITdDataTableColumn {\n  name: string;\n  label: string;\n  tooltip?: string;\n  numeric?: boolean;\n  format?: (value: any) => any;\n  nested?: boolean;\n  sortable?: boolean;\n  hidden?: boolean;\n  filter?: boolean;\n  width?: ITdDataTableColumnWidth | number;\n}\n\nexport interface ITdDataTableSelectEvent {\n  row: any;\n  selected: boolean;\n  index: number;\n}\n\nexport interface ITdDataTableSelectAllEvent {\n  rows: any[];\n  selected: boolean;\n}\n\nexport interface ITdDataTableRowClickEvent {\n  row: any;\n  index: number;\n}\n\nexport interface IInternalColumnWidth {\n  value: number;\n  limit: boolean;\n  index: number;\n  min?: boolean;\n  max?: boolean;\n}\n\n/**\n * Constant to set the rows offset before and after the viewport\n */\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n/**\n * Constant to set default row height if none is provided\n */\nconst TD_VIRTUAL_DEFAULT_ROW_HEIGHT: number = 48;\n\nexport class TdDataTableBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdDataTableMixinBase = mixinControlValueAccessor(TdDataTableBase, []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdDataTableComponent),\n    multi: true,\n  }],\n  selector: 'td-data-table',\n  styles: [`:host {\n  display: block;\n  overflow: hidden; }\n  :host .td-data-table-scrollable {\n    position: relative;\n    overflow: auto;\n    height: calc(100% - 56px); }\n\ntable.td-data-table {\n  width: auto !important; }\n  table.td-data-table.mat-selectable tbody > tr.td-data-table-row {\n    -webkit-transition: background-color 0.2s;\n    transition: background-color 0.2s; }\n  table.td-data-table.mat-selectable .td-data-table-column:first-child > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable th.td-data-table-column:first-child > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable td.td-data-table-cell:first-child > .td-data-table-column-content-wrapper {\n    width: 18px;\n    min-width: 18px;\n    padding: 0 24px; }\n  table.td-data-table.mat-selectable .td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable th.td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper,\n  table.td-data-table.mat-selectable td.td-data-table-cell:nth-child(2) > .td-data-table-column-content-wrapper {\n    padding-left: 0; }\n  [dir='rtl'] table.td-data-table.mat-selectable .td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper, [dir='rtl']\n  table.td-data-table.mat-selectable th.td-data-table-column:nth-child(2) > .td-data-table-column-content-wrapper, [dir='rtl']\n  table.td-data-table.mat-selectable td.td-data-table-cell:nth-child(2) > .td-data-table-column-content-wrapper {\n    padding-right: 0;\n    padding-left: 28px; }\n  table.td-data-table td.mat-checkbox-cell,\n  table.td-data-table th.mat-checkbox-column {\n    min-width: 42px;\n    width: 42px;\n    font-size: 0 !important; }\n    table.td-data-table td.mat-checkbox-cell mat-pseudo-checkbox,\n    table.td-data-table th.mat-checkbox-column mat-pseudo-checkbox {\n      width: 18px;\n      height: 18px; }\n      ::ng-deep table.td-data-table td.mat-checkbox-cell mat-pseudo-checkbox.mat-pseudo-checkbox-checked::after, ::ng-deep\n      table.td-data-table th.mat-checkbox-column mat-pseudo-checkbox.mat-pseudo-checkbox-checked::after {\n        width: 11px !important;\n        height: 4px !important; }\n    table.td-data-table td.mat-checkbox-cell mat-checkbox ::ng-deep .mat-checkbox-inner-container,\n    table.td-data-table th.mat-checkbox-column mat-checkbox ::ng-deep .mat-checkbox-inner-container {\n      width: 18px;\n      height: 18px;\n      margin: 0; }\n`],\n  template: `<table td-data-table\n        [style.left.px]=\"columnsLeftScroll\"\n        [class.mat-selectable]=\"selectable\">\n  <thead class=\"td-data-table-head\">\n    <tr td-data-table-column-row>\n      <th td-data-table-column class=\"mat-checkbox-column\" *ngIf=\"selectable\">\n        <mat-checkbox\n          #checkBoxAll\n          *ngIf=\"multiple\"\n          [disabled]=\"!hasData\"\n          [indeterminate]=\"indeterminate && !allSelected && hasData\"\n          [checked]=\"allSelected && hasData\"\n          (click)=\"blockEvent($event); selectAll(!checkBoxAll.checked)\"\n          (keyup.enter)=\"selectAll(!checkBoxAll.checked)\"\n          (keyup.space)=\"selectAll(!checkBoxAll.checked)\"\n          (keydown.space)=\"blockEvent($event)\">\n        </mat-checkbox>\n      </th>\n      <th td-data-table-column\n          #columnElement\n          *ngFor=\"let column of columns; let i = index;\"\n          [style.min-width.px]=\"getColumnWidth(i)\"\n          [style.max-width.px]=\"getColumnWidth(i)\"\n          [name]=\"column.name\"\n          [numeric]=\"column.numeric\"\n          [active]=\"(column.sortable || sortable) && column === sortByColumn\"\n          [sortable]=\"column.sortable || (sortable && column.sortable !== false)\"\n          [sortOrder]=\"sortOrderEnum\"\n          [hidden]=\"column.hidden\"\n          (sortChange)=\"handleSort(column)\">\n          <span [matTooltip]=\"column.tooltip\">{{column.label}}</span>\n      </th>\n    </tr>\n  </thead>\n</table>\n<div #scrollableDiv class=\"td-data-table-scrollable\"\n      (scroll)=\"handleScroll($event)\">\n  <div [style.height.px]=\"totalHeight\"></div>\n  <table td-data-table\n          [style.transform]=\"offsetTransform\"\n          [style.position]=\"'absolute'\"\n          [class.mat-selectable]=\"selectable\"\n          [class.mat-clickable]=\"clickable\">\n    <tbody class=\"td-data-table-body\">\n      <tr td-data-table-row\n          #dtRow\n          [tabIndex]=\"selectable ? 0 : -1\"\n          [selected]=\"(clickable || selectable) && isRowSelected(row)\"\n          *ngFor=\"let row of virtualData; let rowIndex = index\"\n          (click)=\"handleRowClick(row, fromRow + rowIndex, $event)\"\n          (keyup)=\"selectable && _rowKeyup($event, row, rowIndex)\"\n          (keydown.space)=\"blockEvent($event)\"\n          (keydown.shift.space)=\"blockEvent($event)\"\n          (keydown.shift)=\"disableTextSelection()\"\n          (keyup.shift)=\"enableTextSelection()\">\n        <td td-data-table-cell class=\"mat-checkbox-cell\" *ngIf=\"selectable\">\n          <mat-pseudo-checkbox\n            [state]=\"dtRow.selected ? 'checked' : 'unchecked'\"\n            (mousedown)=\"disableTextSelection()\"\n            (mouseup)=\"enableTextSelection()\"\n            stopRowClick\n            (click)=\"select(row, $event, fromRow + rowIndex)\">\n          </mat-pseudo-checkbox>\n        </td>\n        <td td-data-table-cell\n            [numeric]=\"column.numeric\"\n            [hidden]=\"column.hidden\"\n            *ngFor=\"let column of columns; let i = index\"\n            [style.min-width.px]=\"getColumnWidth(i)\"\n            [style.max-width.px]=\"getColumnWidth(i)\">\n          <span *ngIf=\"!getTemplateRef(column.name)\">{{column.format ? column.format(getCellValue(column, row)) : getCellValue(column, row)}}</span>\n          <ng-template\n            *ngIf=\"getTemplateRef(column.name)\"\n            [ngTemplateOutlet]=\"getTemplateRef(column.name)\"\n            [ngTemplateOutletContext]=\"{ value: getCellValue(column, row), row: row, column: column.name }\">\n          </ng-template>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n<ng-content></ng-content>\n`,\n  inputs: ['value'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdDataTableComponent extends _TdDataTableMixinBase implements IControlValueAccessor, OnInit,\n                                          AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy {\n\n  /** responsive width calculations */\n  private _resizeSubs: Subscription;\n  private _rowsChangedSubs: Subscription;\n  private _hostWidth: number = 0;\n\n  get hostWidth(): number {\n    // if the checkboxes are rendered, we need to remove their width\n    // from the total width to calculate properly\n    if (this.selectable) {\n      return this._hostWidth - 42;\n    }\n    return this._hostWidth;\n  }\n\n  private _widths: IInternalColumnWidth[] = [];\n  private _onResize: Subject<void> = new Subject<void>();\n\n  /** column header reposition and viewpoort */\n  private _verticalScrollSubs: Subscription;\n  private _horizontalScrollSubs: Subscription;\n  private _scrollHorizontalOffset: number = 0;\n\n  private _onHorizontalScroll: Subject<number> = new Subject<number>();\n  private _onVerticalScroll: Subject<number> = new Subject<number>();\n\n  // Array of cached row heights to allow dynamic row heights\n  private _rowHeightCache: number[] = [];\n  // Total pseudo height of all the elements\n  private _totalHeight: number = 0;\n  // Total host height for the viewport\n  private _hostHeight: number = 0;\n  // Scrolled vertical pixels\n  private _scrollVerticalOffset: number = 0;\n  // Style to move the content a certain offset depending on scrolled offset\n  private _offsetTransform: SafeStyle;\n\n  // Variables that set from and to which rows will be rendered\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  /**\n   * Returns the offset style with a proper calculation on how much it should move\n   * over the y axis of the total height\n   */\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  /**\n   * Returns the assumed total height of the rows\n   */\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  /**\n   * Returns the initial row to render in the viewport\n   */\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  /**\n   * Returns the last row to render in the viewport\n   */\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  private _valueChangesSubs: Subscription;\n  /** internal attributes */\n  private _data: any[];\n  // data virtually iterated by component\n  private _virtualData: any[];\n  private _columns: ITdDataTableColumn[];\n  private _selectable: boolean = false;\n  private _clickable: boolean = false;\n  private _multiple: boolean = true;\n  private _allSelected: boolean = false;\n  private _indeterminate: boolean = false;\n\n  /** sorting */\n  private _sortable: boolean = false;\n  private _sortBy: ITdDataTableColumn;\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  /** shift select */\n  private _shiftPreviouslyPressed: boolean = false;\n  private _lastSelectedIndex: number = -1;\n  private _firstSelectedIndex: number = -1;\n  private _firstCheckboxValue: boolean = false;\n\n  /** template fetching support */\n  private _templateMap: Map<string, TemplateRef<any>> = new Map<string, TemplateRef<any>>();\n  @ContentChildren(TdDataTableTemplateDirective) _templates: QueryList<TdDataTableTemplateDirective>;\n\n  @ViewChild('scrollableDiv') _scrollableDiv: ElementRef;\n\n  @ViewChildren('columnElement') _colElements: QueryList<TdDataTableColumnComponent>;\n\n  @ViewChildren(TdDataTableRowComponent) _rows: QueryList<TdDataTableRowComponent>;\n\n  /**\n   * Returns scroll position to reposition column headers\n   */\n  get columnsLeftScroll(): number {\n    return this._scrollHorizontalOffset * -1;\n  }\n\n  /**\n   * Returns true if all values are selected.\n   */\n  get allSelected(): boolean {\n    return this._allSelected;\n  }\n\n  /**\n   * Returns true if all values are not deselected\n   * and at least one is.\n   */\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n\n  /**\n   * data?: {[key: string]: any}[]\n   * Sets the data to be rendered as rows.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    this._rowHeightCache = [];\n    Promise.resolve().then(() => {\n      this.refresh();\n      // scroll back to the top if the data has changed\n      this._scrollableDiv.nativeElement.scrollTop = 0;\n    });\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  /**\n   * columns?: ITdDataTableColumn[]\n   * Sets additional column configuration. [ITdDataTableColumn.name] has to exist in [data] as key.\n   * Defaults to [data] keys.\n   */\n  @Input('columns')\n  set columns(cols: ITdDataTableColumn[]) {\n    this._columns = cols;\n  }\n  get columns(): ITdDataTableColumn[] {\n    if (this._columns) {\n      return this._columns;\n    }\n\n    if (this.hasData) {\n      this._columns = [];\n      // if columns is undefined, use key in [data] rows as name and label for column headers.\n      let row: any = this._data[0];\n      Object.keys(row).forEach((k: string) => {\n        if (!this._columns.find((c: any) => c.name === k)) {\n          this._columns.push({ name: k, label: k });\n        }\n      });\n      return this._columns;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * selectable?: boolean\n   * Enables row selection events, hover and selected row states.\n   * Defaults to 'false'\n   */\n  @Input('selectable')\n  set selectable(selectable: boolean) {\n    this._selectable = coerceBooleanProperty(selectable);\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n\n  /**\n   * clickable?: boolean\n   * Enables row click events, hover.\n   * Defaults to 'false'\n   */\n  @Input('clickable')\n  set clickable(clickable: boolean) {\n    this._clickable = coerceBooleanProperty(clickable);\n  }\n  get clickable(): boolean {\n    return this._clickable;\n  }\n\n  /**\n   * multiple?: boolean\n   * Enables multiple row selection. [selectable] needs to be enabled.\n   * Defaults to 'false'\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable')\n  set sortable(sortable: boolean) {\n    this._sortable = coerceBooleanProperty(sortable);\n  }\n  get sortable(): boolean {\n    return this._sortable;\n  }\n\n  /**\n   * sortBy?: string\n   * Sets the active sort column. [sortable] needs to be enabled.\n   */\n  @Input('sortBy')\n  set sortBy(columnName: string) {\n    if (!columnName) {\n      return;\n    }\n    const column: ITdDataTableColumn = this.columns.find((c: any) => c.name === columnName);\n    if (!column) {\n      throw new Error('[sortBy] must be a valid column name');\n    }\n\n    this._sortBy = column;\n  }\n  get sortByColumn(): ITdDataTableColumn {\n    return this._sortBy;\n  }\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of the [sortBy] column. [sortable] needs to be enabled.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n  get sortOrderEnum(): TdDataTableSortingOrder {\n    return this._sortOrder;\n  }\n\n  get hasData(): boolean {\n    return this._data && this._data.length > 0;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                                      new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  /**\n   * rowSelect?: function\n   * Event emitted when a row is selected/deselected. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectEvent] implemented object.\n   */\n  @Output('rowSelect') onRowSelect: EventEmitter<ITdDataTableSelectEvent> = new EventEmitter<ITdDataTableSelectEvent>();\n\n  /**\n   * rowClick?: function\n   * Event emitted when a row is clicked.\n   * Emits an [ITdDataTableRowClickEvent] implemented object.\n   */\n  @Output('rowClick') onRowClick: EventEmitter<ITdDataTableRowClickEvent> = new EventEmitter<ITdDataTableRowClickEvent>();\n\n  /**\n   * selectAll?: function\n   * Event emitted when all rows are selected/deselected by the all checkbox. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectAllEvent] implemented object.\n   */\n  @Output('selectAll') onSelectAll: EventEmitter<ITdDataTableSelectAllEvent> =\n                                    new EventEmitter<ITdDataTableSelectAllEvent>();\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * compareWith?: function(row, model): boolean\n   * Allows custom comparison between row and model to see if row is selected or not\n   * Default comparation is by reference\n   */\n  @Input('compareWith') compareWith: (row: any, model: any) => boolean = (row: any, model: any) => {\n    return row === model;\n  }\n\n  /**\n   * Initialize observable for resize and scroll events\n   */\n  ngOnInit(): void {\n    // initialize observable for resize calculations\n    this._resizeSubs = this._onResize.asObservable().subscribe(() => {\n      if (this._rows) {\n        this._rows.toArray().forEach((row: TdDataTableRowComponent, index: number) => {\n          this._rowHeightCache[this.fromRow + index] = row.height + 1;\n        });\n      }\n      this._calculateWidths();\n      this._calculateVirtualRows();\n    });\n    // initialize observable for scroll column header reposition\n    this._horizontalScrollSubs = this._onHorizontalScroll.asObservable()\n      .subscribe((horizontalScroll: number) => {\n      this._scrollHorizontalOffset = horizontalScroll;\n      this._changeDetectorRef.markForCheck();\n    });\n    // initialize observable for virtual scroll rendering\n    this._verticalScrollSubs = this._onVerticalScroll.asObservable()\n      .subscribe((verticalScroll: number) => {\n      this._scrollVerticalOffset = verticalScroll;\n      this._calculateVirtualRows();\n      this._changeDetectorRef.markForCheck();\n    });\n    this._valueChangesSubs = this.valueChanges.subscribe((value: any) => {\n      this.refresh();\n    });\n  }\n\n  /**\n   * Loads templates and sets them in a map for faster access.\n   */\n  ngAfterContentInit(): void {\n    for (let i: number = 0; i < this._templates.toArray().length; i++) {\n      this._templateMap.set(\n        this._templates.toArray()[i].tdDataTableTemplate,\n        this._templates.toArray()[i].templateRef,\n      );\n    }\n  }\n\n  /**\n   * Checks hosts native elements widths to see if it has changed (resize check)\n   */\n  ngAfterContentChecked(): void {\n    if (this._elementRef.nativeElement) {\n      let newHostWidth: number = this._elementRef.nativeElement.getBoundingClientRect().width;\n      // if the width has changed then we throw a resize event.\n      if (this._hostWidth !== newHostWidth) {\n        this._hostWidth = newHostWidth;\n        this._onResize.next();\n      }\n    }\n    if (this._scrollableDiv.nativeElement) {\n      let newHostHeight: number = this._scrollableDiv.nativeElement.getBoundingClientRect().height;\n      // if the height of the viewport has changed, then we mark for check\n      if (this._hostHeight !== newHostHeight) {\n        this._hostHeight = newHostHeight;\n        this._calculateVirtualRows();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Registers to an observable that checks if all rows have been rendered\n   * so we can start calculating the widths\n   */\n  ngAfterViewInit(): void {\n    this._rowsChangedSubs = this._rows.changes.pipe(\n      debounceTime(0),\n    ).subscribe(() => {\n      this._onResize.next();\n    });\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Unsubscribes observables when data table is destroyed\n   */\n  ngOnDestroy(): void {\n    if (this._resizeSubs) {\n      this._resizeSubs.unsubscribe();\n    }\n    if (this._horizontalScrollSubs) {\n      this._horizontalScrollSubs.unsubscribe();\n    }\n    if (this._verticalScrollSubs) {\n      this._verticalScrollSubs.unsubscribe();\n    }\n    if (this._rowsChangedSubs) {\n      this._rowsChangedSubs.unsubscribe();\n    }\n    if (this._valueChangesSubs) {\n      this._valueChangesSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * Method that gets executed every time there is a scroll event\n   * Calls the scroll observable\n   */\n  handleScroll(event: Event): void {\n    let element: HTMLElement = (<HTMLElement>event.target);\n    if (element) {\n      let horizontalScroll: number = element.scrollLeft;\n      if (this._scrollHorizontalOffset !== horizontalScroll) {\n        this._onHorizontalScroll.next(horizontalScroll);\n      }\n      let verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._onVerticalScroll.next(verticalScroll);\n      }\n    }\n  }\n\n  /**\n   * Returns the width needed for the columns via index\n   */\n  getColumnWidth(index: number): number {\n    if (this._widths[index]) {\n      return this._widths[index].value;\n    }\n    return undefined;\n  }\n\n  getCellValue(column: ITdDataTableColumn, value: any): string {\n    if (column.nested === undefined || column.nested) {\n      return this._getNestedValue(column.name, value);\n    }\n    return value[column.name];\n  }\n\n  /**\n   * Getter method for template references\n   */\n   getTemplateRef(name: string): TemplateRef<any> {\n     return this._templateMap.get(name);\n   }\n\n  /**\n   * Clears model (ngModel) of component by removing all values in array.\n   */\n  clearModel(): void {\n    this.value.splice(0, this.value.length);\n  }\n\n  /**\n   * Refreshes data table and rerenders [data] and [columns]\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n    this._calculateWidths();\n    this._calculateCheckboxState();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Selects or clears all rows depending on 'checked' value.\n   */\n  selectAll(checked: boolean): void {\n    let toggledRows: any[] = [];\n    if (checked) {\n      this._data.forEach((row: any) => {\n        // skiping already selected rows\n        if (!this.isRowSelected(row)) {\n          this.value.push(row);\n          // checking which ones are being toggled\n          toggledRows.push(row);\n        }\n      });\n      this._allSelected = true;\n      this._indeterminate = true;\n    } else {\n      this._data.forEach((row: any) => {\n        // checking which ones are being toggled\n        if (this.isRowSelected(row)) {\n          toggledRows.push(row);\n          let modelRow: any = this.value.filter((val: any) => {\n            return this.compareWith(row, val);\n          })[0];\n          let index: number = this.value.indexOf(modelRow);\n          if (index > -1) {\n            this.value.splice(index, 1);\n          }\n        }\n      });\n      this._allSelected = false;\n      this._indeterminate = false;\n    }\n    this.onSelectAll.emit({rows: toggledRows, selected: checked});\n  }\n\n  /**\n   * Checks if row is selected\n   */\n  isRowSelected(row: any): boolean {\n    // compare items by [compareWith] function\n    return this.value ? this.value.filter((val: any) => {\n      return this.compareWith(row, val);\n    }).length > 0 : false;\n  }\n\n  /**\n   * Selects or clears a row depending on 'checked' value if the row 'isSelectable'\n   * handles cntrl clicks and shift clicks for multi-select\n   */\n  select(row: any, event: Event, currentSelected: number): void {\n    if (this.selectable) {\n      this.blockEvent(event);\n      // Check to see if Shift key is selected and need to select everything in between\n      let mouseEvent: MouseEvent = event as MouseEvent;\n      if (this.multiple && mouseEvent && mouseEvent.shiftKey && this._lastSelectedIndex > -1) {\n        let firstIndex: number = currentSelected;\n        let lastIndex: number = this._lastSelectedIndex;\n        if (currentSelected > this._lastSelectedIndex) {\n          firstIndex = this._lastSelectedIndex;\n          lastIndex = currentSelected;\n        }\n        // if clicking a checkbox behind the initial check, then toggle all selections expect the initial checkbox\n        // else the checkboxes clicked are all after the initial one\n        if ((this._firstSelectedIndex >= currentSelected && this._lastSelectedIndex > this._firstSelectedIndex) ||\n           (this._firstSelectedIndex <= currentSelected && this._lastSelectedIndex < this._firstSelectedIndex)) {\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            if (this._firstSelectedIndex !== i) {\n              this._doSelection(this._data[i], i);\n            }\n          }\n        } else if ((this._firstSelectedIndex > currentSelected) || (this._firstSelectedIndex < currentSelected)) {\n          // change indexes depending on where the next checkbox is selected (before or after)\n          if (this._firstSelectedIndex > currentSelected) {\n            lastIndex--;\n          } else if (this._firstSelectedIndex < currentSelected) {\n            firstIndex++;\n          }\n          for (let i: number = firstIndex; i <= lastIndex; i++) {\n            let rowSelected: boolean = this.isRowSelected(this._data[i]);\n            // if row is selected and first checkbox was selected\n            // or if row was unselected and first checkbox was unselected\n            // we ignore the toggle\n            if ((this._firstCheckboxValue && !rowSelected) ||\n                (!this._firstCheckboxValue && rowSelected)) {\n              this._doSelection(this._data[i], i);\n            } else if (this._shiftPreviouslyPressed) {\n              // else if the checkbox selected was in the middle of the last selection and the first selection\n              // then we undo the selections\n              if ((currentSelected >= this._firstSelectedIndex && currentSelected <= this._lastSelectedIndex) ||\n                  (currentSelected <= this._firstSelectedIndex && currentSelected >= this._lastSelectedIndex)) {\n                this._doSelection(this._data[i], i);\n              }\n            }\n          }\n        }\n        this._shiftPreviouslyPressed = true;\n      // if shift wasnt pressed, then we take the element checked as the first row\n      // incase the next click uses shift\n      } else if (mouseEvent && !mouseEvent.shiftKey) {\n        this._firstCheckboxValue = this._doSelection(row, currentSelected);\n        this._shiftPreviouslyPressed = false;\n        this._firstSelectedIndex = currentSelected;\n      }\n      this._lastSelectedIndex = currentSelected;\n    }\n  }\n\n  /**\n   * Overrides the onselectstart method of the document so other text on the page\n   * doesn't get selected when doing shift selections.\n   */\n  disableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = function(): boolean {\n        return false;\n      };\n    }\n  }\n\n  /**\n   * Resets the original onselectstart method.\n   */\n  enableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = undefined;\n    }\n  }\n\n  /**\n   * emits the onRowClickEvent when a row is clicked\n   * if clickable is true and selectable is false then select the row\n   */\n  handleRowClick(row: any, index: number, event: Event): void {\n    if (this.clickable) {\n      // ignoring linting rules here because attribute it actually null or not there\n      // can't check for undefined\n      const srcElement: any = event.srcElement || event.currentTarget;\n      /* tslint:disable-next-line */\n      if (srcElement.getAttribute('stopRowClick') === null) {\n        this.onRowClick.emit({\n          row: row,\n          index: index,\n        });\n      }\n    }\n  }\n\n  /**\n   * Method handle for sort click event in column headers.\n   */\n  handleSort(column: ITdDataTableColumn): void {\n    if (this._sortBy === column) {\n      this._sortOrder = this._sortOrder === TdDataTableSortingOrder.Ascending ?\n        TdDataTableSortingOrder.Descending : TdDataTableSortingOrder.Ascending;\n    } else {\n      this._sortBy = column;\n      this._sortOrder = TdDataTableSortingOrder.Ascending;\n    }\n    this.onSortChange.next({ name: this._sortBy.name, order: this._sortOrder });\n  }\n\n  /**\n   * Handle all keyup events when focusing a data table row\n   */\n  _rowKeyup(event: KeyboardEvent, row: any, index: number): void {\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        /** if user presses enter or space, the row should be selected */\n        if (this.selectable) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case UP_ARROW:\n        /**\n         * if users presses the up arrow, we focus the prev row\n         * unless its the first row\n         */\n        if (index > 0) {\n          this._rows.toArray()[index - 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index >= 0) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      case DOWN_ARROW:\n        /**\n         * if users presses the down arrow, we focus the next row\n         * unless its the last row\n         */\n        if (index < (this._rows.toArray().length - 1)) {\n          this._rows.toArray()[index + 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.selectable && this.multiple && event.shiftKey && this.fromRow + index < this._data.length) {\n          this._doSelection(this._data[this.fromRow + index], this.fromRow + index);\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Method to prevent the default events\n   */\n  blockEvent(event: Event): void {\n    event.preventDefault();\n  }\n\n  private _getNestedValue(name: string, value: any): string {\n    if (!(value instanceof Object) || !name) {\n      return value;\n    }\n    if (name.indexOf('.') > -1) {\n      let splitName: string[] = name.split(/\\.(.+)/, 2);\n      return this._getNestedValue(splitName[1], value[splitName[0]]);\n    } else {\n      return value[name];\n    }\n  }\n\n  /**\n   * Does the actual Row Selection\n   */\n  private _doSelection(row: any, rowIndex: number): boolean {\n    let wasSelected: boolean = this.isRowSelected(row);\n    if (!wasSelected) {\n      if (!this._multiple) {\n        this.clearModel();\n      }\n      this.value.push(row);\n    } else {\n      // compare items by [compareWith] function\n      row = this.value.filter((val: any) => {\n        return this.compareWith(row, val);\n      })[0];\n      let index: number = this.value.indexOf(row);\n      if (index > -1) {\n        this.value.splice(index, 1);\n      }\n    }\n    this._calculateCheckboxState();\n    this.onRowSelect.emit({row: row, index: rowIndex, selected: !wasSelected});\n    this.onChange(this.value);\n    return !wasSelected;\n  }\n\n  /**\n   * Calculate all the state of all checkboxes\n   */\n  private _calculateCheckboxState(): void {\n    if (this._data) {\n      this._allSelected = typeof this._data.find((d: any) => !this.isRowSelected(d)) === 'undefined';\n      this._indeterminate = false;\n      for (let row of this._data) {\n        if (!this.isRowSelected(row)) {\n          continue;\n        }\n        this._indeterminate = true;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Calculates the widths for columns and cells depending on content\n   */\n  private _calculateWidths(): void {\n    if (this._colElements && this._colElements.length) {\n      this._widths = [];\n      this._colElements.forEach((col: TdDataTableColumnComponent, index: number) => {\n        this._adjustColumnWidth(index, this._calculateWidth());\n      });\n      this._adjustColumnWidhts();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Adjusts columns after calculation to see if they need to be recalculated.\n   */\n  private _adjustColumnWidhts(): void {\n    let fixedTotalWidth: number = 0;\n    // get the number of total columns that have flexible widths (not fixed or hidden)\n    let flexibleWidths: number = this._widths.filter((width: IInternalColumnWidth, index: number) => {\n      if (this.columns[index].hidden) {\n        return false;\n      }\n      if (width.limit || width.max || width.min) {\n        fixedTotalWidth += width.value;\n      }\n      return !width.limit && !width.max && !width.min;\n    }).length;\n    // calculate how much pixes are left that could be spread across\n    // the flexible columns\n    let recalculateHostWidth: number = 0;\n    if (fixedTotalWidth < this.hostWidth) {\n      recalculateHostWidth = this.hostWidth - fixedTotalWidth;\n    }\n    // if we have flexible columns and pixels to spare on them\n    // we try and spread the pixels across them\n    if (flexibleWidths && recalculateHostWidth) {\n      let newValue: number = Math.floor(recalculateHostWidth / flexibleWidths);\n      let adjustedNumber: number = 0;\n      // adjust the column widths with the spread pixels\n      this._widths.forEach((colWidth: IInternalColumnWidth) => {\n        if (this._widths[colWidth.index].max && this._widths[colWidth.index].value > newValue ||\n            this._widths[colWidth.index].min && this._widths[colWidth.index].value < newValue ||\n            !this._widths[colWidth.index].limit) {\n          this._adjustColumnWidth(colWidth.index, newValue);\n          adjustedNumber++;\n        }\n      });\n      // if there are still columns that need to be recalculated, we start over\n      let newFlexibleWidths: number = this._widths.filter((width: IInternalColumnWidth) => {\n        return !width.limit && !width.max;\n      }).length;\n      if (newFlexibleWidths !== adjustedNumber && newFlexibleWidths !== flexibleWidths) {\n        this._adjustColumnWidhts();\n      }\n    }\n  }\n\n  /**\n   * Adjusts a single column to see if it can be recalculated\n   */\n  private _adjustColumnWidth(index: number, value: number): void {\n    this._widths[index] = {\n      value: value,\n      index: index,\n      limit: false,\n      min: false,\n      max: false,\n    };\n    // flag to see if we need to skip the min width projection\n    // depending if a width or min width has been provided\n    let skipMinWidthProjection: boolean = false;\n    if (this.columns[index]) {\n      // if the provided width has min/max, then we check to see if we need to set it\n      if (typeof this.columns[index].width === 'object') {\n        let widthOpts: ITdDataTableColumnWidth = <ITdDataTableColumnWidth>this.columns[index].width;\n        // if the column width is less than the configured min, we override it\n        skipMinWidthProjection = (widthOpts && !!widthOpts.min);\n        if (widthOpts && widthOpts.min >= this._widths[index].value) {\n          this._widths[index].value = widthOpts.min;\n          this._widths[index].min = true;\n        // if the column width is more than the configured max, we override it\n        } else if (widthOpts && widthOpts.max <= this._widths[index].value) {\n          this._widths[index].value = widthOpts.max;\n          this._widths[index].max = true;\n        }\n      // if it has a fixed width, then we just set it\n      } else if (typeof this.columns[index].width === 'number') {\n        this._widths[index].value = <number>this.columns[index].width;\n        skipMinWidthProjection = this._widths[index].limit = true;\n      }\n    }\n    // if there wasn't any width or min width provided, we set a min to what the column width min should be\n    if (!skipMinWidthProjection &&\n        this._widths[index].value < this._colElements.toArray()[index].projectedWidth) {\n      this._widths[index].value = this._colElements.toArray()[index].projectedWidth;\n      this._widths[index].min = true;\n      this._widths[index].limit = false;\n    }\n  }\n\n  /**\n   * Generic method to calculate column width\n   */\n  private _calculateWidth(): number {\n    let renderedColumns: ITdDataTableColumn[] = this.columns.filter((col: ITdDataTableColumn) => !col.hidden);\n    return Math.floor(this.hostWidth / renderedColumns.length);\n  }\n\n  /**\n   * Method to calculate the rows to be rendered in the viewport\n   */\n  private _calculateVirtualRows(): void {\n    let scrolledRows: number = 0;\n    if (this._data) {\n      this._totalHeight = 0;\n      let rowHeightSum: number = 0;\n      // loop through all rows to see if we have their height cached\n      // and sum them all to calculate the total height\n      this._data.forEach((d: any, index: number) => {\n        // iterate through all rows at first and assume all\n        // rows are the same height as the first one\n        if (!this._rowHeightCache[index]) {\n          this._rowHeightCache[index] = this._rowHeightCache[0] || TD_VIRTUAL_DEFAULT_ROW_HEIGHT;\n        }\n        rowHeightSum += this._rowHeightCache[index];\n        // check how many rows have been scrolled\n        if (this._scrollVerticalOffset - rowHeightSum > 0) {\n          scrolledRows++;\n        }\n      });\n      this._totalHeight = rowHeightSum;\n      // set the initial row to be rendered taking into account the row offset\n      let fromRow: number = scrolledRows - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n\n      let hostHeight: number = this._hostHeight;\n      let index: number = 0;\n      // calculate how many rows can fit in the viewport\n      while (hostHeight > 0) {\n        hostHeight -= this._rowHeightCache[this.fromRow + index];\n        index++;\n      }\n      // set the last row to be rendered taking into account the row offset\n      let range: number = (index - 1) + (TD_VIRTUAL_OFFSET * 2);\n      let toRow: number = range + this.fromRow;\n      // if last row is greater than the total length, then we use the total length\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    // calculate the proper offset depending on how many rows have been scrolled\n    if (scrolledRows > TD_VIRTUAL_OFFSET) {\n      for (let index: number = 0; index < this.fromRow; index++) {\n        offset += this._rowHeightCache[index];\n      }\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle('translateY(' + (offset - this.totalHeight) + 'px)');\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n",
    "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({selector: '[tdDataTableTemplate]ng-template'})\nexport class TdDataTableTemplateDirective extends TemplatePortalDirective {\n\n  @Input() tdDataTableTemplate: string;\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n",
    "import { Component, Input, Output, Renderer2, ElementRef, ContentChildren, QueryList, HostListener } from '@angular/core';\n\nimport { TdDataTableCellComponent } from '../data-table-cell/data-table-cell.component';\nimport { TdDataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-column-row]',\n  styles: [`:host {\n  border-bottom-style: solid;\n  border-bottom-width: 1px; }\n\n:host.td-data-table-row {\n  height: 48px; }\n\n:host.td-data-table-column-row {\n  height: 56px; }\n`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableColumnRowComponent {\n\n  constructor(protected _elementRef: ElementRef, protected _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-column-row');\n  }\n\n}\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'tr[td-data-table-row]',\n  styles: [`:host {\n  border-bottom-style: solid;\n  border-bottom-width: 1px; }\n\n:host.td-data-table-row {\n  height: 48px; }\n\n:host.td-data-table-column-row {\n  height: 56px; }\n`],\n  template: `<ng-content></ng-content>`,\n})\nexport class TdDataTableRowComponent {\n\n  private _selected: boolean = false;\n\n  @Input('selected')\n  set selected(selected: boolean) {\n    if (selected) {\n      this._renderer.addClass(this._elementRef.nativeElement, 'td-selected');\n    } else {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'td-selected');\n    }\n    this._selected = selected;\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  get height(): number {\n    let height: number = 48;\n    if (this._elementRef.nativeElement) {\n      height = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().height;\n    }\n    return height;\n  }\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-data-table-row');\n  }\n\n  /**\n   * Listening to click event to explicitly focus the row element.\n   */\n  @HostListener('click', ['$event'])\n  clickListener(): void {\n    this.focus();\n  }\n\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n}\n"
  ],
  "names": [
    "MatIconModule",
    "MatTooltipModule",
    "MatCheckboxModule",
    "CommonModule",
    "NgModule",
    "Output",
    "Input",
    "DOWN_ARROW",
    "UP_ARROW",
    "SPACE",
    "ENTER",
    "debounceTime",
    "coerceBooleanProperty",
    "EventEmitter",
    "Subject$1",
    "ViewContainerRef",
    "Renderer2",
    "ElementRef"
  ],
  "mappings": "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"
}
