{
  "version": 3,
  "file": "covalent-core-chips.umd.js",
  "sources": [
    "ng://@covalent/core/chips/chips/chips.component.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, Output, forwardRef, DoCheck, ViewChild, ViewChildren, QueryList, OnInit, HostListener,\n  ElementRef, Optional, Inject, Directive, TemplateRef, ViewContainerRef, ContentChild, ChangeDetectionStrategy,\n  ChangeDetectorRef, AfterViewInit, OnDestroy, HostBinding, Renderer2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\n\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, ESCAPE, LEFT_ARROW, RIGHT_ARROW, DELETE, BACKSPACE, ENTER, SPACE, TAB, HOME } from '@angular/cdk/keycodes';\nimport { MatChip } from '@angular/material/chips';\nimport { MatInput } from '@angular/material/input';\nimport { MatOption } from '@angular/material/core';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { timer } from 'rxjs/observable/timer';\nimport { merge } from 'rxjs/observable/merge';\nimport { toPromise } from 'rxjs/operator/toPromise';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter } from 'rxjs/operators/filter';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-chip]ng-template',\n})\nexport class TdChipDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Directive({\n  selector: '[td-autocomplete-option]ng-template',\n})\nexport class TdAutocompleteOptionDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\nexport class TdChipsBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdChipsMixinBase = mixinControlValueAccessor(mixinDisabled(TdChipsBase), []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdChipsComponent),\n    multi: true,\n  }],\n  selector: 'td-chips',\n  inputs: ['disabled', 'value'],\n  styles: [`:host {\n  display: block;\n  padding: 0 5px;\n  min-height: 48px; }\n  :host .td-chips-wrapper {\n    min-height: 42px;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n    -webkit-box-align: start;\n        -ms-flex-align: start;\n            align-items: flex-start; }\n    :host .td-chips-wrapper.td-chips-stacked .mat-basic-chip,\n    :host .td-chips-wrapper.td-chips-stacked .td-chips-form-field {\n      width: 100%; }\n    :host .td-chips-wrapper.td-chips-input-before-position .td-chips-form-field {\n      -webkit-box-ordinal-group: 0;\n          -ms-flex-order: -1;\n              order: -1; }\n  :host .td-chip, :host .td-chip > .td-chip-content {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row;\n    max-width: 100%;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: start; }\n    :host .td-chip.td-chip-stacked, :host .td-chip > .td-chip-content.td-chip-stacked {\n      -webkit-box-pack: justify;\n          -ms-flex-pack: justify;\n              justify-content: space-between; }\n  :host ::ng-deep {\n    /* TODO see if we can make styles more abstract to future proof for contact chips */ }\n    :host ::ng-deep .mat-form-field-wrapper {\n      padding-bottom: 2px; }\n    :host ::ng-deep .mat-basic-chip {\n      display: inline-block;\n      cursor: default;\n      border-radius: 16px;\n      margin: 8px 8px 0 0;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      max-width: 100%;\n      position: relative; }\n      html[dir=rtl] :host ::ng-deep .mat-basic-chip {\n        margin: 8px 0 0 8px;\n        unicode-bidi: embed; }\n      body[dir=rtl] :host ::ng-deep .mat-basic-chip {\n        margin: 8px 0 0 8px;\n        unicode-bidi: embed; }\n      [dir=rtl] :host ::ng-deep .mat-basic-chip {\n        margin: 8px 0 0 8px;\n        unicode-bidi: embed; }\n      :host ::ng-deep .mat-basic-chip bdo[dir=rtl] {\n        direction: rtl;\n        unicode-bidi: bidi-override; }\n      :host ::ng-deep .mat-basic-chip bdo[dir=ltr] {\n        direction: ltr;\n        unicode-bidi: bidi-override; }\n      :host ::ng-deep .mat-basic-chip .td-chip {\n        min-height: 32px;\n        line-height: 32px;\n        font-size: 13px;\n        padding: 0 0 0 12px; }\n        html[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip {\n          padding: 0 12px 0 0;\n          unicode-bidi: embed; }\n        body[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip {\n          padding: 0 12px 0 0;\n          unicode-bidi: embed; }\n        [dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip {\n          padding: 0 12px 0 0;\n          unicode-bidi: embed; }\n        :host ::ng-deep .mat-basic-chip .td-chip bdo[dir=rtl] {\n          direction: rtl;\n          unicode-bidi: bidi-override; }\n        :host ::ng-deep .mat-basic-chip .td-chip bdo[dir=ltr] {\n          direction: ltr;\n          unicode-bidi: bidi-override; }\n        :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] {\n          display: inline-block;\n          -webkit-box-ordinal-group: -19;\n              -ms-flex-order: -20;\n                  order: -20;\n          -webkit-box-pack: center;\n              -ms-flex-pack: center;\n                  justify-content: center;\n          -webkit-box-align: center;\n              -ms-flex-align: center;\n                  align-items: center;\n          text-align: center;\n          height: 32px;\n          width: 32px;\n          margin: 0 8px 0 -12px;\n          border-radius: 50%; }\n          html[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] {\n            margin: 0 -12px 0 8px;\n            unicode-bidi: embed; }\n          body[dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] {\n            margin: 0 -12px 0 8px;\n            unicode-bidi: embed; }\n          [dir=rtl] :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] {\n            margin: 0 -12px 0 8px;\n            unicode-bidi: embed; }\n          :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] bdo[dir=rtl] {\n            direction: rtl;\n            unicode-bidi: bidi-override; }\n          :host ::ng-deep .mat-basic-chip .td-chip [td-chip-avatar] bdo[dir=ltr] {\n            direction: ltr;\n            unicode-bidi: bidi-override; }\n      :host ::ng-deep .mat-basic-chip.td-chip-after-pad {\n        padding: 0 12px 0 0; }\n        html[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad {\n          padding: 0 0 0 12px;\n          unicode-bidi: embed; }\n        body[dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad {\n          padding: 0 0 0 12px;\n          unicode-bidi: embed; }\n        [dir=rtl] :host ::ng-deep .mat-basic-chip.td-chip-after-pad {\n          padding: 0 0 0 12px;\n          unicode-bidi: embed; }\n        :host ::ng-deep .mat-basic-chip.td-chip-after-pad bdo[dir=rtl] {\n          direction: rtl;\n          unicode-bidi: bidi-override; }\n        :host ::ng-deep .mat-basic-chip.td-chip-after-pad bdo[dir=ltr] {\n          direction: ltr;\n          unicode-bidi: bidi-override; }\n      :host ::ng-deep .mat-basic-chip mat-icon.td-chip-removal {\n        margin: 0 4px;\n        font-size: 21px;\n        line-height: 22px; }\n        :host ::ng-deep .mat-basic-chip mat-icon.td-chip-removal:hover {\n          cursor: pointer; }\n    :host ::ng-deep .td-chips-stacked .mat-basic-chip {\n      margin: 4px 0; }\n      :host ::ng-deep .td-chips-stacked .mat-basic-chip:first-of-type {\n        margin: 8px 0 4px; }\n      :host ::ng-deep .td-chips-stacked .mat-basic-chip:last-of-type {\n        margin: 4px 0 8px; }\n  :host .mat-form-field-underline {\n    position: relative;\n    height: 1px;\n    width: 100%;\n    bottom: 0; }\n    :host .mat-form-field-underline.mat-disabled {\n      background-position: 0;\n      bottom: -4px;\n      background-color: transparent; }\n    :host .mat-form-field-underline .mat-form-field-ripple {\n      position: absolute;\n      height: 2px;\n      top: 0;\n      width: 100%;\n      -webkit-transform-origin: 50%;\n              transform-origin: 50%;\n      -webkit-transform: scaleX(0.5);\n              transform: scaleX(0.5);\n      visibility: hidden;\n      opacity: 0;\n      -webkit-transition: background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);\n      transition: background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2); }\n      :host .mat-form-field-underline .mat-form-field-ripple.mat-focused {\n        visibility: visible;\n        opacity: 1;\n        -webkit-transform: scaleX(1);\n                transform: scaleX(1);\n        -webkit-transition: background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear;\n        transition: background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear;\n        transition: transform 150ms linear, background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);\n        transition: transform 150ms linear, background-color 0.3s cubic-bezier(0.55, 0, 0.55, 0.2), -webkit-transform 150ms linear; }\n  :host ::ng-deep mat-form-field .mat-form-field-underline {\n    display: none; }\n`],\n  template: `<div class=\"td-chips-wrapper\"\n     [class.td-chips-stacked]=\"stacked\"\n     [class.td-chips-input-before-position]=\"inputPosition === 'before'\">\n  <ng-template let-chip let-first=\"first\" let-index=\"index\" ngFor [ngForOf]=\"value\">\n    <mat-basic-chip [class.td-chip-disabled]=\"disabled\"\n                   [class.td-chip-after-pad]=\"!canRemoveChip\"\n                   [color]=\"color\"\n                   (keydown)=\"_chipKeydown($event, index)\"\n                   (blur)=\"_handleChipBlur($event, chip)\"\n                   (focus)=\"_handleChipFocus($event, chip)\">\n      <div class=\"td-chip\" [class.td-chip-stacked]=\"stacked\">\n        <span class=\"td-chip-content\">\n          <span *ngIf=\"!_chipTemplate?.templateRef\">{{chip}}</span>\n          <ng-template\n            *ngIf=\"_chipTemplate?.templateRef\"\n            [ngTemplateOutlet]=\"_chipTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ chip: chip }\">\n          </ng-template>\n        </span>\n        <mat-icon *ngIf=\"canRemoveChip\" class=\"td-chip-removal\" (click)=\"_internalClick = removeChip(index)\">\n          cancel\n        </mat-icon>\n      </div>\n    </mat-basic-chip>\n  </ng-template>\n  <mat-form-field floatPlaceholder=\"never\"\n                  class=\"td-chips-form-field\"\n                  [style.width.px]=\"canAddChip ? null : 0\"\n                  [style.height.px]=\"canAddChip ? null : 0\"\n                  [color]=\"color\">\n    <input matInput\n            #input\n            [tabIndex]=\"-1\"\n            [matAutocomplete]=\"autocomplete\"\n            [formControl]=\"inputControl\"\n            [placeholder]=\"canAddChip? placeholder : ''\"\n            (keydown)=\"_inputKeydown($event)\"\n            (keyup.enter)=\"_handleAddChip()\"\n            (focus)=\"_handleFocus()\">\n  </mat-form-field>\n  <mat-autocomplete #autocomplete=\"matAutocomplete\"\n                   [displayWith]=\"_removeInputDisplay\"\n                   (optionSelected)=\"addChip($event.option.value)\">\n    <ng-template let-item let-first=\"first\" ngFor [ngForOf]=\"items\">\n      <mat-option (click)=\"_setInternalClick()\" [value]=\"item\">\n        <span *ngIf=\"!_autocompleteOptionTemplate?.templateRef\">{{item}}</span>\n        <ng-template\n          *ngIf=\"_autocompleteOptionTemplate?.templateRef\"\n          [ngTemplateOutlet]=\"_autocompleteOptionTemplate?.templateRef\"\n          [ngTemplateOutletContext]=\"{ option: item }\">\n        </ng-template>\n      </mat-option>\n    </ng-template>\n  </mat-autocomplete>\n</div>\n<div *ngIf=\"chipAddition\" class=\"mat-form-field-underline\"\n      [class.mat-disabled]=\"disabled\">\n  <span class=\"mat-form-field-ripple\"\n        [class.mat-focused]=\"focused\"></span>\n</div>\n<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdChipsComponent extends _TdChipsMixinBase implements IControlValueAccessor, DoCheck, OnInit, AfterViewInit, OnDestroy, ICanDisable {\n\n  private _outsideClickSubs: Subscription;\n\n  private _isMousedown: boolean = false;\n\n  private _items: any[];\n  private _length: number = 0;\n  private _stacked: boolean = false;\n  private _requireMatch: boolean = false;\n  private _color: 'primary' | 'accent' | 'warn' = 'primary';\n  private _inputPosition: 'before' | 'after' = 'after';\n  private _chipAddition: boolean = true;\n  private _chipRemoval: boolean = true;\n  private _focused: boolean = false;\n  private _tabIndex: number = 0;\n\n  _internalClick: boolean = false;\n  _internalActivateOption: boolean = false;\n\n  @ViewChild('input') _nativeInput: ElementRef;\n  @ViewChild(MatInput) _inputChild: MatInput;\n  @ViewChild(MatAutocompleteTrigger) _autocompleteTrigger: MatAutocompleteTrigger;\n  @ViewChildren(MatChip) _chipsChildren: QueryList<MatChip>;\n\n  @ContentChild(TdChipDirective) _chipTemplate: TdChipDirective;\n  @ContentChild(TdAutocompleteOptionDirective) _autocompleteOptionTemplate: TdAutocompleteOptionDirective;\n\n  @ViewChildren(MatOption) _options: QueryList<MatOption>;\n\n  /**\n   * Flag that is true when autocomplete is focused.\n   */\n  get focused(): boolean {\n    return this._focused;\n  }\n\n  /**\n   * FormControl for the matInput element.\n   */\n  inputControl: FormControl = new FormControl();\n\n  /**\n   * items?: any[]\n   * Renders the `mat-autocomplete` with the provided list to display as options.\n   */\n  @Input('items')\n  set items(items: any[]) {\n    this._items = items;\n    this._setFirstOptionActive();\n    this._changeDetectorRef.markForCheck();\n  }\n  get items(): any[] {\n    return this._items;\n  }\n\n  /**\n   * stacked?: boolean\n   * Set stacked or horizontal chips depending on value.\n   * Defaults to false.\n   */\n  @Input('stacked')\n  set stacked(stacked: boolean) {\n    this._stacked = coerceBooleanProperty(stacked);\n  }\n  get stacked(): boolean {\n    return this._stacked;\n  }\n\n  /**\n   * inputPosition?: 'before' | 'after'\n   * Set input position before or after the chips.\n   * Defaults to 'after'.\n   */\n  @Input('inputPosition')\n  set inputPosition(inputPosition: 'before' | 'after') {\n    this._inputPosition = inputPosition;\n  }\n  get inputPosition(): 'before' | 'after' {\n    return this._inputPosition;\n  }\n\n  /**\n   * requireMatch?: boolean\n   * Blocks custom inputs and only allows selections from the autocomplete list.\n   */\n  @Input('requireMatch')\n  set requireMatch(requireMatch: boolean) {\n    this._requireMatch = coerceBooleanProperty(requireMatch);\n  }\n  get requireMatch(): boolean {\n    return this._requireMatch;\n  }\n\n  /**\n   * chipAddition?: boolean\n   * Disables the ability to add chips. When setting disabled as true, this will be overriden.\n   * Defaults to true.\n   */\n  @Input('chipAddition')\n  set chipAddition(chipAddition: boolean) {\n    this._chipAddition = chipAddition;\n    this._toggleInput();\n  }\n  get chipAddition(): boolean {\n    return this._chipAddition;\n  }\n\n  /**\n   * Checks if not in disabled state and if chipAddition is set to 'true'\n   * States if a chip can be added and if the input is available\n   */\n  get canAddChip(): boolean {\n    return this.chipAddition && !this.disabled;\n  }\n\n  /**\n   * chipRemoval?: boolean\n   * Disables the ability to remove chips. If it doesn't exist chip remmoval defaults to true.\n   * When setting disabled as true, this will be overriden to false.\n   */\n  @Input('chipRemoval')\n  set chipRemoval(chipRemoval: boolean) {\n    this._chipRemoval = chipRemoval;\n  }\n  get chipRemoval(): boolean {\n    return this._chipRemoval;\n  }\n\n  /**\n   * Checks if not in disabled state and if chipRemoval is set to 'true'\n   * States if a chip can be removed\n   */\n  get canRemoveChip(): boolean {\n    return this.chipRemoval && !this.disabled;\n  }\n\n  /**\n   * placeholder?: string\n   * Placeholder for the autocomplete input.\n   */\n  @Input('placeholder') placeholder: string;\n\n  /**\n   * debounce?: number\n   * Debounce timeout between keypresses. Defaults to 200.\n   */\n  @Input('debounce') debounce: number = 200;\n\n  /**\n   * color?: 'primary' | 'accent' | 'warn'\n   * Sets the color for the input and focus/selected state of the chips.\n   * Defaults to 'primary'\n   */\n  @Input('color')\n  set color(color: 'primary' | 'accent' | 'warn') {\n    if (color) {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\n      this._color = color;\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n    }\n  }\n  get color(): 'primary' | 'accent' | 'warn' {\n    return this._color;\n  }\n\n  /**\n   * add?: function\n   * Method to be executed when a chip is added.\n   * Sends chip value as event.\n   */\n  @Output('add') onAdd: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * remove?: function\n   * Method to be executed when a chip is removed.\n   * Sends chip value as event.\n   */\n  @Output('remove') onRemove: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * inputChange?: function\n   * Method to be executed when the value in the autocomplete input changes.\n   * Sends string value as event.\n   */\n  @Output('inputChange') onInputChange: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * chipFocus?: function\n   * Method to be executed when a chip is focused.\n   * Sends chip value as event.\n   */\n  @Output('chipFocus') onChipFocus: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * blur?: function\n   * Method to be executed when a chip is blurred.\n   * Sends chip value as event.\n   */\n  @Output('chipBlur') onChipBlur: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Hostbinding to set the a11y of the TdChipsComponent depending on its state\n   */\n  @HostBinding('attr.tabindex')\n  get tabIndex(): number {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _renderer: Renderer2,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n  }\n\n  /**\n   * Listens to host focus event to act on it\n   */\n  @HostListener('focus', ['$event'])\n  focusListener(event: FocusEvent): void {\n    // should only focus if its not via mousedown to prevent clashing with autocomplete\n    if (!this._isMousedown) {\n      this.focus();\n    }\n    event.preventDefault();\n  }\n\n  /**\n   * Listens to host mousedown event to act on it\n   */\n  @HostListener('mousedown', ['$event'])\n  mousedownListener(event: FocusEvent): void {\n     // sets a flag to know if there was a mousedown and then it returns it back to false\n    this._isMousedown = true;\n    toPromise.call(timer()).then(() => {\n      this._isMousedown = false;\n    });\n  }\n\n  /**\n   * If clicking on :host or `td-chips-wrapper`, then we stop the click propagation so the autocomplete\n   * doesnt close automatically.\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    const clickTarget: HTMLElement = <HTMLElement>event.target;\n    if (clickTarget === this._elementRef.nativeElement ||\n        clickTarget.className.indexOf('td-chips-wrapper') > -1) {\n      this.focus();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Listens to host keydown event to act on it depending on the keypress\n   */\n  @HostListener('keydown', ['$event'])\n  keydownListener(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case TAB:\n        // if tabing out, then unfocus the component\n        toPromise.call(timer()).then(() => {\n          this.removeFocusedState();\n        });\n        break;\n      case ESCAPE:\n        if (this._inputChild.focused) {\n          this._nativeInput.nativeElement.blur();\n          this.removeFocusedState();\n          this._closeAutocomplete();\n        } else {\n          this.focus();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  ngOnInit(): void {\n    this.inputControl.valueChanges.pipe(\n      debounceTime(this.debounce),\n    ).subscribe((value: string) => {\n      this.onInputChange.emit(value ? value : '');\n    });\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterViewInit(): void {\n    this._watchOutsideClick();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngDoCheck(): void {\n    // Throw onChange event only if array changes size.\n    if (this.value && this.value.length !== this._length) {\n      this._length = this.value.length;\n      this.onChange(this.value);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._outsideClickSubs) {\n      this._outsideClickSubs.unsubscribe();\n      this._outsideClickSubs = undefined;\n    }\n  }\n\n  _setInternalClick(): void {\n    this._internalClick = true;\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    this._toggleInput();\n  }\n\n  /**\n   * Method that is executed when trying to create a new chip from the autocomplete.\n   * It check if [requireMatch] is enabled, and tries to add the first active option\n   * else if just adds the value thats on the input\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  _handleAddChip(): boolean {\n    let value: any;\n    if (this.requireMatch) {\n      let selectedOptions: MatOption[] = this._options.toArray().filter((option: MatOption) => {\n        return option.active;\n      });\n      if (selectedOptions.length > 0) {\n        value = selectedOptions[0].value;\n        selectedOptions[0].setInactiveStyles();\n      }\n      if (!value) {\n        return false;\n      }\n    } else {\n      // if there is a selection, then use that\n      // else use the input value as chip\n      if (this._autocompleteTrigger.activeOption) {\n        value = this._autocompleteTrigger.activeOption.value;\n        this._autocompleteTrigger.activeOption.setInactiveStyles();\n      } else {\n        value = this._inputChild.value;\n        if (value.trim() === '') {\n          return false;\n        }\n      }\n    }\n    return this.addChip(value);\n  }\n\n  /**\n   * Method thats exectuted when trying to add a value as chip\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  addChip(value: any): boolean {\n    /**\n     * add a debounce ms delay when reopening the autocomplete to give it time\n     * to rerender the next list and at the correct spot\n     */\n    this._closeAutocomplete();\n    toPromise.call(timer(this.debounce)).then(() => {\n      this.setFocusedState();\n      this._setFirstOptionActive();\n      this._openAutocomplete();\n    });\n\n    this.inputControl.setValue('');\n    // check if value is already part of the model\n    if (this.value.indexOf(value) > -1) {\n      return false;\n    }\n\n    this.value.push(value);\n    this.onAdd.emit(value);\n    this.onChange(this.value);\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Method that is executed when trying to remove a chip.\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  removeChip(index: number): boolean {\n    let removedValues: any[] = this.value.splice(index, 1);\n    if (removedValues.length === 0) {\n      return false;\n    }\n\n    /**\n     * Checks if deleting last single chip, to focus input afterwards\n     * Else check if its not the last chip of the list to focus the next one.\n     */\n    if (index === (this._totalChips - 1) && index === 0) {\n      this._inputChild.focus();\n    } else if (index < (this._totalChips - 1)) {\n      this._focusChip(index + 1);\n    } else if (index > 0) {\n      this._focusChip(index - 1);\n    }\n\n    this.onRemove.emit(removedValues[0]);\n    this.onChange(this.value);\n    this.inputControl.setValue('');\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Sets blur of chip and sends out event\n   */\n  _handleChipBlur(event: FocusEvent, value: any): void {\n    this.onChipBlur.emit(value);\n  }\n\n  /**\n   * Sets focus of chip and sends out event\n   */\n  _handleChipFocus(event: FocusEvent, value: any): void {\n    this.setFocusedState();\n    this.onChipFocus.emit(value);\n  }\n\n  _handleFocus(): boolean {\n    this.setFocusedState();\n    this._setFirstOptionActive();\n    return true;\n  }\n\n  /**\n   * Sets focus state of the component\n   */\n  setFocusedState(): void {\n    if (!this.disabled) {\n      this._focused = true;\n      this._tabIndex = -1;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Removes focus state of the component\n   */\n  removeFocusedState(): void {\n    this._focused = false;\n    this._tabIndex = 0;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Programmatically focus the input or first chip. Since its the component entry point\n   * depending if a user can add or remove chips\n   */\n  focus(): void {\n    if (this.canAddChip) {\n      this._inputChild.focus();\n    } else if (!this.disabled) {\n      this._focusFirstChip();\n    }\n  }\n\n  /**\n   * Passes relevant input key presses.\n   */\n  _inputKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case UP_ARROW:\n        /**\n         * Since the first item is highlighted on [requireMatch], we need to inactivate it\n         * when pressing the up key\n         */\n        if (this.requireMatch) {\n          let length: number = this._options.length;\n          if (length > 1 && this._options.toArray()[0].active && this._internalActivateOption) {\n            this._options.toArray()[0].setInactiveStyles();\n            this._internalActivateOption = false;\n            // prevent default window scrolling\n            event.preventDefault();\n          }\n        }\n        break;\n      case LEFT_ARROW:\n      case DELETE:\n      case BACKSPACE:\n        this._closeAutocomplete();\n        /** Check to see if input is empty when pressing left arrow to move to the last chip */\n        if (!this._inputChild.value) {\n          this._focusLastChip();\n          // prevent default window scrolling\n          event.preventDefault();\n        }\n        break;\n      case RIGHT_ARROW:\n        this._closeAutocomplete();\n        /** Check to see if input is empty when pressing right arrow to move to the first chip */\n        if (!this._inputChild.value) {\n          this._focusFirstChip();\n          // prevent default window scrolling\n          event.preventDefault();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Passes relevant chip key presses.\n   */\n  _chipKeydown(event: KeyboardEvent, index: number): void {\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        /** Check to see if we can delete a chip */\n        if (this.canRemoveChip) {\n         this.removeChip(index);\n        }\n        break;\n      case UP_ARROW:\n      case LEFT_ARROW:\n        /**\n         * Check to see if left/down arrow was pressed while focusing the first chip to focus input next\n         * Also check if input should be focused\n         */\n        if (index === 0) {\n          // only try to target input if pressing left\n          if (this.canAddChip && event.keyCode === LEFT_ARROW) {\n            this._inputChild.focus();\n          } else {\n            this._focusLastChip();\n          }\n        } else if (index > 0) {\n          this._focusChip(index - 1);\n        }\n        // prevent default window scrolling\n        event.preventDefault();\n        break;\n      case DOWN_ARROW:\n      case RIGHT_ARROW:\n        /**\n         * Check to see if right/up arrow was pressed while focusing the last chip to focus input next\n         * Also check if input should be focused\n         */\n        if (index === (this._totalChips - 1)) {\n          // only try to target input if pressing right\n          if (this.canAddChip && event.keyCode === RIGHT_ARROW) {\n            this._inputChild.focus();\n          } else {\n            this._focusFirstChip();\n          }\n        } else if (index < (this._totalChips - 1)) {\n          this._focusChip(index + 1);\n        }\n        // prevent default window scrolling\n        event.preventDefault();\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Method to remove from display the value added from the autocomplete since it goes directly as chip.\n   */\n  _removeInputDisplay(): string {\n    return '';\n  }\n\n  /**\n   * Method to open the autocomplete manually if its not already opened\n   */\n  _openAutocomplete(): void {\n    if (!this._autocompleteTrigger.panelOpen) {\n      this._autocompleteTrigger.openPanel();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Method to close the autocomplete manually if its not already closed\n   */\n  _closeAutocomplete(): void {\n    if (this._autocompleteTrigger.panelOpen) {\n      this._autocompleteTrigger.closePanel();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Get total of chips\n   */\n  get _totalChips(): number {\n    let chips: MatChip[] = this._chipsChildren.toArray();\n    return chips.length;\n  }\n\n  /**\n   * Method to focus a desired chip by index\n   */\n  private _focusChip(index: number): void {\n    /** check to see if index exists in the array before focusing */\n    if (index > -1 && this._totalChips > index) {\n      this._chipsChildren.toArray()[index].focus();\n    }\n  }\n\n  /** Method to focus first chip */\n  private _focusFirstChip(): void {\n    this._focusChip(0);\n  }\n\n  /** Method to focus last chip */\n  private _focusLastChip(): void {\n    this._focusChip(this._totalChips - 1);\n  }\n\n  /**\n   * Method to toggle the disable state of input\n   * Checks if not in disabled state and if chipAddition is set to 'true'\n   */\n  private _toggleInput(): void {\n    if (this.canAddChip) {\n      this.inputControl.enable();\n    } else {\n      this.inputControl.disable();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets first option as active to let the user know which one will be added when pressing enter\n   * Only if [requireMatch] has been set\n   */\n  private _setFirstOptionActive(): void {\n    if (this.requireMatch) {\n      // need to use a timer here to wait until the autocomplete has been opened (end of queue)\n      toPromise.call(timer()).then(() => {\n        if (this.focused && this._options && this._options.length > 0) {\n          // clean up of previously active options\n          this._options.toArray().forEach((option: MatOption) => {\n            option.setInactiveStyles();\n          });\n          // set the first one as active\n          this._options.toArray()[0].setActiveStyles();\n          this._internalActivateOption = true;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n  }\n\n  /**\n   * Watches clicks outside of the component to remove the focus\n   * The autocomplete panel is considered inside the component so we\n   * need to use a flag to find out when its clicked.\n   */\n  private _watchOutsideClick(): void {\n    if (this._document) {\n      merge(\n        fromEvent(this._document, 'click'),\n        fromEvent(this._document, 'touchend'),\n      ).pipe(\n        filter(\n          (event: MouseEvent) => {\n            const clickTarget: HTMLElement = <HTMLElement>event.target;\n            setTimeout(() => {\n              this._internalClick = false;\n            });\n            return this.focused &&\n                  (clickTarget !== this._elementRef.nativeElement) &&\n                  !this._elementRef.nativeElement.contains(clickTarget) && !this._internalClick;\n          },\n        ),\n      ).subscribe(() => {\n        if (this.focused) {\n          this._autocompleteTrigger.closePanel();\n          this.removeFocusedState();\n          this.onTouched();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    return undefined;\n  }\n}\n"
  ],
  "names": [
    "DOWN_ARROW",
    "BACKSPACE",
    "DELETE",
    "RIGHT_ARROW",
    "UP_ARROW",
    "toPromise$1",
    "timer$1",
    "debounceTime$1",
    "toPromise",
    "coerceBooleanProperty",
    "EventEmitter",
    "mixinControlValueAccessor",
    "mixinDisabled",
    "TemplateRef",
    "Directive",
    "TemplatePortalDirective"
  ],
  "mappings": "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"
}
