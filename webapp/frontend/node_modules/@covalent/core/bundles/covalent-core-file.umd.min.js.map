{
  "version": 3,
  "file": "covalent-core-file.umd.min.js",
  "sources": [
    "ng://@covalent/core/file/file/directives/file-select.directive.ts",
    "ng://@covalent/core/file/file/directives/file-drop.directive.ts",
    "ng://@covalent/core/file/file/file-input/file-input.component.ts",
    "ng://@covalent/core/file/file/file-upload/file-upload.component.ts",
    "ng://@covalent/core/file/file/services/file.service.ts",
    "ng://@covalent/core/file/file/file.module.ts"
  ],
  "sourcesContent": [
    "import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding, Host, Optional } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NgModel } from '@angular/forms';\n\n@Directive({\n  selector: '[tdFileSelect]',\n})\nexport class TdFileSelectDirective {\n\n  private _multiple: boolean = false;\n\n  /**\n   * multiple?: boolean\n   * Sets whether multiple files can be selected at once in host element, or just a single file.\n   * Can also be 'multiple' native attribute.\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n\n  /**\n   * fileSelect?: function\n   * Event emitted when a file or files are selected in host [HTMLInputElement].\n   * Emits a [FileList | File] object.\n   * Alternative to not use [(ngModel)].\n   */\n  @Output('fileSelect') onFileSelect: EventEmitter<FileList | File> = new EventEmitter<FileList | File>();\n\n  /**\n   * Binds native 'multiple' attribute if [multiple] property is 'true'.\n   */\n  @HostBinding('attr.multiple')\n  get multipleBinding(): string {\n    return this._multiple ? '' : undefined;\n  }\n\n  constructor(@Optional() @Host() private model: NgModel) {\n  }\n\n  /**\n   * Listens to 'change' host event to get [HTMLInputElement] files.\n   * Emits the 'onFileSelect' event with a [FileList] or [File] depending if 'multiple' attr exists in host.\n   * Uses [(ngModel)] if declared, instead of emitting 'onFileSelect' event.\n   */\n  @HostListener('change', ['$event'])\n  onChange(event: Event): void {\n    if (event.target instanceof HTMLInputElement) {\n      let fileInputEl: HTMLInputElement = (<HTMLInputElement>event.target);\n      let files: FileList = fileInputEl.files;\n      if (files.length) {\n        let value: FileList | File = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];\n        this.model ? this.model.update.emit(value) : this.onFileSelect.emit(value);\n      }\n    }\n  }\n}\n",
    "import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { HostListener, HostBinding, ElementRef, Renderer2 } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport { ICanDisable, mixinDisabled } from '@covalent/core/common';\n\nexport class TdFileDropBase {}\n\n/* tslint:disable-next-line */\nexport const _TdFileDropMixinBase = mixinDisabled(TdFileDropBase);\n\n@Directive({\n  selector: '[tdFileDrop]',\n  inputs: ['disabled'],\n})\nexport class TdFileDropDirective extends _TdFileDropMixinBase implements ICanDisable {\n\n  private _multiple: boolean = false;\n\n  /**\n   * multiple?: boolean\n   * Sets whether multiple files can be dropped at once in host element, or just a single file.\n   * Can also be 'multiple' native attribute.\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n\n  /**\n   * fileDrop?: function\n   * Event emitted when a file or files are dropped in host element after being validated.\n   * Emits a [FileList | File] object.\n   */\n  @Output('fileDrop') onFileDrop: EventEmitter<FileList | File> = new EventEmitter<FileList | File>();\n\n  /**\n   * Binds native 'multiple' attribute if [multiple] property is 'true'.\n   */\n  @HostBinding('attr.multiple')\n  get multipleBinding(): string {\n    return this._multiple ? '' : undefined;\n  }\n\n  /**\n   * Binds native 'disabled' attribute if [disabled] property is 'true'.\n   */\n  @HostBinding('attr.disabled')\n  get disabledBinding(): string {\n    return this.disabled ? '' : undefined;\n  }\n\n  constructor(private _renderer: Renderer2, private _element: ElementRef) {\n    super();\n  }\n\n  /**\n   * Listens to 'drop' host event to get validated transfer items.\n   * Emits the 'onFileDrop' event with a [FileList] or [File] depending if 'multiple' attr exists in host.\n   * Stops event propagation and default action from browser for 'drop' event.\n   */\n  @HostListener('drop', ['$event'])\n  onDrop(event: Event): void {\n    if (!this.disabled) {\n      let transfer: DataTransfer = (<DragEvent>event).dataTransfer;\n      let files: FileList = transfer.files;\n      if (files.length) {\n        let value: FileList | File = this._multiple ? (files.length > 1 ? files : files[0]) : files[0];\n        this.onFileDrop.emit(value);\n      }\n    }\n    this._renderer.removeClass(this._element.nativeElement, 'drop-zone');\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragover' host event to validate transfer items.\n   * Checks if 'multiple' attr exists in host to allow multiple file drops.\n   * Stops event propagation and default action from browser for 'dragover' event.\n   */\n  @HostListener('dragover', ['$event'])\n  onDragOver(event: Event): void {\n    let transfer: DataTransfer = (<DragEvent>event).dataTransfer;\n    transfer.dropEffect = this._typeCheck(transfer.types);\n    if (this.disabled || (!this._multiple &&\n      ((transfer.items && transfer.items.length > 1) || (<any>transfer).mozItemCount > 1))) {\n      transfer.dropEffect = 'none';\n    } else {\n      transfer.dropEffect = 'copy';\n    }\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragenter' host event to add animation class 'drop-zone' which can be overriden in host.\n   * Stops event propagation and default action from browser for 'dragenter' event.\n   */\n  @HostListener('dragenter', ['$event'])\n  onDragEnter(event: Event): void {\n    if (!this.disabled) {\n      this._renderer.addClass(this._element.nativeElement, 'drop-zone');\n    }\n    this._stopEvent(event);\n  }\n\n  /**\n   * Listens to 'dragleave' host event to remove animation class 'drop-zone'.\n   * Stops event propagation and default action from browser for 'dragleave' event.\n   */\n  @HostListener('dragleave', ['$event'])\n  onDragLeave(event: Event): void {\n    this._renderer.removeClass(this._element.nativeElement, 'drop-zone');\n    this._stopEvent(event);\n  }\n\n  /**\n   * Validates if the transfer item types are 'Files'.\n   */\n  private _typeCheck(types: string[] | DOMStringList): string {\n    let dropEffect: string = 'none';\n    if (types) {\n      if (((<any>types).contains && (<any>types).contains('Files'))\n      || ((<any>types).indexOf && (<any>types).indexOf('Files') !== -1)) {\n        dropEffect = 'copy';\n      }\n    }\n    return dropEffect;\n  }\n\n  private _stopEvent(event: Event): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n",
    "import { Component, Directive, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewChild,\n         ElementRef, Renderer2, TemplateRef, ViewContainerRef, ChangeDetectorRef, forwardRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-file-input-label]ng-template',\n})\nexport class TdFileInputLabelDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\nexport class TdFileInputBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdFileInputMixinBase = mixinControlValueAccessor(mixinDisabled(TdFileInputBase));\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdFileInputComponent),\n    multi: true,\n  }],\n  selector: 'td-file-input',\n  inputs: ['disabled', 'value'],\n  styles: [`:host {\n  /**\n  * Class that is added ondragenter by the [TdFileDrop] directive.\n  */ }\n  :host .td-file-input {\n    padding-left: 8px;\n    padding-right: 8px; }\n  :host input.td-file-input-hidden {\n    display: none; }\n  :host .drop-zone {\n    border-radius: 3px; }\n    :host .drop-zone * {\n      pointer-events: none; }\n`],\n  template: `<div>\n  <button mat-raised-button\n          class=\"td-file-input\"\n          type=\"button\"\n          [color]=\"color\" \n          [multiple]=\"multiple\" \n          [disabled]=\"disabled\"\n          (keyup.enter)=\"fileInput.click()\"\n          (click)=\"fileInput.click()\"\n          (fileDrop)=\"handleSelect($event)\"\n          tdFileDrop>\n    <ng-content></ng-content>\n  </button>\n  <input #fileInput \n          class=\"td-file-input-hidden\" \n          type=\"file\"\n          [attr.accept]=\"accept\"                \n          (fileSelect)=\"handleSelect($event)\"\n          [multiple]=\"multiple\" \n          [disabled]=\"disabled\"\n          tdFileSelect>\n</div>`,\n})\nexport class TdFileInputComponent extends _TdFileInputMixinBase implements IControlValueAccessor, ICanDisable {\n\n  private _multiple: boolean = false;\n\n  /** The native `<input type=\"file\"> element */\n  @ViewChild('fileInput') _inputElement: ElementRef;\n  get inputElement(): HTMLInputElement {\n    return this._inputElement.nativeElement;\n  }\n\n  /**\n   * color?: string\n   * Sets button color. Uses same color palette accepted as [MatButton].\n   */\n  @Input('color') color: string;\n\n  /**\n   * multiple?: boolean\n   * Sets if multiple files can be dropped/selected at once in [TdFileInputComponent].\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * accept?: string\n   * Sets files accepted when opening the file browser dialog.\n   * Same as 'accept' attribute in <input/> element.\n   */\n  @Input('accept') accept: string;\n\n  /**\n   * select?: function\n   * Event emitted a file is selected\n   * Emits a [File | FileList] object.\n   */\n  @Output('select') onSelect: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  constructor(private _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * Method executed when a file is selected.\n   */\n  handleSelect(files: File | FileList): void {\n    this.writeValue(files);\n    this.onSelect.emit(files);\n  }\n\n  /**\n   * Used to clear the selected files from the [TdFileInputComponent].\n   */\n  clear(): void {\n    this.writeValue(undefined);\n    this._renderer.setProperty(this.inputElement, 'value', '');\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    if (v) {\n      this.clear();\n    }\n  }\n\n}\n",
    "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewChild, ContentChild, ChangeDetectorRef,\n  forwardRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '@covalent/core/common';\nimport { TdFileInputComponent, TdFileInputLabelDirective } from '../file-input/file-input.component';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nexport class TdFileUploadBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdFileUploadMixinBase = mixinControlValueAccessor(mixinDisabled(TdFileUploadBase));\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdFileUploadComponent),\n    multi: true,\n  }],\n  selector: 'td-file-upload',\n  inputs: ['disabled', 'value'],\n  styles: [`.td-file-upload {\n  padding-left: 8px;\n  padding-right: 8px; }\n\n.td-file-upload-cancel {\n  height: 24px;\n  width: 24px;\n  position: relative;\n  top: 24px;\n  left: -12px; }\n  ::ng-deep [dir='rtl'] .td-file-upload-cancel {\n    right: -12px;\n    left: 0; }\n  .td-file-upload-cancel mat-icon {\n    border-radius: 12px;\n    vertical-align: baseline; }\n\n/**\n* Class that is added ondragenter by the [TdFileDrop] directive.\n*/\n.drop-zone {\n  border-radius: 3px; }\n  .drop-zone * {\n    pointer-events: none; }\n`],\n  template: `<td-file-input *ngIf=\"!value\"\n               [(ngModel)]=\"value\"\n               [multiple]=\"multiple\"\n               [disabled]=\"disabled\"\n               [accept]=\"accept\"\n               [color]=\"defaultColor\"\n               (select)=\"handleSelect($event)\">\n  <ng-template [cdkPortalHost]=\"inputLabel\" [ngIf]=\"true\"></ng-template>\n</td-file-input>\n<div *ngIf=\"value\">\n  <button #fileUpload\n          class=\"td-file-upload\"\n          mat-raised-button\n          type=\"button\"\n          [color]=\"activeColor\"\n          (keyup.delete)=\"cancel()\"\n          (keyup.backspace)=\"cancel()\"\n          (keyup.escape)=\"cancel()\"\n          (click)=\"uploadPressed()\"> \n    <ng-content></ng-content>\n  </button>\n  <button mat-icon-button\n          type=\"button\"\n          class=\"td-file-upload-cancel\"\n          [color]=\"cancelColor\"            \n          (click)=\"cancel()\">\n    <mat-icon>cancel</mat-icon>\n  </button>\n</div>`,\n})\nexport class TdFileUploadComponent extends _TdFileUploadMixinBase implements IControlValueAccessor, ICanDisable {\n\n  private _multiple: boolean = false;\n  private _required: boolean = false;\n\n  @ViewChild(TdFileInputComponent) fileInput: TdFileInputComponent;\n\n  @ContentChild(TdFileInputLabelDirective) inputLabel: TdFileInputLabelDirective;\n\n  /**\n   * defaultColor?: string\n   * Sets browse button color. Uses same color palette accepted as [MatButton] and defaults to 'primary'.\n   */\n  @Input('defaultColor') defaultColor: string = 'primary';\n\n  /**\n   * activeColor?: string\n   * Sets upload button color. Uses same color palette accepted as [MatButton] and defaults to 'accent'.\n   */\n  @Input('activeColor') activeColor: string = 'accent';\n\n  /**\n   * cancelColor?: string\n   * Sets cancel button color. Uses same color palette accepted as [MatButton] and defaults to 'warn'.\n   */\n  @Input('cancelColor') cancelColor: string = 'warn';\n\n  /**\n   * multiple?: boolean\n   * Sets if multiple files can be dropped/selected at once in [TdFileUploadComponent].\n   */\n  @Input('multiple')\n  set multiple(multiple: boolean) {\n    this._multiple = coerceBooleanProperty(multiple);\n  }\n  get multiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * required?: boolean\n   * Forces at least one file upload.\n   * Defaults to 'false'\n   */\n  @Input('required')\n  set required(required: boolean) {\n    this._required = coerceBooleanProperty(required);\n  }\n  get required(): boolean {\n    return this._required;\n  }\n\n  /**\n   * accept?: string\n   * Sets files accepted when opening the file browser dialog.\n   * Same as 'accept' attribute in <input/> element.\n   */\n  @Input('accept') accept: string;\n\n  /**\n   * select?: function\n   * Event emitted when a file is selected.\n   * Emits a [File | FileList] object.\n   */\n  @Output('select') onSelect: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  /**\n   * upload?: function\n   * Event emitted when upload button is clicked.\n   * Emits a [File | FileList] object.\n   */\n  @Output('upload') onUpload: EventEmitter<File | FileList> = new EventEmitter<File | FileList>();\n\n  /**\n   * cancel?: function\n   * Event emitted when cancel button is clicked.\n   */\n  @Output('cancel') onCancel: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(_changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n  }\n\n  /**\n   * Method executed when upload button is clicked.\n   */\n  uploadPressed(): void {\n    if (this.value) {\n      this.onUpload.emit(this.value);\n    }\n  }\n\n  /**\n   * Method executed when a file is selected.\n   */\n  handleSelect(value: File | FileList): void {\n    this.value = value;\n    this.onSelect.emit(value);\n  }\n\n  /**\n   * Methods executed when cancel button is clicked.\n   * Clears files.\n   */\n  cancel(): void {\n    this.value = undefined;\n    this.onCancel.emit(undefined);\n    // check if the file input is rendered before clearing it\n    if (this.fileInput) {\n      this.fileInput.clear();\n    }\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    if (v) {\n      this.cancel();\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscriber } from 'rxjs/Subscriber';\n\nexport interface IUploadOptions {\n  url: string;\n  method: 'post' | 'put';\n  file?: File;\n  headers?: {[key: string]: string};\n  formData?: FormData;\n}\n\n@Injectable()\nexport class TdFileService {\n\n  private _progressSubject: Subject<number> = new Subject<number>();\n  private _progressObservable: Observable<number>;\n\n  /**\n   * Gets progress observable to keep track of the files being uploaded.\n   * Needs to be supported by backend.\n   */\n  get progress(): Observable<number> {\n    return this._progressObservable;\n  }\n\n  constructor() {\n    this._progressObservable = this._progressSubject.asObservable();\n  }\n\n  /**\n   * params:\n   * - options: IUploadOptions {\n   *     url: string,\n   *     method: 'post' | 'put',\n   *     file?: File,\n   *     headers?: {[key: string]: string},\n   *     formData?: FormData\n   * }\n   *\n   * Uses underlying [XMLHttpRequest] to upload a file to a url.\n   * Will be depricated when angular fixes [Http] to allow [FormData] as body.\n   */\n  upload(options: IUploadOptions): Observable<any> {\n    return new Observable<any>((subscriber: Subscriber<any>) => {\n      let xhr: XMLHttpRequest = new XMLHttpRequest();\n      let formData: FormData = new FormData();\n\n      if (options.file !== undefined) {\n        formData.append('file', options.file);\n      } else if (options.formData !== undefined) {\n        formData = options.formData;\n      } else {\n        return subscriber.error('For [IUploadOptions] you have to set either the [file] or the [formData] property.');\n      }\n\n      xhr.upload.onprogress = (event: ProgressEvent) => {\n        let progress: number = 0;\n        if (event.lengthComputable) {\n          progress = Math.round(event.loaded / event.total * 100);\n        }\n        this._progressSubject.next(progress);\n      };\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            subscriber.next(xhr.response);\n            subscriber.complete();\n          } else {\n            subscriber.error(xhr.response);\n          }\n        }\n      };\n\n      xhr.open(options.method, options.url, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      if (options.headers) {\n        for (let key in options.headers) {\n          xhr.setRequestHeader(key, options.headers[key]);\n        }\n      }\n\n      xhr.send(formData);\n    });\n  }\n}\n",
    "import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TdFileSelectDirective } from './directives/file-select.directive';\nimport { TdFileDropDirective } from './directives/file-drop.directive';\nimport { TdFileUploadComponent } from './file-upload/file-upload.component';\nimport { TdFileInputComponent, TdFileInputLabelDirective } from './file-input/file-input.component';\nimport { TdFileService } from './services/file.service';\n\nconst TD_FILE: Type<any>[] = [\n  TdFileSelectDirective,\n  TdFileDropDirective,\n  TdFileUploadComponent,\n  TdFileInputComponent,\n  TdFileInputLabelDirective,\n];\n\n@NgModule({\n  imports: [\n    FormsModule,\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    PortalModule,\n  ],\n  declarations: [\n    TD_FILE,\n  ],\n  exports: [\n    TD_FILE,\n  ],\n  providers: [\n    TdFileService,\n  ],\n})\nexport class CovalentFileModule {\n\n}\n"
  ],
  "names": [
    "TdFileSelectDirective",
    "model",
    "this",
    "onFileSelect",
    "EventEmitter",
    "get",
    "_multiple",
    "undefined",
    "enumerable",
    "configurable",
    "event",
    "target",
    "HTMLInputElement",
    "files",
    "length",
    "value",
    "update",
    "emit",
    "selector",
    "ctorParameters",
    "type",
    "Output",
    "args",
    "multipleBinding",
    "HostBinding",
    "onChange",
    "HostListener",
    "Object",
    "defineProperty",
    "TdFileDropDirective",
    "prototype",
    "coerceBooleanProperty",
    "multiple",
    "disabled",
    "onFileDrop",
    "transfer",
    "dropEffect",
    "_stopEvent",
    "_renderer",
    "addClass",
    "_element",
    "nativeElement",
    "_typeCheck",
    "types",
    "contains",
    "indexOf",
    "stopPropagation",
    "Directive",
    "inputs",
    "Renderer2",
    "disabledBinding",
    "onDrop",
    "onDragOver",
    "onDragLeave",
    "TdFileInputLabelDirective",
    "_super",
    "__extends",
    "TemplatePortalDirective",
    "_TdFileInputMixinBase",
    "mixinControlValueAccessor",
    "mixinDisabled",
    "TdFileInputBase",
    "TdFileInputComponent",
    "_changeDetectorRef",
    "_this",
    "call",
    "onSelect",
    "_inputElement",
    "handleSelect",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "providers",
    "multi",
    "styles",
    "ChangeDetectorRef",
    "color",
    "Input",
    "accept",
    "_required",
    "onCancel",
    "set",
    "TdFileUploadComponent",
    "uploadPressed",
    "onUpload",
    "cancel",
    "fileInput",
    "clear",
    "TdFileService",
    "_progressObservable",
    "upload",
    "options",
    "formData",
    "subscriber",
    "complete",
    "error",
    "xhr",
    "response",
    "open",
    "method",
    "url",
    "setRequestHeader",
    "headers",
    "key",
    "send",
    "decorators",
    "Injectable",
    "TD_FILE",
    "CovalentFileModule",
    "FormsModule",
    "exports"
  ],
  "mappings": "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"
}
