{
  "version": 3,
  "file": "covalent-core-virtual-scroll.umd.min.js",
  "sources": [
    "ng://@covalent/core/virtual-scroll/virtual-scroll/virtual-scroll-row.directive.ts",
    "ng://@covalent/core/virtual-scroll/virtual-scroll/virtual-scroll-container.component.ts",
    "ng://@covalent/core/virtual-scroll/virtual-scroll/virtual-scroll.module.ts"
  ],
  "sourcesContent": [
    "import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\n\n@Directive({selector: '[tdVirtualScrollRow]'})\nexport class TdVirtualScrollRowDirective extends TemplatePortalDirective {\n\n  constructor(templateRef: TemplateRef<any>,\n              viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n  \n}\n",
    "import { Component, Directive, Input, EventEmitter, ContentChild, AfterViewInit, ViewChild,\n         ChangeDetectionStrategy, ChangeDetectorRef, QueryList, ViewChildren, ElementRef, HostListener,\n         Renderer2, AfterViewChecked, OnDestroy, TrackByFunction } from '@angular/core';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdVirtualScrollRowDirective } from './virtual-scroll-row.directive';\n\nconst TD_VIRTUAL_OFFSET: number = 2;\n\n@Component({\n  selector: 'td-virtual-scroll-container',\n  styles: [`:host {\n  display: block;\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  position: relative; }\n`],\n  template: `<div [style.height.px]=\"totalHeight\"></div>\n<div [style.transform]=\"offsetTransform\"\n      [style.position]=\"'absolute'\"\n      [style.width.%]=\"100\">\n  <ng-template let-row\n                let-index=\"index\"\n                ngFor\n                [ngForOf]=\"virtualData\"\n                [ngForTrackBy]=\"trackBy\">\n    <div #rowElement\n         [style.width.%]=\"100\">\n      <ng-template *ngIf=\"_rowTemplate\"\n                  [ngTemplateOutlet]=\"_rowTemplate.templateRef\"\n                  [ngTemplateOutletContext]=\"{row: row,\n                                      index: (fromRow + index),\n                                      first: (fromRow + index) === 0,\n                                      last: (fromRow + index) === (data.length - 1),\n                                      odd: ((fromRow + index + 1) % 2) === 1,\n                                      even: ((fromRow + index + 1) % 2) === 0}\">\n      </ng-template>\n    </div>\n  </ng-template>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdVirtualScrollContainerComponent implements AfterViewInit, AfterViewChecked, OnDestroy {\n\n  private _rowChangeSubs: Subscription;\n  private _initialized: boolean = false;\n\n  private _totalHeight: number = 0;\n  private _hostHeight: number = 0;\n  private _scrollVerticalOffset: number = 0;\n  private _offsetTransform: SafeStyle;\n\n  private _fromRow: number = 0;\n  private _toRow: number = 0;\n\n  private _data: any[];\n  private _virtualData: any[];\n\n  /**\n   * data: any[]\n   * List of items to virtually iterate on.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    if (this._initialized) {\n      this._calculateVirtualRows();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  get virtualData(): any[] {\n    return this._virtualData;\n  }\n\n  @ViewChildren('rowElement') _rows: QueryList<ElementRef>;\n\n  @ContentChild(TdVirtualScrollRowDirective) _rowTemplate: TdVirtualScrollRowDirective;\n\n  get rowHeight(): number {\n    if (this._rows && this._rows.toArray()[0]) {\n      return this._rows.toArray()[0].nativeElement.getBoundingClientRect().height;\n    }\n    return 0;\n  }\n\n  get totalHeight(): number {\n    return this._totalHeight;\n  }\n\n  get fromRow(): number {\n    return this._fromRow;\n  }\n\n  get toRow(): number {\n    return this._toRow;\n  }\n\n  get offsetTransform(): SafeStyle {\n    return this._offsetTransform;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer,\n              private _renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this._rowChangeSubs = this._rows.changes.subscribe(() => {\n      this._calculateVirtualRows();\n    });\n    this._initialized = true;\n    this._calculateVirtualRows();\n  }\n\n  ngAfterViewChecked(): void {\n    let newHostHeight: number = this._elementRef.nativeElement.getBoundingClientRect().height;\n    if (this._hostHeight !== newHostHeight) {\n      this._hostHeight = newHostHeight;\n      if (this._initialized) {\n        this._calculateVirtualRows();\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._rowChangeSubs) {\n      this._rowChangeSubs.unsubscribe();\n    }\n  }\n\n  /**\n   * trackBy?: TrackByFunction\n   * This accepts the same trackBy function [ngFor] does.\n   * https://angular.io/api/core/TrackByFunction\n   */\n  @Input('trackBy') trackBy: TrackByFunction<any> =  (index: number, item: any) => {\n    return item;\n  }\n\n  @HostListener('scroll', ['$event'])\n  handleScroll(event: Event): void {\n    let element: HTMLElement = (<HTMLElement>event.target);\n    if (element) {\n      let verticalScroll: number = element.scrollTop;\n      if (this._scrollVerticalOffset !== verticalScroll) {\n        this._scrollVerticalOffset = verticalScroll;\n        if (this._initialized) {\n          this._calculateVirtualRows();\n        }\n      }\n    }\n  }\n\n  /**\n   * Method to refresh and recalculate the virtual rows\n   * e.g. after changing the [data] content\n   */\n  refresh(): void {\n    this._calculateVirtualRows();\n  }\n\n  /**\n   * Method to scroll to a specific row of the list.\n   */\n  scrollTo(row: number): void {\n    this._elementRef.nativeElement.scrollTop = row * this.rowHeight;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Method to scroll to the start of the list.\n   */\n  scrollToStart(): void {\n    this.scrollTo(0);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Method to scroll to the end of the list.\n   */\n  scrollToEnd(): void {\n    this.scrollTo(this.totalHeight / this.rowHeight);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _calculateVirtualRows(): void {\n    if (this._data) {\n      this._totalHeight = this._data.length * this.rowHeight;\n      let fromRow: number = Math.floor((this._scrollVerticalOffset / this.rowHeight)) - TD_VIRTUAL_OFFSET;\n      this._fromRow = fromRow > 0 ? fromRow : 0;\n      let range: number = Math.floor((this._hostHeight / this.rowHeight)) + (TD_VIRTUAL_OFFSET * 2);\n      let toRow: number = range + this.fromRow;\n      if (isFinite(toRow) && toRow > this._data.length) {\n        toRow = this._data.length;\n      } else if (!isFinite(toRow)) {\n        toRow = TD_VIRTUAL_OFFSET;\n      }\n      this._toRow = toRow;\n    } else {\n      this._totalHeight = 0;\n      this._fromRow = 0;\n      this._toRow = 0;\n    }\n\n    let offset: number = 0;\n    if (this._scrollVerticalOffset > (TD_VIRTUAL_OFFSET * this.rowHeight)) {\n      offset = this.fromRow * this.rowHeight;\n    }\n\n    this._offsetTransform = this._domSanitizer.bypassSecurityTrustStyle('translateY(' + (offset - this.totalHeight) + 'px)');\n    if (this._data) {\n      this._virtualData = this.data.slice(this.fromRow, this.toRow);\n    }\n    // mark for check at the end of the queue so we are sure\n    // that the changes will be marked\n    Promise.resolve().then(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n",
    "import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TdVirtualScrollRowDirective } from './virtual-scroll-row.directive';\nimport { TdVirtualScrollContainerComponent } from './virtual-scroll-container.component';\n\nconst TD_VIRTUAL_SCROLL: Type<any>[] = [\n  TdVirtualScrollRowDirective,\n  TdVirtualScrollContainerComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TD_VIRTUAL_SCROLL,\n  ],\n  exports: [\n    TD_VIRTUAL_SCROLL,\n  ],\n})\nexport class CovalentVirtualScrollModule {\n\n}\n"
  ],
  "names": [
    "TdVirtualScrollRowDirective",
    "templateRef",
    "viewContainerRef",
    "__extends",
    "_super",
    "TdVirtualScrollContainerComponent",
    "_elementRef",
    "_domSanitizer",
    "_renderer",
    "_changeDetectorRef",
    "this",
    "_totalHeight",
    "_hostHeight",
    "_scrollVerticalOffset",
    "_fromRow",
    "trackBy",
    "index",
    "item",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "data",
    "_data",
    "markForCheck",
    "enumerable",
    "configurable",
    "get",
    "_virtualData",
    "_rows",
    "toArray",
    "nativeElement",
    "getBoundingClientRect",
    "height",
    "ngAfterViewInit",
    "_this",
    "_rowChangeSubs",
    "changes",
    "subscribe",
    "_calculateVirtualRows",
    "ngAfterViewChecked",
    "newHostHeight",
    "element",
    "verticalScroll",
    "scrollTop",
    "refresh",
    "scrollTo",
    "row",
    "rowHeight",
    "scrollToStart",
    "scrollToEnd",
    "fromRow",
    "Math",
    "floor",
    "decorators",
    "styles",
    "template",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "propDecorators",
    "type",
    "Input",
    "args",
    "ViewChildren",
    "_rowTemplate",
    "ContentChild",
    "TD_VIRTUAL_SCROLL",
    "CovalentVirtualScrollModule"
  ],
  "mappings": "i2BAAA,SAAAA,EAAAC,EAAAC,wCAGAC,EAAAH,EAAAI,gMC0GA,IACAC,EAAA,WAtDA,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,2GAsFAC,KAAAC,aAAA,EACAD,KAAAE,YAAA,EACAF,KAAAG,sBAAA,EAjCAH,KAAAI,SAAA,gBA7CMJ,KAAKK,QAAX,SAAAC,EAAAC,GACQ,OAARA,GAhEA,OAmEAC,OAAAC,eAAAd,EAAAe,UAAA,0CAQIC,IAAJ,SAAAC,GACAZ,KAAAa,MAAAD,kDAMAZ,KAAeD,mBAAfe,gBAEAC,YAAA,EACAC,cAAA,IAEAR,OAAAC,eAAAd,EAAAe,UAAA,eAEMO,IAAN,WACA,OAAejB,KAAfkB,8CAGEV,OAAFC,eAAAd,EAAAe,UAAA,uEAIAV,KAAAmB,MAAAC,UAAA,GAAAC,cAAAC,wBAAAC,OAEA,mCAGAf,OAAAC,eAAAd,EAAAe,UAAA,8BAQA,OAAiBV,KAAjBC,cAEAc,YAAA,EACAC,cAAA,IAEAR,OAAAC,eAAAd,EAAAe,UAAA,0BAGA,OAAAV,KAAAI,UAEIW,YAAJ,EACAC,cAAA,IAEAR,OAAAC,eAAAd,EAAAe,UAAA,4CAKAK,YAAA,EACIC,cAAJ,IAEAR,OAAAC,eAAAd,EAAAe,UAAA,gEAcIK,YAAJ,EACIC,cAAJ,IAKArB,EAAAe,UAAsCc,gBAAtC,WACA,IAAAC,EAAAzB,KACAA,KAAO0B,eAAP1B,KAAAmB,MAAAQ,QAAAC,UAAA,WACAH,EAAAI,6EAQAlC,EAAAe,UAAAoB,mBAAA,WACA,IAAAC,EAAA/B,KAAAJ,YAAAyB,cAAAC,wBAAAC,kPAqBA,GAAAS,EAAA,CACQ,IAARC,EAAAD,EAAAE,UACAlC,KAAAG,wBAA2C8B,IAC3CjC,KAAAG,sBAAA8B,qDAUAtC,EAAAe,UAAAyB,QAAA,WACAnC,KAAO6B,yBAKPlC,EAAAe,UAAA0B,SAAA,SAAAC,GACArC,KAAAJ,YAAmByB,cAAnBa,UAAAG,EAAArC,KAAAsC,UACAtC,KAAAD,mBAAAe,gBAQAnB,EAAAe,UAAA6B,cAAA,WACIvC,KAAJoC,SAAkB,GAClBpC,KAAAD,mBAA0Be,gBAM1BnB,EAAAe,UAAA8B,YAAA,wRAnHA,EA1FAxC,KAAAI,SAAAqC,EAAA,EAAAA,EAAA,EACA,MAAAC,KAAAC,MAAA3C,KAAAE,YAAAF,KAAAsC,WAAA,oFAyFA,2GAAA,gTA1GA3C,EA2GA,GA7GAA,EAAAiD,4EAgEAC,QAAA,6GAgBAC,SAAA,w9BAEAC,gBAAAC,EAAAA,wBAAAC,wIC5EAtD,EAAAuD,gBACEtC,OAAFuC,KAAAC,EAAAA,MAAAC,MAAA,UACAlC,QAAAgC,KAAAG,EAAAA,aAAAD,MAAA,gBAaAE,eAAAJ,KAAAK,EAAAA,aAAAH,MAAA/D,gHANA,IAAAmE,GACAnE,EACAK,GAEA+D,EAAA,kBACA,aADA"
}
