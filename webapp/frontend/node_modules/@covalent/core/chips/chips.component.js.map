{"version":3,"file":"chips.component.js","sourceRoot":"","sources":["../../../../src/platform/core/chips/chips.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, Output, forwardRef, DoCheck, ViewChild, ViewChildren, QueryList, OnInit, HostListener,\n  ElementRef, Optional, Inject, Directive, TemplateRef, ViewContainerRef, ContentChild, ChangeDetectionStrategy,\n  ChangeDetectorRef, AfterViewInit, OnDestroy, HostBinding, Renderer2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\n\nimport { TemplatePortalDirective } from '@angular/cdk/portal';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, ESCAPE, LEFT_ARROW, RIGHT_ARROW, DELETE, BACKSPACE, ENTER, SPACE, TAB, HOME } from '@angular/cdk/keycodes';\nimport { MatChip } from '@angular/material/chips';\nimport { MatInput } from '@angular/material/input';\nimport { MatOption } from '@angular/material/core';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { timer } from 'rxjs/observable/timer';\nimport { merge } from 'rxjs/observable/merge';\nimport { toPromise } from 'rxjs/operator/toPromise';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter } from 'rxjs/operators/filter';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n\nimport { ICanDisable, mixinDisabled, IControlValueAccessor, mixinControlValueAccessor } from '../common/common.module';\n\n@Directive({\n  selector: '[td-chip]ng-template',\n})\nexport class TdChipDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n@Directive({\n  selector: '[td-autocomplete-option]ng-template',\n})\nexport class TdAutocompleteOptionDirective extends TemplatePortalDirective {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\nexport class TdChipsBase {\n  constructor(public _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/* tslint:disable-next-line */\nexport const _TdChipsMixinBase = mixinControlValueAccessor(mixinDisabled(TdChipsBase), []);\n\n@Component({\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdChipsComponent),\n    multi: true,\n  }],\n  selector: 'td-chips',\n  inputs: ['disabled', 'value'],\n  styleUrls: ['./chips.component.scss' ],\n  templateUrl: './chips.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdChipsComponent extends _TdChipsMixinBase implements IControlValueAccessor, DoCheck, OnInit, AfterViewInit, OnDestroy, ICanDisable {\n\n  private _outsideClickSubs: Subscription;\n\n  private _isMousedown: boolean = false;\n\n  private _items: any[];\n  private _length: number = 0;\n  private _stacked: boolean = false;\n  private _requireMatch: boolean = false;\n  private _color: 'primary' | 'accent' | 'warn' = 'primary';\n  private _inputPosition: 'before' | 'after' = 'after';\n  private _chipAddition: boolean = true;\n  private _chipRemoval: boolean = true;\n  private _focused: boolean = false;\n  private _tabIndex: number = 0;\n\n  _internalClick: boolean = false;\n\n  @ViewChild('input') _nativeInput: ElementRef;\n  @ViewChild(MatInput) _inputChild: MatInput;\n  @ViewChild(MatAutocompleteTrigger) _autocompleteTrigger: MatAutocompleteTrigger;\n  @ViewChildren(MatChip) _chipsChildren: QueryList<MatChip>;\n\n  @ContentChild(TdChipDirective) _chipTemplate: TdChipDirective;\n  @ContentChild(TdAutocompleteOptionDirective) _autocompleteOptionTemplate: TdAutocompleteOptionDirective;\n\n  @ViewChildren(MatOption) _options: QueryList<MatOption>;\n\n  /**\n   * Flag that is true when autocomplete is focused.\n   */\n  get focused(): boolean {\n    return this._focused;\n  }\n\n  /**\n   * FormControl for the matInput element.\n   */\n  inputControl: FormControl = new FormControl();\n\n  /**\n   * items?: any[]\n   * Renders the `mat-autocomplete` with the provided list to display as options.\n   */\n  @Input('items')\n  set items(items: any[]) {\n    this._items = items;\n    this._setFirstOptionActive();\n    this._changeDetectorRef.markForCheck();\n  }\n  get items(): any[] {\n    return this._items;\n  }\n\n  /**\n   * stacked?: boolean\n   * Set stacked or horizontal chips depending on value.\n   * Defaults to false.\n   */\n  @Input('stacked')\n  set stacked(stacked: boolean) {\n    this._stacked = coerceBooleanProperty(stacked);\n  }\n  get stacked(): boolean {\n    return this._stacked;\n  }\n\n  /**\n   * inputPosition?: 'before' | 'after'\n   * Set input position before or after the chips.\n   * Defaults to 'after'.\n   */\n  @Input('inputPosition')\n  set inputPosition(inputPosition: 'before' | 'after') {\n    this._inputPosition = inputPosition;\n  }\n  get inputPosition(): 'before' | 'after' {\n    return this._inputPosition;\n  }\n  \n  /**\n   * requireMatch?: boolean\n   * Blocks custom inputs and only allows selections from the autocomplete list.\n   */\n  @Input('requireMatch')\n  set requireMatch(requireMatch: boolean) {\n    this._requireMatch = coerceBooleanProperty(requireMatch);\n  }\n  get requireMatch(): boolean {\n    return this._requireMatch;\n  }\n\n  /**\n   * chipAddition?: boolean\n   * Disables the ability to add chips. When setting disabled as true, this will be overriden.\n   * Defaults to true.\n   */\n  @Input('chipAddition')\n  set chipAddition(chipAddition: boolean) {\n    this._chipAddition = chipAddition;\n    this._toggleInput();\n  }\n  get chipAddition(): boolean {\n    return this._chipAddition;\n  }\n\n  /**\n   * Checks if not in disabled state and if chipAddition is set to 'true'\n   * States if a chip can be added and if the input is available\n   */\n  get canAddChip(): boolean {\n    return this.chipAddition && !this.disabled;\n  }\n\n  /**\n   * chipRemoval?: boolean\n   * Disables the ability to remove chips. If it doesn't exist chip remmoval defaults to true.\n   * When setting disabled as true, this will be overriden to false.\n   */\n  @Input('chipRemoval')\n  set chipRemoval(chipRemoval: boolean) {\n    this._chipRemoval = chipRemoval;\n  }\n  get chipRemoval(): boolean {\n    return this._chipRemoval;\n  }\n\n  /**\n   * Checks if not in disabled state and if chipRemoval is set to 'true'\n   * States if a chip can be removed\n   */\n  get canRemoveChip(): boolean {\n    return this.chipRemoval && !this.disabled;\n  }\n\n  /**\n   * placeholder?: string\n   * Placeholder for the autocomplete input.\n   */\n  @Input('placeholder') placeholder: string;\n\n  /**\n   * debounce?: number\n   * Debounce timeout between keypresses. Defaults to 200.\n   */\n  @Input('debounce') debounce: number = 200;\n\n  /**\n   * color?: 'primary' | 'accent' | 'warn'\n   * Sets the color for the input and focus/selected state of the chips.\n   * Defaults to 'primary'\n   */\n  @Input('color') \n  set color(color: 'primary' | 'accent' | 'warn') {\n    if (color) {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\n      this._color = color;\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n    }\n  }\n  get color(): 'primary' | 'accent' | 'warn' {\n    return this._color;\n  }\n\n  /**\n   * add?: function\n   * Method to be executed when a chip is added.\n   * Sends chip value as event.\n   */\n  @Output('add') onAdd: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * remove?: function\n   * Method to be executed when a chip is removed.\n   * Sends chip value as event.\n   */\n  @Output('remove') onRemove: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * inputChange?: function\n   * Method to be executed when the value in the autocomplete input changes.\n   * Sends string value as event.\n   */\n  @Output('inputChange') onInputChange: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * chipFocus?: function\n   * Method to be executed when a chip is focused.\n   * Sends chip value as event.\n   */\n  @Output('chipFocus') onChipFocus: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * blur?: function\n   * Method to be executed when a chip is blurred.\n   * Sends chip value as event.\n   */\n  @Output('chipBlur') onChipBlur: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * Hostbinding to set the a11y of the TdChipsComponent depending on its state\n   */\n  @HostBinding('attr.tabindex')\n  get tabIndex(): number {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n\n  constructor(private _elementRef: ElementRef, \n              private _renderer: Renderer2,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(_changeDetectorRef);\n    this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n  }\n\n  /**\n   * Listens to host focus event to act on it\n   */\n  @HostListener('focus', ['$event'])\n  focusListener(event: FocusEvent): void {\n    // should only focus if its not via mousedown to prevent clashing with autocomplete\n    if (!this._isMousedown) {\n      this.focus();\n    }\n    event.preventDefault();\n  }\n\n  /**\n   * Listens to host mousedown event to act on it\n   */\n  @HostListener('mousedown', ['$event'])\n  mousedownListener(event: FocusEvent): void {\n     // sets a flag to know if there was a mousedown and then it returns it back to false\n    this._isMousedown = true;\n    toPromise.call(timer()).then(() => {\n      this._isMousedown = false;\n    });\n  }\n\n  /**\n   * If clicking on :host or `td-chips-wrapper`, then we stop the click propagation so the autocomplete\n   * doesnt close automatically.\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    const clickTarget: HTMLElement = <HTMLElement>event.target;\n    if (clickTarget === this._elementRef.nativeElement || \n        clickTarget.className.indexOf('td-chips-wrapper') > -1) {\n      this.focus();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Listens to host keydown event to act on it depending on the keypress\n   */\n  @HostListener('keydown', ['$event'])\n  keydownListener(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case TAB:\n        // if tabing out, then unfocus the component\n        toPromise.call(timer()).then(() => {\n          this.removeFocusedState();\n        });\n        break;\n      case ESCAPE:\n        if (this._inputChild.focused) {\n          this._nativeInput.nativeElement.blur();\n          this.removeFocusedState();\n          this._closeAutocomplete();\n        } else {\n          this.focus();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  ngOnInit(): void {\n    this.inputControl.valueChanges.pipe(\n      debounceTime(this.debounce),\n    ).subscribe((value: string) => {\n      this.onInputChange.emit(value ? value : '');\n    });\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterViewInit(): void {\n    this._watchOutsideClick();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngDoCheck(): void {\n    // Throw onChange event only if array changes size.\n    if (this.value && this.value.length !== this._length) {\n      this._length = this.value.length;\n      this.onChange(this.value);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._outsideClickSubs) {\n      this._outsideClickSubs.unsubscribe();\n      this._outsideClickSubs = undefined;\n    }\n  }\n\n  _setInternalClick(): void {\n    this._internalClick = true;\n  }\n\n  /** Method executed when the disabled value changes */\n  onDisabledChange(v: boolean): void {\n    this._toggleInput();\n  }\n\n  /**\n   * Method that is executed when trying to create a new chip from the autocomplete.\n   * It check if [requireMatch] is enabled, and tries to add the first active option\n   * else if just adds the value thats on the input\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  _handleAddChip(): boolean {\n    let value: any;\n    if (this.requireMatch) {\n      let selectedOptions: MatOption[] = this._options.toArray().filter((option: MatOption) => {\n        return option.active;\n      });\n      if (selectedOptions.length > 0) {\n        value = selectedOptions[0].value;\n        selectedOptions[0].setInactiveStyles();\n      }\n      if (!value) {\n        return false;\n      }\n    } else {\n      // if there is a selection, then use that\n      // else use the input value as chip\n      if (this._autocompleteTrigger.activeOption) {\n        value = this._autocompleteTrigger.activeOption.value;\n        this._autocompleteTrigger.activeOption.setInactiveStyles();\n      } else {\n        value = this._inputChild.value;\n        if (value.trim() === '') {\n          return false;\n        }\n      }\n    }\n    return this.addChip(value);\n  }\n\n  /**\n   * Method thats exectuted when trying to add a value as chip\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  addChip(value: any): boolean {\n    /**\n     * add a debounce ms delay when reopening the autocomplete to give it time\n     * to rerender the next list and at the correct spot\n     */\n    this._closeAutocomplete();\n    toPromise.call(timer(this.debounce)).then(() => {\n      this.setFocusedState();\n      this._setFirstOptionActive();\n      this._openAutocomplete();\n    });\n\n    this.inputControl.setValue('');\n    // check if value is already part of the model\n    if (this.value.indexOf(value) > -1) {\n      return false;\n    }\n\n    this.value.push(value);\n    this.onAdd.emit(value);\n    this.onChange(this.value);\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Method that is executed when trying to remove a chip.\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  removeChip(index: number): boolean {\n    let removedValues: any[] = this.value.splice(index, 1);\n    if (removedValues.length === 0) {\n      return false;\n    }\n\n    /**\n     * Checks if deleting last single chip, to focus input afterwards\n     * Else check if its not the last chip of the list to focus the next one.\n     */\n    if (index === (this._totalChips - 1) && index === 0) {\n      this._inputChild.focus();\n    } else if (index < (this._totalChips - 1)) {\n      this._focusChip(index + 1);\n    } else if (index > 0) {\n      this._focusChip(index - 1);\n    }\n\n    this.onRemove.emit(removedValues[0]);\n    this.onChange(this.value);\n    this.inputControl.setValue('');\n    this._changeDetectorRef.markForCheck();\n    return true;\n  }\n\n  /**\n   * Sets blur of chip and sends out event\n   */\n  _handleChipBlur(event: FocusEvent, value: any): void {\n    this.onChipBlur.emit(value);\n  }\n\n  /**\n   * Sets focus of chip and sends out event\n   */\n  _handleChipFocus(event: FocusEvent, value: any): void {\n    this.setFocusedState();\n    this.onChipFocus.emit(value);\n  }\n\n  _handleFocus(): boolean {\n    this.setFocusedState();\n    this._setFirstOptionActive();\n    return true;\n  }\n\n  /**\n   * Sets focus state of the component\n   */\n  setFocusedState(): void {\n    if (!this.disabled) {\n      this._focused = true;\n      this._tabIndex = -1;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Removes focus state of the component\n   */\n  removeFocusedState(): void {\n    this._focused = false;\n    this._tabIndex = 0;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Programmatically focus the input or first chip. Since its the component entry point\n   * depending if a user can add or remove chips\n   */\n  focus(): void {\n    if (this.canAddChip) {\n      this._inputChild.focus();\n    } else if (!this.disabled) {\n      this._focusFirstChip();\n    }\n  }\n\n  /**\n   * Passes relevant input key presses.\n   */\n  _inputKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case UP_ARROW:\n        /** \n         * Since the first item is highlighted on [requireMatch], we need to inactivate it\n         * when pressing the up key\n         */\n        if (this.requireMatch) {\n          let length: number = this._options.length;\n          if (length > 0 && this._options.toArray()[0].active) {\n            this._options.toArray()[0].setInactiveStyles();\n            // prevent default window scrolling\n            event.preventDefault();\n          }\n        }\n        break;\n      case LEFT_ARROW:\n      case DELETE:\n      case BACKSPACE:\n        this._closeAutocomplete();\n        /** Check to see if input is empty when pressing left arrow to move to the last chip */\n        if (!this._inputChild.value) {\n          this._focusLastChip();\n          // prevent default window scrolling\n          event.preventDefault();\n        }\n        break;\n      case RIGHT_ARROW:\n        this._closeAutocomplete();\n        /** Check to see if input is empty when pressing right arrow to move to the first chip */\n        if (!this._inputChild.value) {\n          this._focusFirstChip();\n          // prevent default window scrolling\n          event.preventDefault();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Passes relevant chip key presses.\n   */\n  _chipKeydown(event: KeyboardEvent, index: number): void {\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        /** Check to see if we can delete a chip */\n        if (this.canRemoveChip) {\n         this.removeChip(index);\n        }\n        break;\n      case UP_ARROW:\n      case LEFT_ARROW:\n        /**\n         * Check to see if left/down arrow was pressed while focusing the first chip to focus input next\n         * Also check if input should be focused\n         */\n        if (index === 0) {\n          // only try to target input if pressing left\n          if (this.canAddChip && event.keyCode === LEFT_ARROW) {\n            this._inputChild.focus();\n          } else {\n            this._focusLastChip();\n          }\n        } else if (index > 0) {\n          this._focusChip(index - 1);\n        }\n        // prevent default window scrolling\n        event.preventDefault();\n        break;\n      case DOWN_ARROW:\n      case RIGHT_ARROW:\n        /**\n         * Check to see if right/up arrow was pressed while focusing the last chip to focus input next\n         * Also check if input should be focused\n         */\n        if (index === (this._totalChips - 1)) {\n          // only try to target input if pressing right\n          if (this.canAddChip && event.keyCode === RIGHT_ARROW) {\n            this._inputChild.focus();\n          } else {\n            this._focusFirstChip();\n          }\n        } else if (index < (this._totalChips - 1)) {\n          this._focusChip(index + 1);\n        }\n        // prevent default window scrolling\n        event.preventDefault();\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Method to remove from display the value added from the autocomplete since it goes directly as chip.\n   */\n  _removeInputDisplay(): string {\n    return '';\n  }\n\n  /**\n   * Method to open the autocomplete manually if its not already opened\n   */\n  _openAutocomplete(): void {\n    if (!this._autocompleteTrigger.panelOpen) {\n      this._autocompleteTrigger.openPanel();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Method to close the autocomplete manually if its not already closed\n   */\n  _closeAutocomplete(): void {\n    if (this._autocompleteTrigger.panelOpen) {\n      this._autocompleteTrigger.closePanel();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Get total of chips\n   */\n  get _totalChips(): number {\n    let chips: MatChip[] = this._chipsChildren.toArray();\n    return chips.length;\n  }\n\n  /**\n   * Method to focus a desired chip by index\n   */\n  private _focusChip(index: number): void {\n    /** check to see if index exists in the array before focusing */\n    if (index > -1 && this._totalChips > index) {\n      this._chipsChildren.toArray()[index].focus();\n    }\n  }\n\n  /** Method to focus first chip */\n  private _focusFirstChip(): void {\n    this._focusChip(0);\n  }\n\n  /** Method to focus last chip */\n  private _focusLastChip(): void {\n    this._focusChip(this._totalChips - 1);\n  }\n\n  /**\n   * Method to toggle the disable state of input\n   * Checks if not in disabled state and if chipAddition is set to 'true'\n   */\n  private _toggleInput(): void {\n    if (this.canAddChip) {\n      this.inputControl.enable();\n    } else {\n      this.inputControl.disable();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets first option as active to let the user know which one will be added when pressing enter\n   * Only if [requireMatch] has been set\n   */\n  private _setFirstOptionActive(): void {\n    if (this.requireMatch) {\n      // need to use a timer here to wait until the autocomplete has been opened (end of queue)\n      toPromise.call(timer()).then(() => {\n        if (this.focused && this._options && this._options.length > 0) {\n          // clean up of previously active options\n          this._options.toArray().forEach((option: MatOption) => {\n            option.setInactiveStyles();\n          });\n          // set the first one as active\n          this._options.toArray()[0].setActiveStyles();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n  }\n\n  /**\n   * Watches clicks outside of the component to remove the focus\n   * The autocomplete panel is considered inside the component so we\n   * need to use a flag to find out when its clicked.\n   */\n  private _watchOutsideClick(): void {\n    if (this._document) {\n      merge(\n        fromEvent(this._document, 'click'),\n        fromEvent(this._document, 'touchend'),\n      ).pipe(\n        filter(\n          (event: MouseEvent) => {\n            const clickTarget: HTMLElement = <HTMLElement>event.target;\n            setTimeout(() => {\n              this._internalClick = false;\n            });\n            return this.focused &&\n                  (clickTarget !== this._elementRef.nativeElement) &&\n                  !this._elementRef.nativeElement.contains(clickTarget) && !this._internalClick;\n          },\n        ),\n      ).subscribe(() => { \n        if (this.focused) {\n          this._autocompleteTrigger.closePanel();\n          this.removeFocusedState();\n          this.onTouched();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    return undefined;\n  }\n}\n"]}