{"version":3,"file":"paging-bar.component.js","sourceRoot":"","sources":["../../../../src/platform/core/paging/paging-bar.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit, Optional, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Dir } from '@angular/cdk/bidi';\n\nexport interface IPageChangeEvent {\n  page: number;\n  maxPage: number;\n  pageSize: number;\n  total: number;\n  fromRow: number;\n  toRow: number;\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'td-paging-bar',\n  templateUrl: './paging-bar.component.html',\n  styleUrls: ['./paging-bar.component.scss' ],\n})\nexport class TdPagingBarComponent implements OnInit {\n\n  private _pageSize: number = 50;\n  private _total: number = 0;\n  private _page: number = 1;\n  private _fromRow: number = 1;\n  private _toRow: number = 1;\n  private _initialized: boolean = false;\n  private _pageLinks: number[] = [];\n  private _pageLinkCount: number = 0;\n  // special case when 2 pageLinks, detect when hit end of pages so can lead in correct direction\n  private _hitEnd: boolean = false;\n    // special case when 2 pageLinks, detect when hit start of pages so can lead in correct direction\n  private _hitStart: boolean = false;\n\n  /**\n   * firstLast?: boolean\n   * Shows or hides the first and last page buttons of the paging bar. Defaults to 'false'\n   */\n  @Input('firstLast') firstLast: boolean = true;\n\n  /**\n   * initialPage?: number\n   * Sets starting page for the paging bar. Defaults to '1'\n   */\n  @Input('initialPage') initialPage: number = 1;\n\n  /**\n   * pageLinkCount?: number\n   * Amount of page navigation links for the paging bar. Defaults to '0'\n   */\n  @Input('pageLinkCount')\n  set pageLinkCount(pageLinkCount: number) {\n    this._pageLinkCount = coerceNumberProperty(pageLinkCount);\n    this._calculatePageLinks();\n    this._changeDetectorRef.markForCheck();\n  }\n  get pageLinkCount(): number {\n    return this._pageLinkCount;\n  }\n\n  /**\n   * pageSize?: number\n   * Selected page size for the pagination. Defaults 50.\n   */\n  @Input('pageSize')\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._page = 1;\n    if (this._initialized) {\n      this._handleOnChange();\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  /**\n   * total: number\n   * Total rows for the pagination.\n   */\n  @Input('total')\n  set total(total: number) {\n    this._total = coerceNumberProperty(total);\n    this._calculateRows();\n    this._calculatePageLinks();\n    this._changeDetectorRef.markForCheck();\n  }\n  get total(): number {\n    return this._total;\n  }\n\n  /**\n   * pageLinks: number[]\n   * Returns the pageLinks in an array\n   */\n  get pageLinks(): number[] {\n    return this._pageLinks;\n  }\n\n  /**\n   * range: string\n   * Returns the range of the rows.\n   */\n  get range(): string {\n    return `${!this._toRow ? 0 : this._fromRow}-${this._toRow}`;\n  }\n\n  /**\n   * page: number\n   * Returns the current page.\n   */\n  get page(): number {\n    return this._page;\n  }\n\n  /**\n   * page: number\n   * Returns the max page for the current pageSize and total.\n   */\n  get maxPage(): number {\n    return Math.ceil(this._total / this._pageSize);\n  }\n\n  /**\n   * change?: function\n   * Method to be executed when page size changes or any button is clicked in the paging bar.\n   * Emits an [IPageChangeEvent] implemented object.\n   */\n  @Output('change') onChange: EventEmitter<IPageChangeEvent> = new EventEmitter<IPageChangeEvent>();\n\n  get isRTL(): boolean {\n    if (this._dir) {\n      return this._dir.dir === 'rtl';\n    }\n    return false;\n  }\n\n  constructor(@Optional() private _dir: Dir,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this._page = coerceNumberProperty(this.initialPage);\n    this._calculateRows();\n    this._calculatePageLinks();\n    this._initialized = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * navigateToPage?: function\n   * Navigates to a specific valid page. Returns 'true' if page is valid, else 'false'.\n   */\n  navigateToPage(page: number): boolean {\n    if (page === 1 || (page >= 1 && page <= this.maxPage)) {\n      this._page = coerceNumberProperty(Math.floor(page));\n      this._handleOnChange();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * firstPage?: function\n   * Navigates to the first page. Returns 'true' if page is valid, else 'false'.\n   */\n  firstPage(): boolean {\n    return this.navigateToPage(1);\n  }\n\n  /**\n   * prevPage?: function\n   * Navigates to the previous page. Returns 'true' if page is valid, else 'false'.\n   */\n  prevPage(): boolean {\n    return this.navigateToPage(this._page - 1);\n  }\n\n  /**\n   * nextPage?: function\n   * Navigates to the next page. Returns 'true' if page is valid, else 'false'.\n   */\n  nextPage(): boolean {\n    return this.navigateToPage(this._page + 1);\n  }\n\n  /**\n   * lastPage?: function\n   * Navigates to the last page. Returns 'true' if page is valid, else 'false'.\n   */\n  lastPage(): boolean {\n    return this.navigateToPage(this.maxPage);\n  }\n\n  isMinPage(): boolean {\n    return this._page <= 1;\n  }\n\n  isMaxPage(): boolean {\n    return this._page >= this.maxPage;\n  }\n\n  private _calculateRows(): void {\n    let top: number = (this._pageSize * this._page);\n    this._fromRow = (this._pageSize * (this._page - 1)) + 1;\n    this._toRow = this._total > top ? top : this._total;\n  }\n\n  /**\n   * _calculatePageLinks?: function\n   * Calculates the page links that should be shown to the user based on the current state of the paginator\n   */\n  private _calculatePageLinks(): void {\n    // special case when 2 pageLinks, detect when hit end of pages so can lead in correct direction\n    if (this.isMaxPage()) {\n      this._hitEnd = true;\n      this._hitStart = false;\n    }\n    // special case when 2 pageLinks, detect when hit start of pages so can lead in correct direction\n    if (this.isMinPage()) {\n      this._hitEnd = false;\n      this._hitStart = true;\n    }\n    // If the pageLinkCount goes above max possible pages based on perpage setting then reset it to maxPage\n    let actualPageLinkCount: number = this.pageLinkCount;\n    if (this.pageLinkCount > this.maxPage) {\n      actualPageLinkCount = this.maxPage;\n    }\n    // reset the pageLinks array\n    this._pageLinks = [];\n    // fill in the array with the pageLinks based on the current selected page\n    let middlePageLinks: number = Math.floor(actualPageLinkCount / 2);\n    for (let x: number = 0; x < actualPageLinkCount; x++) {\n      // don't go past the maxPage in the pageLinks\n      // have to handle even and odd pageLinkCounts differently so can still lead to the next numbers\n      if ((actualPageLinkCount % 2 === 0 && (this.page + middlePageLinks > this.maxPage)) ||\n          (actualPageLinkCount % 2 !== 0 && (this.page + middlePageLinks >= this.maxPage))) {\n        this._pageLinks[x] = this.maxPage - (actualPageLinkCount - (x + 1));\n      // if the selected page is after the middle then set that page as middle and get the correct balance on left and right\n      // special handling when there are only 2 pageLinks to just drop to next if block so can lead to next numbers when moving to right\n      // when moving to the left then go into this block\n      } else if ((actualPageLinkCount > 2 || actualPageLinkCount <= 2 && this._hitEnd) && (this.page - middlePageLinks) > 0) {\n        this._pageLinks[x] = (this.page - middlePageLinks) + x;\n      // if the selected page is before the middle then set the pages based on the x index leading up to and after selected page\n      } else if ((this.page - middlePageLinks) <= 0) {\n        this._pageLinks[x] = x + 1;\n      // other wise just set the array in order starting from the selected page\n      } else {\n        this._pageLinks[x] = this.page + x;\n      }\n    }\n  }\n\n  private _handleOnChange(): void {\n    this._calculateRows();\n    this._calculatePageLinks();\n    let event: IPageChangeEvent = {\n      page: this._page,\n      maxPage: this.maxPage,\n      pageSize: this._pageSize,\n      total: this._total,\n      fromRow: this._fromRow,\n      toRow: this._toRow,\n    };\n    this._changeDetectorRef.markForCheck();\n    this.onChange.emit(event);\n  }\n\n}\n"]}