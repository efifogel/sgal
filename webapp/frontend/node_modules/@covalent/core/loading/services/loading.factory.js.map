{"version":3,"file":"loading.factory.js","sourceRoot":"","sources":["../../../../../src/platform/core/loading/services/loading.factory.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, ComponentFactoryResolver, ChangeDetectorRef, Provider, SkipSelf, Optional } from '@angular/core';\nimport { Injector, ComponentRef, ViewContainerRef, TemplateRef } from '@angular/core';\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TdLoadingContext } from '../directives/loading.directive';\nimport { TdLoadingComponent, LoadingType, LoadingMode, LoadingStrategy, LoadingStyle } from '../loading.component';\nimport { ITdLoadingConfig } from './loading.service';\n\nexport interface IInternalLoadingOptions extends ITdLoadingConfig {\n  height?: number;\n  style?: LoadingStyle;\n}\n\nexport interface ILoadingRef {\n  observable: Observable<any>;\n  componentRef: ComponentRef<any>;\n  subject?: Subject<any>;\n  times?: number;\n}\n\n/**\n * NOTE: @internal usage only.\n */\n@Injectable()\nexport class TdLoadingFactory {\n\n  constructor(private _componentFactoryResolver: ComponentFactoryResolver,\n              private _overlay: Overlay,\n              private _injector: Injector) {\n  }\n\n  /**\n   * Uses material `Overlay` services to create a DOM element and attach the loading component\n   * into it. Leveraging the state and configuration from it.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createFullScreenComponent(options: ITdLoadingConfig): ILoadingRef {\n    (<IInternalLoadingOptions>options).height = undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.FullScreen;\n    let loadingRef: ILoadingRef = this._initializeContext();\n    let loading: boolean = false;\n    let overlayRef: OverlayRef;\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        overlayRef = this._createOverlay();\n        loadingRef.componentRef = overlayRef.attach(new ComponentPortal(TdLoadingComponent));\n        this._mapOptions(options, loadingRef.componentRef.instance);\n        loadingRef.componentRef.instance.startInAnimation();\n        loadingRef.componentRef.changeDetectorRef.detectChanges();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\n          subs.unsubscribe();\n          loadingRef.componentRef.destroy();\n          overlayRef.detach();\n          overlayRef.dispose();\n        });\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\n   * Leverages TemplatePortals from material to inject the template inside of it so it fits\n   * perfectly when overlaying it.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createOverlayComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\n                                templateRef: TemplateRef<Object>): ILoadingRef {\n    (<IInternalLoadingOptions>options).height = undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.Overlay;\n    let loadingRef: ILoadingRef = this._createComponent(options);\n    let loading: boolean = false;\n    loadingRef.componentRef.instance.content = new TemplatePortal(templateRef, viewContainerRef);\n    viewContainerRef.clear();\n    viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        loadingRef.componentRef.instance.startInAnimation();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        loadingRef.componentRef.instance.startOutAnimation();\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a loading component dynamically and attaches it into the given viewContainerRef.\n   * Replaces the template with the loading component depending if it was registered or resolved.\n   *\n   * Saves a reference in context to be called when registering/resolving the loading element.\n   */\n  public createReplaceComponent(options: ITdLoadingConfig, viewContainerRef: ViewContainerRef,\n                                templateRef: TemplateRef<Object>, context: TdLoadingContext): ILoadingRef {\n    let nativeElement: HTMLElement = <HTMLElement>templateRef.elementRef.nativeElement;\n    (<IInternalLoadingOptions>options).height = nativeElement.nextElementSibling ?\n      nativeElement.nextElementSibling.scrollHeight : undefined;\n    (<IInternalLoadingOptions>options).style = LoadingStyle.None;\n    let loadingRef: ILoadingRef = this._createComponent(options);\n    let loading: boolean = false;\n    viewContainerRef.createEmbeddedView(templateRef, context);\n    loadingRef.observable\n    .subscribe((registered: number) => {\n      if (registered > 0 && !loading) {\n        loading = true;\n        let index: number = viewContainerRef.indexOf(loadingRef.componentRef.hostView);\n        if (index < 0) {\n          viewContainerRef.clear();\n          viewContainerRef.insert(loadingRef.componentRef.hostView, 0);\n        }\n        loadingRef.componentRef.instance.startInAnimation();\n      } else if (registered <= 0 && loading) {\n        loading = false;\n        let subs: Subscription = loadingRef.componentRef.instance.startOutAnimation().subscribe(() => {\n          subs.unsubscribe();\n          // passing context so when the template is re-attached, we can keep the reference of the variables\n          let cdr: ChangeDetectorRef = viewContainerRef.createEmbeddedView(templateRef, context);\n          viewContainerRef.detach(viewContainerRef.indexOf(loadingRef.componentRef.hostView));\n          /**\n           * Need to call \"markForCheck\" and \"detectChanges\" on attached template, so its detected by parent component when attached\n           * with \"OnPush\" change detection\n           */\n          cdr.detectChanges();\n          cdr.markForCheck();\n        });\n      }\n    });\n    return loadingRef;\n  }\n\n  /**\n   * Creates a fullscreen overlay for the loading usage.\n   */\n  private _createOverlay(): OverlayRef {\n    let state: OverlayConfig = new OverlayConfig();\n    state.hasBackdrop = false;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().centerVertically();\n    return this._overlay.create(state);\n  }\n\n  /**\n   * Creates a generic component dynamically waiting to be attached to a viewContainerRef.\n   */\n  private _createComponent(options: IInternalLoadingOptions): ILoadingRef {\n    let compRef: ILoadingRef = this._initializeContext();\n    compRef.componentRef = this._componentFactoryResolver\n    .resolveComponentFactory(TdLoadingComponent).create(this._injector);\n    this._mapOptions(options, compRef.componentRef.instance);\n    return compRef;\n  }\n\n  /**\n   * Initialize context for loading component.\n   */\n  private _initializeContext(): ILoadingRef {\n    let subject: Subject<any> = new Subject<any>();\n    return {\n      observable: subject.asObservable(),\n      subject: subject,\n      componentRef: undefined,\n      times: 0,\n    };\n  }\n\n  /**\n   * Maps configuration to the loading component instance.\n   */\n  private _mapOptions(options: IInternalLoadingOptions, instance: TdLoadingComponent): void {\n    instance.style = options.style;\n    if (options.type !== undefined) {\n      instance.type = options.type;\n    }\n    if (options.height !== undefined) {\n      instance.height = options.height;\n    }\n    if (options.mode !== undefined) {\n      instance.mode = options.mode;\n    }\n    if (options.color !== undefined) {\n      instance.color = options.color;\n    }\n  }\n}\n\nexport function LOADING_FACTORY_PROVIDER_FACTORY(\n    parent: TdLoadingFactory, componentFactoryResolver: ComponentFactoryResolver, overlay: Overlay, injector: Injector): TdLoadingFactory {\n  return parent || new TdLoadingFactory(componentFactoryResolver, overlay, injector);\n}\n\nexport const LOADING_FACTORY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: TdLoadingFactory,\n  deps: [[new Optional(), new SkipSelf(), TdLoadingFactory], ComponentFactoryResolver, Overlay, Injector],\n  useFactory: LOADING_FACTORY_PROVIDER_FACTORY,\n};\n"]}