{"version":3,"file":"disabled.mixin.js","sourceRoot":"","sources":["../../../../../src/platform/core/common/behaviors/disabled.mixin.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAQ9D,4EAA4E;AAC5E,MAAM,wBAAmD,IAAO;IAC9D,MAAM;QAAe,mCAAI;QAGvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BACW,IAAI,UACd;YAJO,eAAS,GAAY,KAAK,CAAC;;QAInC,CAAC;QAED,sBAAI,6BAAQ;iBAAZ;gBACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACxB,CAAC;iBACD,UAAa,KAAc;gBACzB,IAAI,QAAQ,GAAY,qBAAqB,CAAC,KAAK,CAAC,CAAC;gBACrD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAChC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;oBAC1B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACxC,CAAC;YACH,CAAC;;;WAPA;QASD,kCAAgB,GAAhB,UAAiB,CAAU;YACzB,0EAA0E;QAC5E,CAAC;QACH,cAAC;IAAD,CAAC,AArBM,CAAc,IAAI,GAqBvB;AACJ,CAAC","sourcesContent":["import { Constructor } from './constructor';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Interface to implement when applying the disabled mixin */\nexport interface ICanDisable {\n  disabled: boolean;\n  onDisabledChange(v: boolean): void;\n}\n\n/** Mixin to augment a component or directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<ICanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    get disabled(): boolean {\n      return this._disabled;\n    }\n    set disabled(value: boolean) {\n      let newValue: boolean = coerceBooleanProperty(value);\n      if (this._disabled !== newValue) {\n        this._disabled = newValue;\n        this.onDisabledChange(this._disabled);\n      }\n    }\n\n    onDisabledChange(v: boolean): void {\n      /** NOT IMPLEMENTED, this needs to be overriden by subclasses if needed */\n    }\n  };\n}\n"]}