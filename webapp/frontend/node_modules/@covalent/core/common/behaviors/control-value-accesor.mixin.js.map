{"version":3,"file":"control-value-accesor.mixin.js","sourceRoot":"","sources":["../../../../../src/platform/core/common/behaviors/control-value-accesor.mixin.ts"],"names":[],"mappings":";AAKA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAEvC,IAAM,IAAI,GAAQ;IAChB,eAAe;AACjB,CAAC,CAAC;AAaF,yDAAyD;AACzD,MAAM,oCACW,IAAO,EAAE,YAAkB;IAC1C,MAAM;QAAe,mCAAI;QAKvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BACW,IAAI,UAGd;YARO,YAAM,GAAQ,YAAY,CAAC;YAmCnC,cAAQ,GAAG,UAAC,CAAM,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC;YAC5B,eAAS,GAAG,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;YA9BrB,KAAI,CAAC,oBAAoB,GAAG,IAAI,OAAO,EAAO,CAAC;YAC/C,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC;;QAC/D,CAAC;QAED,sBAAI,0BAAK;iBAQT;gBACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACrB,CAAC;iBAVD,UAAU,CAAM;gBACd,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACtB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;oBAChB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACjB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;oBACvC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC;YACH,CAAC;;;WAAA;QAKD,4BAAU,GAAV,UAAW,KAAU;YACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QACzC,CAAC;QAED,kCAAgB,GAAhB,UAAiB,EAAO;YACtB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACrB,CAAC;QAED,mCAAiB,GAAjB,UAAkB,EAAO;YACvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACtB,CAAC;QAKH,cAAC;IAAD,CAAC,AAvCM,CAAc,IAAI,GAuCvB;AACJ,CAAC","sourcesContent":["import { Constructor } from './constructor';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nconst noop: any = () => {\n  // empty method\n};\n\nexport interface IControlValueAccessor extends ControlValueAccessor {\n  value: any;\n  valueChanges: Observable<any>;\n  onChange: (_: any) => any;\n  onTouched: () => any;\n}\n\nexport interface IHasChangeDetectorRef {\n  _changeDetectorRef: ChangeDetectorRef;\n}\n\n/** Mixin to augment a component with ngModel support. */\nexport function mixinControlValueAccessor<T extends Constructor<IHasChangeDetectorRef>>\n                (base: T, initialValue?: any): Constructor<IControlValueAccessor> & T {\n  return class extends base {\n    private _value: any = initialValue;\n    private _subjectValueChanges: Subject<any>;\n    valueChanges: Observable<any>;\n\n    constructor(...args: any[]) {\n      super(...args); \n      this._subjectValueChanges = new Subject<any>();\n      this.valueChanges = this._subjectValueChanges.asObservable();\n    }\n\n    set value(v: any) {\n      if (v !== this._value) {\n        this._value = v;\n        this.onChange(v);\n        this._changeDetectorRef.markForCheck();\n        this._subjectValueChanges.next(v);\n      }\n    }\n    get value(): any {\n      return this._value;\n    }\n\n    writeValue(value: any): void {\n      this.value = value;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    registerOnChange(fn: any): void {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n      this.onTouched = fn;\n    }\n\n    onChange = (_: any) => noop;\n    onTouched = () => noop;\n\n  };\n}\n"]}