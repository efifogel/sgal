{"version":3,"file":"disable-ripple.mixin.js","sourceRoot":"","sources":["../../../../../src/platform/core/common/behaviors/disable-ripple.mixin.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAQ9D,4EAA4E;AAC5E,MAAM,6BAAwD,IAAO;IACnE,MAAM;QAAe,mCAAI;QAGvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BACW,IAAI,UACd;YAJO,oBAAc,GAAY,KAAK,CAAC;;QAIxC,CAAC;QAED,sBAAI,kCAAa;iBAAjB;gBACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC7B,CAAC;iBACD,UAAkB,KAAc;gBAC9B,IAAI,QAAQ,GAAY,qBAAqB,CAAC,KAAK,CAAC,CAAC;gBACrD,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;oBAC/B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAClD,CAAC;YACH,CAAC;;;WAPA;QASD,uCAAqB,GAArB,UAAsB,CAAU;YAC9B,0EAA0E;QAC5E,CAAC;QACH,cAAC;IAAD,CAAC,AArBM,CAAc,IAAI,GAqBvB;AACJ,CAAC","sourcesContent":["import { Constructor } from './constructor';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Interface to implement when applying the disabled mixin */\nexport interface ICanDisableRipple {\n  disableRipple: boolean;\n  onDisableRippleChange(v: boolean): void;\n}\n\n/** Mixin to augment a component or directive with a `disabled` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): Constructor<ICanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    get disableRipple(): boolean {\n      return this._disableRipple;\n    }\n    set disableRipple(value: boolean) {\n      let newValue: boolean = coerceBooleanProperty(value);\n      if (this._disableRipple !== newValue) {\n        this._disableRipple = newValue;\n        this.onDisableRippleChange(this._disableRipple);\n      }\n    }\n\n    onDisableRippleChange(v: boolean): void {\n      /** NOT IMPLEMENTED, this needs to be overriden by subclasses if needed */\n    }\n  };\n}\n"]}