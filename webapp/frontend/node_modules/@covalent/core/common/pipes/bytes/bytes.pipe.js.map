{"version":3,"file":"bytes.pipe.js","sourceRoot":"","sources":["../../../../../../src/platform/core/common/pipes/bytes/bytes.pipe.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AAMpD;IAAA;IAmBA,CAAC;IAlBC;gDAC4C;IAC5C,+BAAS,GAAT,UAAU,KAAU,EAAE,SAAqB;QAArB,0BAAA,EAAA,aAAqB;QACzC,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,oDAAoD;YACpD,MAAM,CAAC,gBAAgB,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,GAAW,IAAI,CAAC;QACrB,IAAI,KAAK,GAAa,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5E,IAAI,CAAC,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,iBAAiB;QACjB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,gBAAgB,CAAC;QAC1B,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;IAlBU,WAAW;QAJvB,IAAI,CAAC;YACJ,IAAI,EAAE,OAAO;SACd,CAAC;OAEW,WAAW,CAmBvB;IAAD,kBAAC;CAAA,AAnBD,IAmBC;SAnBY,WAAW","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'bytes',\n})\n\nexport class TdBytesPipe implements PipeTransform {\n  /* `bytes` needs to be `any` or TypeScript complains\n  Tried both `number` and `number | string` */\n  transform(bytes: any, precision: number = 2): string {\n    if (bytes === 0) {\n      return '0 B';\n    } else if (isNaN(parseInt(bytes, 10))) {\n      /* If not a valid number, return 'Invalid Number' */\n      return 'Invalid Number';\n    }\n    let k: number = 1024;\n    let sizes: string[] = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let i: number = Math.floor(Math.log(bytes) / Math.log(k));\n    // if less than 1\n    if (i < 0) {\n      return 'Invalid Number';\n    }\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(precision)) + ' ' + sizes[i];\n  }\n}\n"]}