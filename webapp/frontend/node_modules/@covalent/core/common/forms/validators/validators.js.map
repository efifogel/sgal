{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../../../src/platform/core/common/forms/validators/validators.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAgC,MAAM,gBAAgB,CAAC;AAE1E;IAAA;IAiCA,CAAC;IAhCQ,sBAAG,GAAV,UAAW,QAAa;QACtB,IAAI,IAAI,GAAgB,UAAC,CAAkB;YACzC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM,CAAC,SAAS,CAAC;YACnB,CAAC;YACD,IAAI,CAAC,GAAW,CAAC,CAAC,KAAK,CAAC;YACxB,MAAM,CAAC,CAAC,GAAG,QAAQ;gBACjB,EAAE,GAAG,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,EAAC,EAAE;gBAC7C,SAAS,CAAC;QACd,CAAC,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,sBAAG,GAAV,UAAW,QAAa;QACtB,IAAI,IAAI,GAAgB,UAAC,CAAkB;YACzC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM,CAAC,SAAS,CAAC;YACnB,CAAC;YACD,IAAI,CAAC,GAAW,CAAC,CAAC,KAAK,CAAC;YACxB,MAAM,CAAC,CAAC,GAAG,QAAQ;gBACjB,EAAE,GAAG,EAAE,EAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,EAAC,EAAE;gBAC7C,SAAS,CAAC;QACd,CAAC,CAAC;QACF,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,iCAAc,GAArB,UAAsB,CAAkB;QACtC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAC1B,EAAE,QAAQ,EAAE,IAAI,EAAE;YAClB,SAAS,CAAC;IAChB,CAAC;IAEH,yBAAC;AAAD,CAAC,AAjCD,IAiCC","sourcesContent":["import { Validators, AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport class CovalentValidators {\n  static min(minValue: any): ValidatorFn {\n    let func: ValidatorFn = (c: AbstractControl): {[key: string]: any} => {\n      if (!!Validators.required(c) || (!minValue && minValue !== 0)) {\n        return undefined;\n      }\n      let v: number = c.value;\n      return v < minValue ?\n        { min: {minValue: minValue, actualValue: v} } :\n        undefined;\n    };\n    return func;\n  }\n\n  static max(maxValue: any): ValidatorFn {\n    let func: ValidatorFn = (c: AbstractControl): {[key: string]: any} => {\n      if (!!Validators.required(c) || (!maxValue && maxValue !== 0)) {\n        return undefined;\n      }\n      let v: number = c.value;\n      return v > maxValue ?\n        { max: {maxValue: maxValue, actualValue: v} } :\n        undefined;\n    };\n    return func;\n  }\n\n  static numberRequired(c: AbstractControl): {[key: string]: any} {\n    return (Number.isNaN(c.value)) ?\n        { required: true } :\n        undefined;\n  }\n\n}\n"]}