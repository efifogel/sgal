{"version":3,"file":"prompt-dialog.component.js","sourceRoot":"","sources":["../../../../../src/platform/core/dialogs/prompt-dialog/prompt-dialog.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAiB,MAAM,eAAe,CAAC;AAChF,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAOxD;IASE,iCAAoB,UAAiD;QAAjD,eAAU,GAAV,UAAU,CAAuC;QALrE,iBAAY,GAAW,QAAQ,CAAC;QAChC,iBAAY,GAAW,QAAQ,CAAC;IAIwC,CAAC;IAEzE,iDAAe,GAAf;QAAA,iBAKC;QAJC,yDAAyD;QACzD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;YACF,KAAI,CAAC,MAAM,CAAC,aAAc,CAAC,KAAK,EAAE,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,kDAAgB,GAAhB;QACqB,IAAI,CAAC,MAAM,CAAC,aAAc,CAAC,MAAM,EAAE,CAAC;IACzD,CAAC;IAED,wCAAM,GAAN;QACE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAED,wCAAM,GAAN;QACE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAzBmB;QAAnB,SAAS,CAAC,OAAO,CAAC;0CAAS,UAAU;2DAAC;IAP5B,uBAAuB;QALnC,SAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;YAC5B,WAAW,EAAE,gCAAgC;YAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAE;SAC/C,CAAC;iDAUgC,YAAY;OATjC,uBAAuB,CAiCnC;IAAD,8BAAC;CAAA,AAjCD,IAiCC;SAjCY,uBAAuB","sourcesContent":["import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'td-prompt-dialog',\n  templateUrl: './prompt-dialog.component.html',\n  styleUrls: ['./prompt-dialog.component.scss' ],\n})\nexport class TdPromptDialogComponent implements AfterViewInit {\n  title: string;\n  message: string;\n  value: string;\n  cancelButton: string = 'CANCEL';\n  acceptButton: string = 'ACCEPT';\n\n  @ViewChild('input') _input: ElementRef;\n\n  constructor(private _dialogRef: MatDialogRef<TdPromptDialogComponent>) {}\n\n  ngAfterViewInit(): void {\n    // focus input once everything is rendered and good to go\n    Promise.resolve().then(() => {\n      (<HTMLInputElement>this._input.nativeElement).focus();\n    });\n  }\n\n  /**\n   * Method executed when input is focused\n   * Selects all text\n   */\n  handleInputFocus(): void {\n    (<HTMLInputElement>this._input.nativeElement).select();\n  }\n\n  cancel(): void {\n    this._dialogRef.close(undefined);\n  }\n\n  accept(): void {\n    this._dialogRef.close(this.value);\n  }\n}\n"]}