// Copyright (c) 2018 Israel.
// All rights reserved.
//
// This file is part of SGAL; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; version 2.1 of the
// License. See the file LICENSE.LGPL distributed with SGAL.
//
// Licensees holding a valid commercial license may use this file in
// accordance with the commercial license agreement provided with the
// software.
//
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING
// THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE.
//
// Author(s): Efi Fogel         <efifogel@gmail.com>

#ifndef SGAL_DXF_BLOCK_HPP
#define SGAL_DXF_BLOCK_HPP

#include <string>
#include <string>
#include <map>

#include "SGAL/basic.hpp"
#include "SGAL/Types.hpp"

SGAL_BEGIN_NAMESPACE

class Dxf_parser;

struct SGAL_SGAL_DECL Dxf_block {
  String m_handle;      // Handle
  Uint m_owner_handle;  // Soft-pointer ID/handle to owner object
  String m_layer_name;  // Layer name
  String m_name;        // Block name
  int16_t m_flags;      // Block-type flags (bit-coded values, may be combined):
                        // 0 = Indicates none of the following flags apply
                        // 1 = This is an anonymous block generated by hatching,
                        //     associative dimensioning, other internal
                        //     operations, or an application
                        // 2 = This block has non-constant attribute definitions
                        //     (this bit is not set if the block has any
                        //     attribute definitions that are constant, or has
                        //     no attribute definitions at all)
                        // 4 = This block is an external reference (xref)
                        // 8 = This block is an xref overlay
                        // 16 = This block is externally dependent
                        // 32 = This is a resolved external reference, or
                        //      dependent of an external reference (ignored on
                        //      input)
                        // 64 = This definition is a referenced external
                        //     reference (ignored on input)
  double m_base_point[3]; // Base point
  String m_xref_path_name; // Xref path name
  String m_description; // Block description (optional)
  std::map<String, std::vector<String> > m_xdata; // Begin xdata "{", "}" (opt.)

  /*! Handle a value that requires special handling (as opposed to only storing).
   */
  bool handle_value(Dxf_parser& parser, int code, int16_t value);
};

SGAL_END_NAMESPACE

#endif
